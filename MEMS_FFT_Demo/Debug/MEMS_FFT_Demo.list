
MEMS_FFT_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c144  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003294  0800c2d8  0800c2d8  0001c2d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f56c  0800f56c  000205e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f56c  0800f56c  0001f56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f574  0800f574  000205e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f574  0800f574  0001f574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f578  0800f578  0001f578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005e4  20000000  0800f57c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d68  200005e4  0800fb60  000205e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000634c  0800fb60  0002634c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e21  00000000  00000000  00020614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cf3  00000000  00000000  00036435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  0003a128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00024eb5  00000000  00000000  0003afa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000142a8  00000000  00000000  0005fe55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d803a  00000000  00000000  000740fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000d2  00000000  00000000  0014c137  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c50  00000000  00000000  0014c210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048a8  00000000  00000000  0014ce60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005e4 	.word	0x200005e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c2bc 	.word	0x0800c2bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005e8 	.word	0x200005e8
 80001cc:	0800c2bc 	.word	0x0800c2bc

080001d0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80001d0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80001d2:	2b01      	cmp	r3, #1
	IT       LS
 80001d4:	bf98      	it	ls
	BXLS     lr
 80001d6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80001dc:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80001e8:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80001ee:	4480      	add	r8, r0
	ADD      r9,r0,r9
 80001f0:	4481      	add	r9, r0
	ADD      r2,r0,r2
 80001f2:	4402      	add	r2, r0
	ADD      r12,r0,r12
 80001f4:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80001fe:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000204:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000208:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800020c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000210:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800021a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800022c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800022e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000230:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800023a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800023c:	2b01      	cmp	r3, #1
	IT       LS
 800023e:	bf98      	it	ls
	BXLS     lr
 8000240:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000246:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000252:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000270:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000276:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800027a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800027e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000282:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 8000284:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000286:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
	POP      {r4-r9}
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 800028e:	4770      	bx	lr

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96e 	b.w	8000f5c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468c      	mov	ip, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8083 	bne.w	8000dae <__udivmoddi4+0x116>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d947      	bls.n	8000d3e <__udivmoddi4+0xa6>
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	b142      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	f1c2 0020 	rsb	r0, r2, #32
 8000cb8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	4097      	lsls	r7, r2
 8000cc0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd0:	fa1f fe87 	uxth.w	lr, r7
 8000cd4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cea:	f080 8119 	bcs.w	8000f20 <__udivmoddi4+0x288>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8116 	bls.w	8000f20 <__udivmoddi4+0x288>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8105 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8102 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	b902      	cbnz	r2, 8000d42 <__udivmoddi4+0xaa>
 8000d40:	deff      	udf	#255	; 0xff
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d150      	bne.n	8000dec <__udivmoddi4+0x154>
 8000d4a:	1bcb      	subs	r3, r1, r7
 8000d4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d50:	fa1f f887 	uxth.w	r8, r7
 8000d54:	2601      	movs	r6, #1
 8000d56:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5a:	0c21      	lsrs	r1, r4, #16
 8000d5c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb08 f30c 	mul.w	r3, r8, ip
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0xe2>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	f200 80e9 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d88:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x10c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x10a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80d9 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e7bf      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x12e>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80b1 	beq.w	8000f1a <__udivmoddi4+0x282>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x1cc>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x140>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80b8 	bhi.w	8000f48 <__udivmoddi4+0x2b0>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0103 	sbc.w	r1, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	468c      	mov	ip, r1
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0a8      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000de6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dea:	e7a5      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f603 	lsr.w	r6, r0, r3
 8000df4:	4097      	lsls	r7, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	4330      	orrs	r0, r6
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e08:	fa1f f887 	uxth.w	r8, r7
 8000e0c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f108 	mul.w	r1, r6, r8
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x19c>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e26:	f080 808d 	bcs.w	8000f44 <__udivmoddi4+0x2ac>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 808a 	bls.w	8000f44 <__udivmoddi4+0x2ac>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b281      	uxth	r1, r0
 8000e38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb00 f308 	mul.w	r3, r0, r8
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x1c4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e52:	d273      	bcs.n	8000f3c <__udivmoddi4+0x2a4>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d971      	bls.n	8000f3c <__udivmoddi4+0x2a4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4439      	add	r1, r7
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e62:	e778      	b.n	8000d56 <__udivmoddi4+0xbe>
 8000e64:	f1c6 0c20 	rsb	ip, r6, #32
 8000e68:	fa03 f406 	lsl.w	r4, r3, r6
 8000e6c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e70:	431c      	orrs	r4, r3
 8000e72:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e82:	431f      	orrs	r7, r3
 8000e84:	0c3b      	lsrs	r3, r7, #16
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fa1f f884 	uxth.w	r8, r4
 8000e8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e96:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x220>
 8000ea6:	1861      	adds	r1, r4, r1
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	d248      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000eae:	458a      	cmp	sl, r1
 8000eb0:	d946      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4421      	add	r1, r4
 8000eb8:	eba1 010a 	sub.w	r1, r1, sl
 8000ebc:	b2bf      	uxth	r7, r7
 8000ebe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eca:	fb00 f808 	mul.w	r8, r0, r8
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x24a>
 8000ed2:	19e7      	adds	r7, r4, r7
 8000ed4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed8:	d22e      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d92c      	bls.n	8000f38 <__udivmoddi4+0x2a0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4427      	add	r7, r4
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	eba7 0708 	sub.w	r7, r7, r8
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	454f      	cmp	r7, r9
 8000ef0:	46c6      	mov	lr, r8
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	d31a      	bcc.n	8000f2c <__udivmoddi4+0x294>
 8000ef6:	d017      	beq.n	8000f28 <__udivmoddi4+0x290>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x27a>
 8000efa:	ebb3 020e 	subs.w	r2, r3, lr
 8000efe:	eb67 0701 	sbc.w	r7, r7, r1
 8000f02:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f06:	40f2      	lsrs	r2, r6
 8000f08:	ea4c 0202 	orr.w	r2, ip, r2
 8000f0c:	40f7      	lsrs	r7, r6
 8000f0e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f12:	2600      	movs	r6, #0
 8000f14:	4631      	mov	r1, r6
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e70b      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6fd      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f28:	4543      	cmp	r3, r8
 8000f2a:	d2e5      	bcs.n	8000ef8 <__udivmoddi4+0x260>
 8000f2c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f30:	eb69 0104 	sbc.w	r1, r9, r4
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7df      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e7d2      	b.n	8000ee2 <__udivmoddi4+0x24a>
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	e78d      	b.n	8000e5c <__udivmoddi4+0x1c4>
 8000f40:	4681      	mov	r9, r0
 8000f42:	e7b9      	b.n	8000eb8 <__udivmoddi4+0x220>
 8000f44:	4666      	mov	r6, ip
 8000f46:	e775      	b.n	8000e34 <__udivmoddi4+0x19c>
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e74a      	b.n	8000de2 <__udivmoddi4+0x14a>
 8000f4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f50:	4439      	add	r1, r7
 8000f52:	e713      	b.n	8000d7c <__udivmoddi4+0xe4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	e724      	b.n	8000da4 <__udivmoddi4+0x10c>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <arm_sqrt_f32>:
   */

  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f6a:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8000f6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f78:	db0a      	blt.n	8000f90 <arm_sqrt_f32+0x30>

//      #if __FPU_USED
#if (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#else
      *pOut = sqrtf(in);
 8000f7a:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f7e:	f00a fdcb 	bl	800bb18 <sqrtf>
 8000f82:	eef0 7a40 	vmov.f32	s15, s0
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e005      	b.n	8000f9c <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
    }

  }
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	61fb      	str	r3, [r7, #28]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8000fb6:	e072      	b.n	800109e <arm_cmplx_mag_f32+0xfa>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	1d1a      	adds	r2, r3, #4
 8000fbc:	60fa      	str	r2, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	1d1a      	adds	r2, r3, #4
 8000fc6:	60fa      	str	r2, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8000fcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fd0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000fd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fd8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	1d1a      	adds	r2, r3, #4
 8000fe4:	60ba      	str	r2, [r7, #8]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fec:	f7ff ffb8 	bl	8000f60 <arm_sqrt_f32>

    realIn = *pSrc++;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	1d1a      	adds	r2, r3, #4
 8000ff4:	60fa      	str	r2, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	1d1a      	adds	r2, r3, #4
 8000ffe:	60fa      	str	r2, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001004:	edd7 7a06 	vldr	s15, [r7, #24]
 8001008:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800100c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001010:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	1d1a      	adds	r2, r3, #4
 800101c:	60ba      	str	r2, [r7, #8]
 800101e:	4618      	mov	r0, r3
 8001020:	eeb0 0a67 	vmov.f32	s0, s15
 8001024:	f7ff ff9c 	bl	8000f60 <arm_sqrt_f32>

    realIn = *pSrc++;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	1d1a      	adds	r2, r3, #4
 800102c:	60fa      	str	r2, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	1d1a      	adds	r2, r3, #4
 8001036:	60fa      	str	r2, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800103c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001040:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001044:	edd7 7a05 	vldr	s15, [r7, #20]
 8001048:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800104c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	1d1a      	adds	r2, r3, #4
 8001054:	60ba      	str	r2, [r7, #8]
 8001056:	4618      	mov	r0, r3
 8001058:	eeb0 0a67 	vmov.f32	s0, s15
 800105c:	f7ff ff80 	bl	8000f60 <arm_sqrt_f32>

    realIn = *pSrc++;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1d1a      	adds	r2, r3, #4
 8001064:	60fa      	str	r2, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	1d1a      	adds	r2, r3, #4
 800106e:	60fa      	str	r2, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001074:	edd7 7a06 	vldr	s15, [r7, #24]
 8001078:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800107c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001080:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1d1a      	adds	r2, r3, #4
 800108c:	60ba      	str	r2, [r7, #8]
 800108e:	4618      	mov	r0, r3
 8001090:	eeb0 0a67 	vmov.f32	s0, s15
 8001094:	f7ff ff64 	bl	8000f60 <arm_sqrt_f32>


    /* Decrement the loop counter */
    blkCnt--;
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	3b01      	subs	r3, #1
 800109c:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d189      	bne.n	8000fb8 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	61fb      	str	r3, [r7, #28]

  while(blkCnt > 0u)
 80010ac:	e01e      	b.n	80010ec <arm_cmplx_mag_f32+0x148>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	1d1a      	adds	r2, r3, #4
 80010b2:	60fa      	str	r2, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	1d1a      	adds	r2, r3, #4
 80010bc:	60fa      	str	r2, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80010c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80010c6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80010ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1d1a      	adds	r2, r3, #4
 80010da:	60ba      	str	r2, [r7, #8]
 80010dc:	4618      	mov	r0, r3
 80010de:	eeb0 0a67 	vmov.f32	s0, s15
 80010e2:	f7ff ff3d 	bl	8000f60 <arm_sqrt_f32>

    /* Decrement the loop counter */
    blkCnt--;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1dd      	bne.n	80010ae <arm_cmplx_mag_f32+0x10a>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 80010f2:	bf00      	nop
 80010f4:	bf00      	nop
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0a0      	sub	sp, #128	; 0x80
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 800110c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	4413      	add	r3, r2
 8001114:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8001120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001122:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8001124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001126:	085b      	lsrs	r3, r3, #1
 8001128:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 800112a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	4413      	add	r3, r2
 8001132:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8001134:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800113a:	4413      	add	r3, r2
 800113c:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 800113e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001144:	e1b6      	b.n	80014b4 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 800115e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 8001164:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 800116a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 8001170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 8001176:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 800117c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 8001182:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 8001188:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 800118e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 8001194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 800119a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 80011a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 80011a6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80011aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	1d1a      	adds	r2, r3, #4
 80011b2:	603a      	str	r2, [r7, #0]
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b8:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 80011bc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80011c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	1d1a      	adds	r2, r3, #4
 80011c8:	603a      	str	r2, [r7, #0]
 80011ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ce:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 80011d2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80011d6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	1d1a      	adds	r2, r3, #4
 80011de:	603a      	str	r2, [r7, #0]
 80011e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e4:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 80011e8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80011ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	1d1a      	adds	r2, r3, #4
 80011f4:	603a      	str	r2, [r7, #0]
 80011f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fa:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 80011fe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001202:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 800120e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001212:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 800121e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001222:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 800122e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001232:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800123a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 800123e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001242:	edd7 7a02 	vldr	s15, [r7, #8]
 8001246:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001248:	1d1a      	adds	r2, r3, #4
 800124a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800124c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001250:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 8001254:	ed97 7a07 	vldr	s14, [r7, #28]
 8001258:	edd7 7a03 	vldr	s15, [r7, #12]
 800125c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800125e:	1d1a      	adds	r2, r3, #4
 8001260:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001266:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 800126a:	ed97 7a08 	vldr	s14, [r7, #32]
 800126e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001272:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001274:	1d1a      	adds	r2, r3, #4
 8001276:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127c:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 8001280:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001284:	edd7 7a05 	vldr	s15, [r7, #20]
 8001288:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800128a:	1d1a      	adds	r2, r3, #4
 800128c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800128e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001292:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 8001296:	ed97 7a02 	vldr	s14, [r7, #8]
 800129a:	edd7 7a06 	vldr	s15, [r7, #24]
 800129e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a2:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 80012a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80012aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b2:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 80012b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80012ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80012be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c2:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 80012c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80012ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d2:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 80012d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012d8:	1d1a      	adds	r2, r3, #4
 80012da:	673a      	str	r2, [r7, #112]	; 0x70
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 80012e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012e2:	1d1a      	adds	r2, r3, #4
 80012e4:	673a      	str	r2, [r7, #112]	; 0x70
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 80012ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80012ee:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80012f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 80012fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80012fe:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001306:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 800130a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800130e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001316:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 800131a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800131e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001326:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 800132a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800132c:	1d1a      	adds	r2, r3, #4
 800132e:	677a      	str	r2, [r7, #116]	; 0x74
 8001330:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001334:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800133c:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8001340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001342:	1d1a      	adds	r2, r3, #4
 8001344:	677a      	str	r2, [r7, #116]	; 0x74
 8001346:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800134a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800134e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001352:	edc3 7a00 	vstr	s15, [r3]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 8001356:	edd7 7a02 	vldr	s15, [r7, #8]
 800135a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800135e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001362:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 8001366:	edd7 7a03 	vldr	s15, [r7, #12]
 800136a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800136e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001372:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 8001376:	edd7 7a03 	vldr	s15, [r7, #12]
 800137a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800137e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001382:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 8001386:	edd7 7a02 	vldr	s15, [r7, #8]
 800138a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800138e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001392:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 8001396:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001398:	1d1a      	adds	r2, r3, #4
 800139a:	67ba      	str	r2, [r7, #120]	; 0x78
 800139c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80013a0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80013a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a8:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80013ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013ae:	1d1a      	adds	r2, r3, #4
 80013b0:	67ba      	str	r2, [r7, #120]	; 0x78
 80013b2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80013b6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80013ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013be:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 80013c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013c4:	1d1a      	adds	r2, r3, #4
 80013c6:	673a      	str	r2, [r7, #112]	; 0x70
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 80013cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013ce:	1d1a      	adds	r2, r3, #4
 80013d0:	673a      	str	r2, [r7, #112]	; 0x70
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 80013d6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80013da:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80013de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 80013e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80013ea:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80013ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 80013f6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80013fa:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80013fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001402:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 8001406:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800140a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800140e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001412:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 8001416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001418:	1d1a      	adds	r2, r3, #4
 800141a:	677a      	str	r2, [r7, #116]	; 0x74
 800141c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001420:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001428:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 800142c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800142e:	1d1a      	adds	r2, r3, #4
 8001430:	677a      	str	r2, [r7, #116]	; 0x74
 8001432:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001436:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	edc3 7a00 	vstr	s15, [r3]
        
        m0 = t4[2] * twI;
 8001442:	edd7 7a04 	vldr	s15, [r7, #16]
 8001446:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800144a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 8001452:	edd7 7a05 	vldr	s15, [r7, #20]
 8001456:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800145a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 8001462:	edd7 7a05 	vldr	s15, [r7, #20]
 8001466:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800146a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800146e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 8001472:	edd7 7a04 	vldr	s15, [r7, #16]
 8001476:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800147a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 8001482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001484:	1d1a      	adds	r2, r3, #4
 8001486:	67ba      	str	r2, [r7, #120]	; 0x78
 8001488:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800148c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001494:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8001498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800149a:	1d1a      	adds	r2, r3, #4
 800149c:	67ba      	str	r2, [r7, #120]	; 0x78
 800149e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80014a2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80014a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014aa:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- ) 
 80014ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014b0:	3b01      	subs	r3, #1
 80014b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80014b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f47f ae45 	bne.w	8001146 <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 80014bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014be:	b299      	uxth	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	2302      	movs	r3, #2
 80014c6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80014c8:	f000 fef2 	bl	80022b0 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 80014cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014ce:	b299      	uxth	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	2302      	movs	r3, #2
 80014d6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80014d8:	f000 feea 	bl	80022b0 <arm_radix8_butterfly_f32>
}
 80014dc:	bf00      	nop
 80014de:	3780      	adds	r7, #128	; 0x80
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b0ac      	sub	sp, #176	; 0xb0
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	085b      	lsrs	r3, r3, #1
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 80014fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	4413      	add	r3, r2
 8001504:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8001508:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001512:	4413      	add	r3, r2
 8001514:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8001518:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001522:	4413      	add	r3, r2
 8001524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800152c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001530:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8001532:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001536:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8001538:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800153c:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 800153e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001542:	3b04      	subs	r3, #4
 8001544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8001548:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800154c:	3b04      	subs	r3, #4
 800154e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8001552:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001556:	3b04      	subs	r3, #4
 8001558:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 800155c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001566:	4413      	add	r3, r2
 8001568:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001574:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001578:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800157c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8001584:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 800158e:	2302      	movs	r3, #2
 8001590:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8001592:	2304      	movs	r3, #4
 8001594:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8001596:	2306      	movs	r3, #6
 8001598:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	ed93 7a00 	vldr	s14, [r3]
 80015a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ac:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	ed93 7a00 	vldr	s14, [r3]
 80015b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015ba:	edd3 7a00 	vldr	s15, [r3]
 80015be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	3304      	adds	r3, #4
 80015ca:	ed93 7a00 	vldr	s14, [r3]
 80015ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015d2:	3304      	adds	r3, #4
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015dc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	3304      	adds	r3, #4
 80015e4:	ed93 7a00 	vldr	s14, [r3]
 80015e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015ec:	3304      	adds	r3, #4
 80015ee:	edd3 7a00 	vldr	s15, [r3]
 80015f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80015fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015fe:	3304      	adds	r3, #4
 8001600:	ed93 7a00 	vldr	s14, [r3]
 8001604:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001608:	ee37 7a27 	vadd.f32	s14, s14, s15
 800160c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001610:	3304      	adds	r3, #4
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800161e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001622:	edd3 7a00 	vldr	s15, [r3]
 8001626:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800162a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800162e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001632:	edd3 7a00 	vldr	s15, [r3]
 8001636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800163e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800164a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800164e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001652:	edd3 7a00 	vldr	s15, [r3]
 8001656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800165a:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800165e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001662:	3304      	adds	r3, #4
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800166c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001670:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001674:	3304      	adds	r3, #4
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167e:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001682:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001686:	3304      	adds	r3, #4
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001690:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001694:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001698:	3304      	adds	r3, #4
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80016a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016aa:	ed93 7a00 	vldr	s14, [r3]
 80016ae:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80016b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c2:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80016c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016ca:	ed93 7a00 	vldr	s14, [r3]
 80016ce:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80016d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	1d1a      	adds	r2, r3, #4
 80016e2:	603a      	str	r2, [r7, #0]
 80016e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e8:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80016ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016f0:	3304      	adds	r3, #4
 80016f2:	ed93 7a00 	vldr	s14, [r3]
 80016f6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80016fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001702:	3304      	adds	r3, #4
 8001704:	edd3 7a00 	vldr	s15, [r3]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	1d1a      	adds	r2, r3, #4
 800170c:	603a      	str	r2, [r7, #0]
 800170e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001712:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8001716:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800171a:	1d1a      	adds	r2, r3, #4
 800171c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001722:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8001724:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001728:	1d1a      	adds	r2, r3, #4
 800172a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800172e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001730:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8001732:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001736:	1d1a      	adds	r2, r3, #4
 8001738:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8001740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001744:	1d1a      	adds	r2, r3, #4
 8001746:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800174a:	6a3a      	ldr	r2, [r7, #32]
 800174c:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 800174e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001752:	1d1a      	adds	r2, r3, #4
 8001754:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 800175c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001760:	1d1a      	adds	r2, r3, #4
 8001762:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 800176a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001772:	4413      	add	r3, r2
 8001774:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8001778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001780:	4413      	add	r3, r2
 8001782:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8001786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800178e:	4413      	add	r3, r2
 8001790:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8001794:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001798:	3b02      	subs	r3, #2
 800179a:	085b      	lsrs	r3, r3, #1
 800179c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017a0:	e31a      	b.n	8001dd8 <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	ed93 7a00 	vldr	s14, [r3]
 80017a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	ed93 7a00 	vldr	s14, [r3]
 80017be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017c2:	edd3 7a00 	vldr	s15, [r3]
 80017c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ca:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	3304      	adds	r3, #4
 80017d2:	ed93 7a00 	vldr	s14, [r3]
 80017d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017da:	3304      	adds	r3, #4
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	3304      	adds	r3, #4
 80017ec:	ed93 7a00 	vldr	s14, [r3]
 80017f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017f4:	3304      	adds	r3, #4
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fe:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001802:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001806:	3304      	adds	r3, #4
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001810:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001814:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001818:	3304      	adds	r3, #4
 800181a:	edd3 7a00 	vldr	s15, [r3]
 800181e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001822:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001826:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001832:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001836:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001842:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001846:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800184a:	edd3 7a00 	vldr	s15, [r3]
 800184e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001852:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001856:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001862:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001866:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800186a:	3304      	adds	r3, #4
 800186c:	edd3 7a00 	vldr	s15, [r3]
 8001870:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001874:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001878:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800187c:	3304      	adds	r3, #4
 800187e:	edd3 7a00 	vldr	s15, [r3]
 8001882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001886:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 800188a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800188e:	3304      	adds	r3, #4
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001898:	ee37 7a67 	vsub.f32	s14, s14, s15
 800189c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018a0:	3304      	adds	r3, #4
 80018a2:	edd3 7a00 	vldr	s15, [r3]
 80018a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018aa:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 80018ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018b2:	ed93 7a00 	vldr	s14, [r3]
 80018b6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018c2:	edd3 7a00 	vldr	s15, [r3]
 80018c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ca:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 80018ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018d2:	ed93 7a00 	vldr	s14, [r3]
 80018d6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	1d1a      	adds	r2, r3, #4
 80018ea:	603a      	str	r2, [r7, #0]
 80018ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f0:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 80018f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018f8:	3304      	adds	r3, #4
 80018fa:	ed93 7a00 	vldr	s14, [r3]
 80018fe:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001902:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001906:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800190a:	3304      	adds	r3, #4
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	1d1a      	adds	r2, r3, #4
 8001914:	603a      	str	r2, [r7, #0]
 8001916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191a:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800191e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001922:	3b04      	subs	r3, #4
 8001924:	ed93 7a00 	vldr	s14, [r3]
 8001928:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800192c:	3b04      	subs	r3, #4
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001936:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800193a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800193e:	3b04      	subs	r3, #4
 8001940:	ed93 7a00 	vldr	s14, [r3]
 8001944:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001948:	3b04      	subs	r3, #4
 800194a:	edd3 7a00 	vldr	s15, [r3]
 800194e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001952:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8001956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800195a:	ed93 7a00 	vldr	s14, [r3]
 800195e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001962:	edd3 7a00 	vldr	s15, [r3]
 8001966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800196a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 800196e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001972:	ed93 7a00 	vldr	s14, [r3]
 8001976:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800197a:	edd3 7a00 	vldr	s15, [r3]
 800197e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001982:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8001986:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800198a:	ed93 7a00 	vldr	s14, [r3]
 800198e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001992:	edd3 7a00 	vldr	s15, [r3]
 8001996:	ee37 7a67 	vsub.f32	s14, s14, s15
 800199a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800199e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80019a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019aa:	ed93 7a00 	vldr	s14, [r3]
 80019ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019be:	3b04      	subs	r3, #4
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019cc:	3b04      	subs	r3, #4
 80019ce:	edd3 7a00 	vldr	s15, [r3]
 80019d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 80019da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019de:	3b04      	subs	r3, #4
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80019e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019f0:	3b04      	subs	r3, #4
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 80019fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001a0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a12:	edd3 7a00 	vldr	s15, [r3]
 8001a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a1a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8001a1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a22:	ed93 7a00 	vldr	s14, [r3]
 8001a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a32:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a3a:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8001a3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a42:	3b04      	subs	r3, #4
 8001a44:	ed93 7a00 	vldr	s14, [r3]
 8001a48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a4c:	3b04      	subs	r3, #4
 8001a4e:	edd3 7a00 	vldr	s15, [r3]
 8001a52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a56:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a5e:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8001a62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a66:	ed93 7a00 	vldr	s14, [r3]
 8001a6a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a7e:	1f1a      	subs	r2, r3, #4
 8001a80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a88:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8001a8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a90:	3b04      	subs	r3, #4
 8001a92:	ed93 7a00 	vldr	s14, [r3]
 8001a96:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001a9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001aac:	1f1a      	subs	r2, r3, #4
 8001aae:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab6:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8001aba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001abe:	1d1a      	adds	r2, r3, #4
 8001ac0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8001ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001acc:	1d1a      	adds	r2, r3, #4
 8001ace:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 8001ad6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ada:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8001ae6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001aea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8001af6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001afa:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b02:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8001b06:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b0a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b12:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 8001b16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b1a:	1d1a      	adds	r2, r3, #4
 8001b1c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001b20:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001b24:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2c:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8001b30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b34:	1d1a      	adds	r2, r3, #4
 8001b36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001b3a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001b3e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b46:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8001b4a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b4e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b56:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8001b5a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b5e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b66:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8001b6a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b6e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b76:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8001b7a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b7e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b86:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 8001b8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b8e:	1f1a      	subs	r2, r3, #4
 8001b90:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001b94:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001b98:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba0:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8001ba4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ba8:	1f1a      	subs	r2, r3, #4
 8001baa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001bae:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001bb2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bba:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8001bbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 8001bc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8001bce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8001bdc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001be0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8001bec:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bf0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8001bfc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c00:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c08:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8001c0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c10:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c18:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 8001c1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c20:	1d1a      	adds	r2, r3, #4
 8001c22:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001c26:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001c2a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c32:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 8001c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c3a:	1d1a      	adds	r2, r3, #4
 8001c3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001c40:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001c44:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c4c:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8001c50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c54:	eef1 7a67 	vneg.f32	s15, s15
 8001c58:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c60:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8001c64:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c68:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c70:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8001c74:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c78:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c80:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8001c84:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c88:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c90:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 8001c94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c98:	1f1a      	subs	r2, r3, #4
 8001c9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001c9e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001ca2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001caa:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8001cae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cb2:	1f1a      	subs	r2, r3, #4
 8001cb4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001cb8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001cbc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc4:	edc3 7a00 	vstr	s15, [r3]
        
        // COL 4
        twR = tw4[0];
 8001cc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8001cd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8001cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8001ce6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cea:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8001cf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cfa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d02:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8001d06:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d0a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d12:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8001d16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d1a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d22:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 8001d26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d2a:	1d1a      	adds	r2, r3, #4
 8001d2c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001d30:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001d34:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3c:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8001d40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d44:	1d1a      	adds	r2, r3, #4
 8001d46:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001d4a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001d4e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d56:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8001d5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d5e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d66:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8001d6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d6e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d76:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8001d7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d7e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d86:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8001d8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d8e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d96:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 8001d9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d9e:	1f1a      	subs	r2, r3, #4
 8001da0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8001da4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001da8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db0:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 8001db4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001db8:	1f1a      	subs	r2, r3, #4
 8001dba:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8001dbe:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001dc2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dca:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8001dce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f47f ace0 	bne.w	80017a2 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	ed93 7a00 	vldr	s14, [r3]
 8001de8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	ed93 7a00 	vldr	s14, [r3]
 8001dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e02:	edd3 7a00 	vldr	s15, [r3]
 8001e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e0a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	3304      	adds	r3, #4
 8001e12:	ed93 7a00 	vldr	s14, [r3]
 8001e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e24:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	ed93 7a00 	vldr	s14, [r3]
 8001e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e34:	3304      	adds	r3, #4
 8001e36:	edd3 7a00 	vldr	s15, [r3]
 8001e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e3e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001e42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e46:	3304      	adds	r3, #4
 8001e48:	ed93 7a00 	vldr	s14, [r3]
 8001e4c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e58:	3304      	adds	r3, #4
 8001e5a:	edd3 7a00 	vldr	s15, [r3]
 8001e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e62:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001e66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001e72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e7a:	edd3 7a00 	vldr	s15, [r3]
 8001e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e82:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001e86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e8a:	edd3 7a00 	vldr	s15, [r3]
 8001e8e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001e92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ea2:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001ea6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001eaa:	3304      	adds	r3, #4
 8001eac:	edd3 7a00 	vldr	s15, [r3]
 8001eb0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001eb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001eb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec6:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001eca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ece:	3304      	adds	r3, #4
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001ed8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001edc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	edd3 7a00 	vldr	s15, [r3]
 8001ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eea:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001eee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ef2:	ed93 7a00 	vldr	s14, [r3]
 8001ef6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001efa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001efe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f02:	edd3 7a00 	vldr	s15, [r3]
 8001f06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f0a:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001f0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f12:	ed93 7a00 	vldr	s14, [r3]
 8001f16:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001f1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	1d1a      	adds	r2, r3, #4
 8001f2a:	603a      	str	r2, [r7, #0]
 8001f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f30:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001f34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f38:	3304      	adds	r3, #4
 8001f3a:	ed93 7a00 	vldr	s14, [r3]
 8001f3e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001f42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	edd3 7a00 	vldr	s15, [r3]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	1d1a      	adds	r2, r3, #4
 8001f54:	603a      	str	r2, [r7, #0]
 8001f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5a:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8001f5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8001f66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8001f6e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f72:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f7a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8001f7e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f82:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8001f8e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f92:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8001f9e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fa2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001faa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8001fae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fb2:	1d1a      	adds	r2, r3, #4
 8001fb4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001fb8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001fbc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc4:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8001fc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fcc:	1d1a      	adds	r2, r3, #4
 8001fce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001fd2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001fd6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fde:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8001fe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8001fea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8001ff2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ff6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffe:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8002002:	edd7 7a08 	vldr	s15, [r7, #32]
 8002006:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800200a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8002012:	edd7 7a08 	vldr	s15, [r7, #32]
 8002016:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800201a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8002022:	edd7 7a07 	vldr	s15, [r7, #28]
 8002026:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800202a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8002032:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002036:	1d1a      	adds	r2, r3, #4
 8002038:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800203c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002040:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002048:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 800204c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002050:	1d1a      	adds	r2, r3, #4
 8002052:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002056:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800205a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800205e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002062:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 8002066:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 800206e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8002076:	edd7 7a03 	vldr	s15, [r7, #12]
 800207a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800207e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002082:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8002086:	edd7 7a04 	vldr	s15, [r7, #16]
 800208a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800208e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002092:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8002096:	edd7 7a04 	vldr	s15, [r7, #16]
 800209a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800209e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 80020a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80020aa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80020ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 80020b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020ba:	1d1a      	adds	r2, r3, #4
 80020bc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80020c0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80020c4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80020c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020cc:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 80020d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020d4:	1d1a      	adds	r2, r3, #4
 80020d6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80020da:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80020de:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80020e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e6:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 80020ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020ee:	b299      	uxth	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	2304      	movs	r3, #4
 80020f6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80020f8:	f000 f8da 	bl	80022b0 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 80020fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002100:	b299      	uxth	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	2304      	movs	r3, #4
 8002108:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800210a:	f000 f8d1 	bl	80022b0 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 800210e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002112:	b299      	uxth	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	2304      	movs	r3, #4
 800211a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800211c:	f000 f8c8 	bl	80022b0 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 8002120:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002124:	b299      	uxth	r1, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	2304      	movs	r3, #4
 800212c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800212e:	f000 f8bf 	bl	80022b0 <arm_radix8_butterfly_f32>
}
 8002132:	bf00      	nop
 8002134:	37b0      	adds	r7, #176	; 0xb0
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b088      	sub	sp, #32
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	4611      	mov	r1, r2
 8002146:	461a      	mov	r2, r3
 8002148:	460b      	mov	r3, r1
 800214a:	71fb      	strb	r3, [r7, #7]
 800214c:	4613      	mov	r3, r2
 800214e:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d117      	bne.n	800218c <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	3304      	adds	r3, #4
 8002160:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	e00d      	b.n	8002184 <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	edd3 7a00 	vldr	s15, [r3]
 800216e:	eef1 7a67 	vneg.f32	s15, s15
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	3308      	adds	r3, #8
 800217c:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3301      	adds	r3, #1
 8002182:	61fb      	str	r3, [r7, #28]
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	429a      	cmp	r2, r3
 800218a:	d3ed      	bcc.n	8002168 <arm_cfft_f32+0x2e>
        }
    }

    switch (L) 
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002192:	d040      	beq.n	8002216 <arm_cfft_f32+0xdc>
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800219a:	d845      	bhi.n	8002228 <arm_cfft_f32+0xee>
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021a2:	d033      	beq.n	800220c <arm_cfft_f32+0xd2>
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021aa:	d83d      	bhi.n	8002228 <arm_cfft_f32+0xee>
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b2:	d026      	beq.n	8002202 <arm_cfft_f32+0xc8>
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ba:	d835      	bhi.n	8002228 <arm_cfft_f32+0xee>
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c2:	d028      	beq.n	8002216 <arm_cfft_f32+0xdc>
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ca:	d82d      	bhi.n	8002228 <arm_cfft_f32+0xee>
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d2:	d01b      	beq.n	800220c <arm_cfft_f32+0xd2>
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021da:	d825      	bhi.n	8002228 <arm_cfft_f32+0xee>
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b80      	cmp	r3, #128	; 0x80
 80021e0:	d00f      	beq.n	8002202 <arm_cfft_f32+0xc8>
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b80      	cmp	r3, #128	; 0x80
 80021e6:	d81f      	bhi.n	8002228 <arm_cfft_f32+0xee>
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	2b40      	cmp	r3, #64	; 0x40
 80021ec:	d013      	beq.n	8002216 <arm_cfft_f32+0xdc>
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b40      	cmp	r3, #64	; 0x40
 80021f2:	d819      	bhi.n	8002228 <arm_cfft_f32+0xee>
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b10      	cmp	r3, #16
 80021f8:	d003      	beq.n	8002202 <arm_cfft_f32+0xc8>
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b20      	cmp	r3, #32
 80021fe:	d005      	beq.n	800220c <arm_cfft_f32+0xd2>
 8002200:	e012      	b.n	8002228 <arm_cfft_f32+0xee>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f7fe ff79 	bl	80010fc <arm_cfft_radix8by2_f32>
        break;
 800220a:	e00d      	b.n	8002228 <arm_cfft_f32+0xee>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f7ff f968 	bl	80014e4 <arm_cfft_radix8by4_f32>
        break;
 8002214:	e008      	b.n	8002228 <arm_cfft_f32+0xee>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	b299      	uxth	r1, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	2301      	movs	r3, #1
 8002220:	68b8      	ldr	r0, [r7, #8]
 8002222:	f000 f845 	bl	80022b0 <arm_radix8_butterfly_f32>
        break;
 8002226:	bf00      	nop
    }  

    if( bitReverseFlag )
 8002228:	79bb      	ldrb	r3, [r7, #6]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d007      	beq.n	800223e <arm_cfft_f32+0x104>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8999      	ldrh	r1, [r3, #12]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	461a      	mov	r2, r3
 8002238:	68b8      	ldr	r0, [r7, #8]
 800223a:	f7fd ffc9 	bl	80001d0 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d130      	bne.n	80022a6 <arm_cfft_f32+0x16c>
    {
        invL = 1.0f/(float32_t)L;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	ee07 3a90 	vmov	s15, r3
 800224a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800224e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002256:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	e01c      	b.n	800229e <arm_cfft_f32+0x164>
        {
            *pSrc++ *=   invL ;
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	1d1a      	adds	r2, r3, #4
 8002268:	61ba      	str	r2, [r7, #24]
 800226a:	ed93 7a00 	vldr	s14, [r3]
 800226e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002276:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	edd3 7a00 	vldr	s15, [r3]
 8002280:	eeb1 7a67 	vneg.f32	s14, s15
 8002284:	edd7 7a04 	vldr	s15, [r7, #16]
 8002288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	3304      	adds	r3, #4
 8002296:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	3301      	adds	r3, #1
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	69fa      	ldr	r2, [r7, #28]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d3de      	bcc.n	8002264 <arm_cfft_f32+0x12a>
        }
    }
}
 80022a6:	bf00      	nop
 80022a8:	3720      	adds	r7, #32
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b0bd      	sub	sp, #244	; 0xf4
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	461a      	mov	r2, r3
 80022bc:	460b      	mov	r3, r1
 80022be:	817b      	strh	r3, [r7, #10]
 80022c0:	4613      	mov	r3, r2
 80022c2:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <arm_radix8_butterfly_f32+0x3c>)
 80022c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 80022ca:	897b      	ldrh	r3, [r7, #10]
 80022cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 80022d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 80022d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022dc:	08db      	lsrs	r3, r3, #3
 80022de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80022e8:	e002      	b.n	80022f0 <arm_radix8_butterfly_f32+0x40>
 80022ea:	bf00      	nop
 80022ec:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 80022f0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80022f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022f8:	4413      	add	r3, r2
 80022fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 80022fe:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002306:	4413      	add	r3, r2
 8002308:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 800230c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002314:	4413      	add	r3, r2
 8002316:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800231a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800231e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002322:	4413      	add	r3, r2
 8002324:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8002328:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800232c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002330:	4413      	add	r3, r2
 8002332:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8002336:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800233a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800233e:	4413      	add	r3, r2
 8002340:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8002344:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800234c:	4413      	add	r3, r2
 800234e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002352:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	ed93 7a00 	vldr	s14, [r3]
 8002360:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4413      	add	r3, r2
 800236a:	edd3 7a00 	vldr	s15, [r3]
 800236e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002372:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002376:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	ed93 7a00 	vldr	s14, [r3]
 8002384:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4413      	add	r3, r2
 800238e:	edd3 7a00 	vldr	s15, [r3]
 8002392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002396:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800239a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	ed93 7a00 	vldr	s14, [r3]
 80023a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4413      	add	r3, r2
 80023b2:	edd3 7a00 	vldr	s15, [r3]
 80023b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ba:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80023be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	4413      	add	r3, r2
 80023c8:	ed93 7a00 	vldr	s14, [r3]
 80023cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4413      	add	r3, r2
 80023d6:	edd3 7a00 	vldr	s15, [r3]
 80023da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023de:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80023e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	ed93 7a00 	vldr	s14, [r3]
 80023f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	4413      	add	r3, r2
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002402:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002406:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	ed93 7a00 	vldr	s14, [r3]
 8002414:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4413      	add	r3, r2
 800241e:	edd3 7a00 	vldr	s15, [r3]
 8002422:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002426:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800242a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	4413      	add	r3, r2
 8002434:	ed93 7a00 	vldr	s14, [r3]
 8002438:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4413      	add	r3, r2
 8002442:	edd3 7a00 	vldr	s15, [r3]
 8002446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800244a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800244e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4413      	add	r3, r2
 8002458:	ed93 7a00 	vldr	s14, [r3]
 800245c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4413      	add	r3, r2
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800246e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8002472:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002476:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800247a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800247e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8002482:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002486:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800248a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8002492:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002496:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800249a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800249e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 80024a2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80024a6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80024aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ae:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 80024b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80024c0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80024c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 80024cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4413      	add	r3, r2
 80024d6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80024da:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80024de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024e2:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80024e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	3304      	adds	r3, #4
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4413      	add	r3, r2
 80024f2:	ed93 7a00 	vldr	s14, [r3]
 80024f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	3304      	adds	r3, #4
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4413      	add	r3, r2
 8002502:	edd3 7a00 	vldr	s15, [r3]
 8002506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800250e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	3304      	adds	r3, #4
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4413      	add	r3, r2
 800251a:	ed93 7a00 	vldr	s14, [r3]
 800251e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	3304      	adds	r3, #4
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4413      	add	r3, r2
 800252a:	edd3 7a00 	vldr	s15, [r3]
 800252e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002532:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002536:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	3304      	adds	r3, #4
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4413      	add	r3, r2
 8002542:	ed93 7a00 	vldr	s14, [r3]
 8002546:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	3304      	adds	r3, #4
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4413      	add	r3, r2
 8002552:	edd3 7a00 	vldr	s15, [r3]
 8002556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800255a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800255e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	3304      	adds	r3, #4
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4413      	add	r3, r2
 800256a:	ed93 7a00 	vldr	s14, [r3]
 800256e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	3304      	adds	r3, #4
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4413      	add	r3, r2
 800257a:	edd3 7a00 	vldr	s15, [r3]
 800257e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002582:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002586:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	3304      	adds	r3, #4
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4413      	add	r3, r2
 8002592:	ed93 7a00 	vldr	s14, [r3]
 8002596:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	3304      	adds	r3, #4
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4413      	add	r3, r2
 80025a2:	edd3 7a00 	vldr	s15, [r3]
 80025a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025aa:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80025ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	3304      	adds	r3, #4
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4413      	add	r3, r2
 80025ba:	ed93 7a00 	vldr	s14, [r3]
 80025be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	3304      	adds	r3, #4
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4413      	add	r3, r2
 80025ca:	edd3 7a00 	vldr	s15, [r3]
 80025ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80025d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	3304      	adds	r3, #4
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4413      	add	r3, r2
 80025e2:	ed93 7a00 	vldr	s14, [r3]
 80025e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	3304      	adds	r3, #4
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4413      	add	r3, r2
 80025f2:	edd3 7a00 	vldr	s15, [r3]
 80025f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fa:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80025fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	3304      	adds	r3, #4
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4413      	add	r3, r2
 800260a:	ed93 7a00 	vldr	s14, [r3]
 800260e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	3304      	adds	r3, #4
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4413      	add	r3, r2
 800261a:	edd3 7a00 	vldr	s15, [r3]
 800261e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002622:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8002626:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800262a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800262e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002632:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8002636:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800263a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800263e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002642:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8002646:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800264a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800264e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002652:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8002656:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800265a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800265e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002662:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8002666:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	3304      	adds	r3, #4
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4413      	add	r3, r2
 8002672:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002676:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800267a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8002682:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	3304      	adds	r3, #4
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4413      	add	r3, r2
 800268e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002692:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800269a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800269e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4413      	add	r3, r2
 80026a8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80026ac:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80026b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b4:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 80026b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4413      	add	r3, r2
 80026c2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80026c6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80026ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ce:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 80026d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	3304      	adds	r3, #4
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4413      	add	r3, r2
 80026de:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80026e2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80026e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ea:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 80026ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	3304      	adds	r3, #4
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4413      	add	r3, r2
 80026fa:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80026fe:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002706:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800270a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800270e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002716:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800271a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8002722:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002726:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800272a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800272e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002736:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800273a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800273e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002746:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800274a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8002752:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002756:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800275a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800275e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002766:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800276a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800276e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002776:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800277a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800277e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002786:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800278a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800278e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002796:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800279a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800279e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80027a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 80027aa:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80027ae:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80027b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 80027ba:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80027be:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80027c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 80027ca:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80027ce:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80027d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 80027da:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80027de:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80027e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 80027ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4413      	add	r3, r2
 80027f4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80027f8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80027fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002800:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8002804:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4413      	add	r3, r2
 800280e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002812:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800281a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800281e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4413      	add	r3, r2
 8002828:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800282c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002834:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8002838:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4413      	add	r3, r2
 8002842:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002846:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800284a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800284e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8002852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	3304      	adds	r3, #4
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4413      	add	r3, r2
 800285e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002862:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800286a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800286e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	3304      	adds	r3, #4
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4413      	add	r3, r2
 800287a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800287e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002886:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800288a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	3304      	adds	r3, #4
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4413      	add	r3, r2
 8002896:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800289a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800289e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 80028a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	3304      	adds	r3, #4
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4413      	add	r3, r2
 80028b2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80028b6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80028ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028be:	edc3 7a00 	vstr	s15, [r3]
         
         i1 += n1;
 80028c2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80028c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028ca:	4413      	add	r3, r2
 80028cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 80028d0:	897b      	ldrh	r3, [r7, #10]
 80028d2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80028d6:	429a      	cmp	r2, r3
 80028d8:	f4ff ad0a 	bcc.w	80022f0 <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 80028dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e0:	2b07      	cmp	r3, #7
 80028e2:	f240 84e3 	bls.w	80032ac <arm_radix8_butterfly_f32+0xffc>
         break;
      
      ia1 = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 80028ec:	2301      	movs	r3, #1
 80028ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 80028f2:	893b      	ldrh	r3, [r7, #8]
 80028f4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80028f8:	4413      	add	r3, r2
 80028fa:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 80028fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8002902:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002906:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002908:	4413      	add	r3, r2
 800290a:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 800290c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800290e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002910:	4413      	add	r3, r2
 8002912:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8002914:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002916:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002918:	4413      	add	r3, r2
 800291a:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 800291c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800291e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002920:	4413      	add	r3, r2
 8002922:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8002924:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002926:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002928:	4413      	add	r3, r2
 800292a:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 800292c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800292e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002930:	4413      	add	r3, r2
 8002932:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 8002934:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8002942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	4413      	add	r3, r2
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 800294e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800295a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8002966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4413      	add	r3, r2
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8002972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 800297e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800298a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	3304      	adds	r3, #4
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 800299a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	3304      	adds	r3, #4
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	4413      	add	r3, r2
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 80029a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	3304      	adds	r3, #4
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 80029b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	3304      	adds	r3, #4
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	4413      	add	r3, r2
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 80029c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	3304      	adds	r3, #4
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 80029d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	3304      	adds	r3, #4
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	4413      	add	r3, r2
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 80029e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	3304      	adds	r3, #4
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 80029ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 80029f6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80029fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029fe:	4413      	add	r3, r2
 8002a00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8002a04:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8002a12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8002a20:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a28:	4413      	add	r3, r2
 8002a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8002a2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a36:	4413      	add	r3, r2
 8002a38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8002a3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a44:	4413      	add	r3, r2
 8002a46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8002a4a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a52:	4413      	add	r3, r2
 8002a54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002a58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4413      	add	r3, r2
 8002a62:	ed93 7a00 	vldr	s14, [r3]
 8002a66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4413      	add	r3, r2
 8002a70:	edd3 7a00 	vldr	s15, [r3]
 8002a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a78:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002a7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4413      	add	r3, r2
 8002a86:	ed93 7a00 	vldr	s14, [r3]
 8002a8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4413      	add	r3, r2
 8002a94:	edd3 7a00 	vldr	s15, [r3]
 8002a98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a9c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002aa0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	ed93 7a00 	vldr	s14, [r3]
 8002aae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	edd3 7a00 	vldr	s15, [r3]
 8002abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002ac4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4413      	add	r3, r2
 8002ace:	ed93 7a00 	vldr	s14, [r3]
 8002ad2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4413      	add	r3, r2
 8002adc:	edd3 7a00 	vldr	s15, [r3]
 8002ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002ae8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4413      	add	r3, r2
 8002af2:	ed93 7a00 	vldr	s14, [r3]
 8002af6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4413      	add	r3, r2
 8002b00:	edd3 7a00 	vldr	s15, [r3]
 8002b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b08:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002b0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4413      	add	r3, r2
 8002b16:	ed93 7a00 	vldr	s14, [r3]
 8002b1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4413      	add	r3, r2
 8002b24:	edd3 7a00 	vldr	s15, [r3]
 8002b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b2c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002b30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4413      	add	r3, r2
 8002b3a:	ed93 7a00 	vldr	s14, [r3]
 8002b3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	edd3 7a00 	vldr	s15, [r3]
 8002b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b50:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002b54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	ed93 7a00 	vldr	s14, [r3]
 8002b62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	edd3 7a00 	vldr	s15, [r3]
 8002b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b74:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8002b78:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002b7c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002b80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b84:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8002b88:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002b8c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b94:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8002b98:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002b9c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8002ba8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002bac:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8002bb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002bc6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bce:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8002bd2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002bd6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bde:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002be2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	3304      	adds	r3, #4
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4413      	add	r3, r2
 8002bee:	ed93 7a00 	vldr	s14, [r3]
 8002bf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c06:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002c0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	3304      	adds	r3, #4
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4413      	add	r3, r2
 8002c16:	ed93 7a00 	vldr	s14, [r3]
 8002c1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	3304      	adds	r3, #4
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4413      	add	r3, r2
 8002c26:	edd3 7a00 	vldr	s15, [r3]
 8002c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c2e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002c32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	3304      	adds	r3, #4
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	ed93 7a00 	vldr	s14, [r3]
 8002c42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	3304      	adds	r3, #4
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	edd3 7a00 	vldr	s15, [r3]
 8002c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c56:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	3304      	adds	r3, #4
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4413      	add	r3, r2
 8002c66:	ed93 7a00 	vldr	s14, [r3]
 8002c6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	3304      	adds	r3, #4
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4413      	add	r3, r2
 8002c76:	edd3 7a00 	vldr	s15, [r3]
 8002c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c7e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002c82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	3304      	adds	r3, #4
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	ed93 7a00 	vldr	s14, [r3]
 8002c92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	3304      	adds	r3, #4
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	edd3 7a00 	vldr	s15, [r3]
 8002ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002caa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	ed93 7a00 	vldr	s14, [r3]
 8002cba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	edd3 7a00 	vldr	s15, [r3]
 8002cca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cce:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002cd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	3304      	adds	r3, #4
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4413      	add	r3, r2
 8002cde:	ed93 7a00 	vldr	s14, [r3]
 8002ce2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	3304      	adds	r3, #4
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4413      	add	r3, r2
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf6:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002cfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	3304      	adds	r3, #4
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4413      	add	r3, r2
 8002d06:	ed93 7a00 	vldr	s14, [r3]
 8002d0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	3304      	adds	r3, #4
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4413      	add	r3, r2
 8002d16:	edd3 7a00 	vldr	s15, [r3]
 8002d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d1e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8002d22:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002d26:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d2e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8002d32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002d36:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d3e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8002d42:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002d46:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d4e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8002d52:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002d56:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d5e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8002d62:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002d66:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d6e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8002d72:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002d76:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8002d82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	3304      	adds	r3, #4
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002d92:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9a:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8002d9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002da2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002da6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002daa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8002dae:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002db2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dba:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8002dbe:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002dc2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dca:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8002dce:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002dd2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dda:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8002dde:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002de2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dea:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8002dee:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002df2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dfa:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8002dfe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002e02:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8002e0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4413      	add	r3, r2
 8002e18:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e24:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8002e28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	3304      	adds	r3, #4
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e38:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e40:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8002e44:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002e48:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e50:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8002e54:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002e58:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e60:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8002e64:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002e68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e70:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8002e74:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002e78:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e80:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8002e84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e92:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8002e9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	ed97 7a05 	vldr	s14, [r7, #20]
 8002eae:	edd7 7a04 	vldr	s15, [r7, #16]
 8002eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8002eba:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002ebe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8002eca:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002ece:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8002eda:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002ede:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8002eea:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002eee:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8002efa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f08:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f10:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8002f14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4413      	add	r3, r2
 8002f20:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f24:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f2c:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8002f30:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002f34:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f3c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f44:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8002f48:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002f4c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f54:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f5c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8002f60:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002f64:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f6c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f74:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8002f78:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002f7c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f84:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8002f90:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002f94:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f9c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8002fa0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002fa4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fac:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8002fb0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002fb4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fbc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8002fc0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002fc4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fcc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8002fd0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002fd4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fdc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8002fe0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002fe4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fec:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8002ff0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002ff4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ffc:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8003000:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8003004:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800300c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8003010:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003014:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800301c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8003020:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003024:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800302c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8003030:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003034:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800303c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8003040:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003044:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800304c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8003050:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003054:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800305c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8003060:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003064:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800306c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8003070:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003074:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800307c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8003080:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003084:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800308c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8003090:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003094:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 80030a0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80030a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80030a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ac:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 80030b0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80030b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80030b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030bc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 80030c0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80030c4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80030c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030cc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 80030d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4413      	add	r3, r2
 80030da:	ed97 7a07 	vldr	s14, [r7, #28]
 80030de:	edd7 7a06 	vldr	s15, [r7, #24]
 80030e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 80030ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	3304      	adds	r3, #4
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4413      	add	r3, r2
 80030f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80030fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80030fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003102:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8003106:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800310a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800310e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003112:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8003116:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800311a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800311e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003122:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8003126:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800312a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800312e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003132:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8003136:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800313a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800313e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003142:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8003146:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4413      	add	r3, r2
 8003150:	ed97 7a07 	vldr	s14, [r7, #28]
 8003154:	edd7 7a06 	vldr	s15, [r7, #24]
 8003158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8003160:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	3304      	adds	r3, #4
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4413      	add	r3, r2
 800316c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003170:	edd7 7a04 	vldr	s15, [r7, #16]
 8003174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003178:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800317c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003180:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003188:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800318c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003190:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003198:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800319c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80031a0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80031a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 80031ac:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80031b0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80031b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 80031bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4413      	add	r3, r2
 80031c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80031ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80031ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 80031d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	3304      	adds	r3, #4
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4413      	add	r3, r2
 80031e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80031e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80031ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031ee:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 80031f2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80031f6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80031fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fe:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8003202:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003206:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800320a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8003212:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003216:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800321a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800321e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8003222:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003226:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800322a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800322e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8003232:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003240:	edd7 7a06 	vldr	s15, [r7, #24]
 8003244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003248:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800324c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	3304      	adds	r3, #4
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4413      	add	r3, r2
 8003258:	ed97 7a05 	vldr	s14, [r7, #20]
 800325c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003260:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003264:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 8003268:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800326c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003270:	4413      	add	r3, r2
 8003272:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 8003276:	897b      	ldrh	r3, [r7, #10]
 8003278:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800327c:	429a      	cmp	r2, r3
 800327e:	f4ff abba 	bcc.w	80029f6 <arm_radix8_butterfly_f32+0x746>
         
         j++;
 8003282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003286:	3301      	adds	r3, #1
 8003288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 800328c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003294:	429a      	cmp	r2, r3
 8003296:	f4ff ab2c 	bcc.w	80028f2 <arm_radix8_butterfly_f32+0x642>
      
      twidCoefModifier <<= 3;
 800329a:	893b      	ldrh	r3, [r7, #8]
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 80032a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a4:	2b07      	cmp	r3, #7
 80032a6:	f63f a813 	bhi.w	80022d0 <arm_radix8_butterfly_f32+0x20>
}
 80032aa:	e000      	b.n	80032ae <arm_radix8_butterfly_f32+0xffe>
         break;
 80032ac:	bf00      	nop
}
 80032ae:	bf00      	nop
 80032b0:	37f4      	adds	r7, #244	; 0xf4
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop

080032bc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80032c4:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80032c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032c8:	4907      	ldr	r1, [pc, #28]	; (80032e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80032d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4013      	ands	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80032da:	68fb      	ldr	r3, [r7, #12]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40023800 	.word	0x40023800

080032ec <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 80032f0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80032f4:	f7ff ffe2 	bl	80032bc <LL_AHB1_GRP1_EnableClock>
  /* USER CODE END CRC_Init 1 */
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80032f8:	bf00      	nop
 80032fa:	bd80      	pop	{r7, pc}

080032fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	607b      	str	r3, [r7, #4]
 8003306:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <MX_DMA_Init+0x3c>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	4a0b      	ldr	r2, [pc, #44]	; (8003338 <MX_DMA_Init+0x3c>)
 800330c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003310:	6313      	str	r3, [r2, #48]	; 0x30
 8003312:	4b09      	ldr	r3, [pc, #36]	; (8003338 <MX_DMA_Init+0x3c>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800331a:	607b      	str	r3, [r7, #4]
 800331c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800331e:	2200      	movs	r2, #0
 8003320:	2100      	movs	r1, #0
 8003322:	200e      	movs	r0, #14
 8003324:	f001 fa71 	bl	800480a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003328:	200e      	movs	r0, #14
 800332a:	f001 fa8a 	bl	8004842 <HAL_NVIC_EnableIRQ>

}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40023800 	.word	0x40023800

0800333c <LL_AHB1_GRP1_EnableClock>:
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003344:	4b08      	ldr	r3, [pc, #32]	; (8003368 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003348:	4907      	ldr	r1, [pc, #28]	; (8003368 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4313      	orrs	r3, r2
 800334e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4013      	ands	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800335a:	68fb      	ldr	r3, [r7, #12]
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	40023800 	.word	0x40023800

0800336c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8003376:	4a13      	ldr	r2, [pc, #76]	; (80033c4 <LL_SYSCFG_SetEXTISource+0x58>)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	3302      	adds	r3, #2
 800337e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	43db      	mvns	r3, r3
 8003388:	ea02 0103 	and.w	r1, r2, r3
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	0c1b      	lsrs	r3, r3, #16
 8003390:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	fa03 f202 	lsl.w	r2, r3, r2
 80033aa:	4806      	ldr	r0, [pc, #24]	; (80033c4 <LL_SYSCFG_SetEXTISource+0x58>)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	430a      	orrs	r2, r1
 80033b2:	3302      	adds	r3, #2
 80033b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	40013800 	.word	0x40013800

080033c8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b089      	sub	sp, #36	; 0x24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	fa93 f3a3 	rbit	r3, r3
 80033e2:	613b      	str	r3, [r7, #16]
  return result;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	fab3 f383 	clz	r3, r3
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	2103      	movs	r1, #3
 80033f0:	fa01 f303 	lsl.w	r3, r1, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	401a      	ands	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	fa93 f3a3 	rbit	r3, r3
 8003402:	61bb      	str	r3, [r7, #24]
  return result;
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	fa01 f303 	lsl.w	r3, r1, r3
 8003414:	431a      	orrs	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	601a      	str	r2, [r3, #0]
}
 800341a:	bf00      	nop
 800341c:	3724      	adds	r7, #36	; 0x24
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003426:	b480      	push	{r7}
 8003428:	b089      	sub	sp, #36	; 0x24
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	fa93 f3a3 	rbit	r3, r3
 8003440:	613b      	str	r3, [r7, #16]
  return result;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	fab3 f383 	clz	r3, r3
 8003448:	b2db      	uxtb	r3, r3
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	2103      	movs	r1, #3
 800344e:	fa01 f303 	lsl.w	r3, r1, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	401a      	ands	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	61bb      	str	r3, [r7, #24]
  return result;
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	fa01 f303 	lsl.w	r3, r1, r3
 8003472:	431a      	orrs	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	60da      	str	r2, [r3, #12]
}
 8003478:	bf00      	nop
 800347a:	3724      	adds	r7, #36	; 0x24
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	619a      	str	r2, [r3, #24]
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	041a      	lsls	r2, r3, #16
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	619a      	str	r2, [r3, #24]
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80034c6:	f107 0318 	add.w	r3, r7, #24
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d0:	463b      	mov	r3, r7
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	609a      	str	r2, [r3, #8]
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	611a      	str	r2, [r3, #16]
 80034de:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80034e0:	2010      	movs	r0, #16
 80034e2:	f7ff ff2b 	bl	800333c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80034e6:	2004      	movs	r0, #4
 80034e8:	f7ff ff28 	bl	800333c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80034ec:	2080      	movs	r0, #128	; 0x80
 80034ee:	f7ff ff25 	bl	800333c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80034f2:	2001      	movs	r0, #1
 80034f4:	f7ff ff22 	bl	800333c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80034f8:	2002      	movs	r0, #2
 80034fa:	f7ff ff1f 	bl	800333c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80034fe:	2008      	movs	r0, #8
 8003500:	f7ff ff1c 	bl	800333c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(SPI_CS_GPIO_Port, SPI_CS_Pin);
 8003504:	2108      	movs	r1, #8
 8003506:	4829      	ldr	r0, [pc, #164]	; (80035ac <MX_GPIO_Init+0xec>)
 8003508:	f7ff ffbc 	bl	8003484 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin);
 800350c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8003510:	4827      	ldr	r0, [pc, #156]	; (80035b0 <MX_GPIO_Init+0xf0>)
 8003512:	f7ff ffc5 	bl	80034a0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8003516:	2308      	movs	r3, #8
 8003518:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800351a:	2301      	movs	r3, #1
 800351c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 800351e:	2301      	movs	r3, #1
 8003520:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003526:	2300      	movs	r3, #0
 8003528:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800352a:	463b      	mov	r3, r7
 800352c:	4619      	mov	r1, r3
 800352e:	481f      	ldr	r0, [pc, #124]	; (80035ac <MX_GPIO_Init+0xec>)
 8003530:	f002 fed0 	bl	80062d4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 8003534:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003538:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800353a:	2301      	movs	r3, #1
 800353c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800353e:	2300      	movs	r3, #0
 8003540:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800354a:	463b      	mov	r3, r7
 800354c:	4619      	mov	r1, r3
 800354e:	4818      	ldr	r0, [pc, #96]	; (80035b0 <MX_GPIO_Init+0xf0>)
 8003550:	f002 fec0 	bl	80062d4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = INT_1_Pin|INT_2_Pin;
 8003554:	2303      	movs	r3, #3
 8003556:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003558:	2300      	movs	r3, #0
 800355a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003560:	463b      	mov	r3, r7
 8003562:	4619      	mov	r1, r3
 8003564:	4811      	ldr	r0, [pc, #68]	; (80035ac <MX_GPIO_Init+0xec>)
 8003566:	f002 feb5 	bl	80062d4 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 800356a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800356e:	2000      	movs	r0, #0
 8003570:	f7ff fefc 	bl	800336c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8003574:	2301      	movs	r3, #1
 8003576:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003578:	2301      	movs	r3, #1
 800357a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800357c:	2300      	movs	r3, #0
 800357e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003580:	2301      	movs	r3, #1
 8003582:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003584:	f107 0318 	add.w	r3, r7, #24
 8003588:	4618      	mov	r0, r3
 800358a:	f002 fd1d 	bl	8005fc8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin, LL_GPIO_PULL_DOWN);
 800358e:	2202      	movs	r2, #2
 8003590:	2101      	movs	r1, #1
 8003592:	4808      	ldr	r0, [pc, #32]	; (80035b4 <MX_GPIO_Init+0xf4>)
 8003594:	f7ff ff47 	bl	8003426 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin, LL_GPIO_MODE_INPUT);
 8003598:	2200      	movs	r2, #0
 800359a:	2101      	movs	r1, #1
 800359c:	4805      	ldr	r0, [pc, #20]	; (80035b4 <MX_GPIO_Init+0xf4>)
 800359e:	f7ff ff13 	bl	80033c8 <LL_GPIO_SetPinMode>

}
 80035a2:	bf00      	nop
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40020c00 	.word	0x40020c00
 80035b4:	40020000 	.word	0x40020000

080035b8 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80035bc:	4b13      	ldr	r3, [pc, #76]	; (800360c <MX_I2S2_Init+0x54>)
 80035be:	4a14      	ldr	r2, [pc, #80]	; (8003610 <MX_I2S2_Init+0x58>)
 80035c0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80035c2:	4b12      	ldr	r3, [pc, #72]	; (800360c <MX_I2S2_Init+0x54>)
 80035c4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80035c8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 80035ca:	4b10      	ldr	r3, [pc, #64]	; (800360c <MX_I2S2_Init+0x54>)
 80035cc:	2210      	movs	r2, #16
 80035ce:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80035d0:	4b0e      	ldr	r3, [pc, #56]	; (800360c <MX_I2S2_Init+0x54>)
 80035d2:	2203      	movs	r2, #3
 80035d4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80035d6:	4b0d      	ldr	r3, [pc, #52]	; (800360c <MX_I2S2_Init+0x54>)
 80035d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035dc:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80035de:	4b0b      	ldr	r3, [pc, #44]	; (800360c <MX_I2S2_Init+0x54>)
 80035e0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80035e4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80035e6:	4b09      	ldr	r3, [pc, #36]	; (800360c <MX_I2S2_Init+0x54>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80035ec:	4b07      	ldr	r3, [pc, #28]	; (800360c <MX_I2S2_Init+0x54>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <MX_I2S2_Init+0x54>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80035f8:	4804      	ldr	r0, [pc, #16]	; (800360c <MX_I2S2_Init+0x54>)
 80035fa:	f001 fe49 	bl	8005290 <HAL_I2S_Init>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8003604:	f000 fbf6 	bl	8003df4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8003608:	bf00      	nop
 800360a:	bd80      	pop	{r7, pc}
 800360c:	2000067c 	.word	0x2000067c
 8003610:	40003800 	.word	0x40003800

08003614 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361c:	f107 0314 	add.w	r3, r7, #20
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a40      	ldr	r2, [pc, #256]	; (8003734 <HAL_I2S_MspInit+0x120>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d17a      	bne.n	800372c <HAL_I2S_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	4b3f      	ldr	r3, [pc, #252]	; (8003738 <HAL_I2S_MspInit+0x124>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	4a3e      	ldr	r2, [pc, #248]	; (8003738 <HAL_I2S_MspInit+0x124>)
 8003640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003644:	6413      	str	r3, [r2, #64]	; 0x40
 8003646:	4b3c      	ldr	r3, [pc, #240]	; (8003738 <HAL_I2S_MspInit+0x124>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	4b38      	ldr	r3, [pc, #224]	; (8003738 <HAL_I2S_MspInit+0x124>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	4a37      	ldr	r2, [pc, #220]	; (8003738 <HAL_I2S_MspInit+0x124>)
 800365c:	f043 0304 	orr.w	r3, r3, #4
 8003660:	6313      	str	r3, [r2, #48]	; 0x30
 8003662:	4b35      	ldr	r3, [pc, #212]	; (8003738 <HAL_I2S_MspInit+0x124>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	4b31      	ldr	r3, [pc, #196]	; (8003738 <HAL_I2S_MspInit+0x124>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	4a30      	ldr	r2, [pc, #192]	; (8003738 <HAL_I2S_MspInit+0x124>)
 8003678:	f043 0302 	orr.w	r3, r3, #2
 800367c:	6313      	str	r3, [r2, #48]	; 0x30
 800367e:	4b2e      	ldr	r3, [pc, #184]	; (8003738 <HAL_I2S_MspInit+0x124>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800368a:	2348      	movs	r3, #72	; 0x48
 800368c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	2302      	movs	r3, #2
 8003690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003696:	2300      	movs	r3, #0
 8003698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800369a:	2305      	movs	r3, #5
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800369e:	f107 0314 	add.w	r3, r7, #20
 80036a2:	4619      	mov	r1, r3
 80036a4:	4825      	ldr	r0, [pc, #148]	; (800373c <HAL_I2S_MspInit+0x128>)
 80036a6:	f001 fc57 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80036aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80036ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b0:	2302      	movs	r3, #2
 80036b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b8:	2300      	movs	r3, #0
 80036ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036bc:	2305      	movs	r3, #5
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c0:	f107 0314 	add.w	r3, r7, #20
 80036c4:	4619      	mov	r1, r3
 80036c6:	481e      	ldr	r0, [pc, #120]	; (8003740 <HAL_I2S_MspInit+0x12c>)
 80036c8:	f001 fc46 	bl	8004f58 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80036cc:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <HAL_I2S_MspInit+0x130>)
 80036ce:	4a1e      	ldr	r2, [pc, #120]	; (8003748 <HAL_I2S_MspInit+0x134>)
 80036d0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80036d2:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <HAL_I2S_MspInit+0x130>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036d8:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <HAL_I2S_MspInit+0x130>)
 80036da:	2200      	movs	r2, #0
 80036dc:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036de:	4b19      	ldr	r3, [pc, #100]	; (8003744 <HAL_I2S_MspInit+0x130>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036e4:	4b17      	ldr	r3, [pc, #92]	; (8003744 <HAL_I2S_MspInit+0x130>)
 80036e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036ea:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036ec:	4b15      	ldr	r3, [pc, #84]	; (8003744 <HAL_I2S_MspInit+0x130>)
 80036ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036f2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036f4:	4b13      	ldr	r3, [pc, #76]	; (8003744 <HAL_I2S_MspInit+0x130>)
 80036f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036fa:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80036fc:	4b11      	ldr	r3, [pc, #68]	; (8003744 <HAL_I2S_MspInit+0x130>)
 80036fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003702:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003704:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <HAL_I2S_MspInit+0x130>)
 8003706:	2200      	movs	r2, #0
 8003708:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800370a:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <HAL_I2S_MspInit+0x130>)
 800370c:	2200      	movs	r2, #0
 800370e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003710:	480c      	ldr	r0, [pc, #48]	; (8003744 <HAL_I2S_MspInit+0x130>)
 8003712:	f001 f8b1 	bl	8004878 <HAL_DMA_Init>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 800371c:	f000 fb6a 	bl	8003df4 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a08      	ldr	r2, [pc, #32]	; (8003744 <HAL_I2S_MspInit+0x130>)
 8003724:	63da      	str	r2, [r3, #60]	; 0x3c
 8003726:	4a07      	ldr	r2, [pc, #28]	; (8003744 <HAL_I2S_MspInit+0x130>)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800372c:	bf00      	nop
 800372e:	3728      	adds	r7, #40	; 0x28
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40003800 	.word	0x40003800
 8003738:	40023800 	.word	0x40023800
 800373c:	40020800 	.word	0x40020800
 8003740:	40020400 	.word	0x40020400
 8003744:	2000061c 	.word	0x2000061c
 8003748:	40026058 	.word	0x40026058

0800374c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <LL_RCC_HSE_Enable+0x1c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a04      	ldr	r2, [pc, #16]	; (8003768 <LL_RCC_HSE_Enable+0x1c>)
 8003756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375a:	6013      	str	r3, [r2, #0]
}
 800375c:	bf00      	nop
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40023800 	.word	0x40023800

0800376c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8003770:	4b07      	ldr	r3, [pc, #28]	; (8003790 <LL_RCC_HSE_IsReady+0x24>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800377c:	bf0c      	ite	eq
 800377e:	2301      	moveq	r3, #1
 8003780:	2300      	movne	r3, #0
 8003782:	b2db      	uxtb	r3, r3
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800

08003794 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <LL_RCC_SetSysClkSource+0x24>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f023 0203 	bic.w	r2, r3, #3
 80037a4:	4904      	ldr	r1, [pc, #16]	; (80037b8 <LL_RCC_SetSysClkSource+0x24>)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	608b      	str	r3, [r1, #8]
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	40023800 	.word	0x40023800

080037bc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80037c0:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <LL_RCC_GetSysClkSource+0x18>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 030c 	and.w	r3, r3, #12
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800

080037d8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80037e0:	4b06      	ldr	r3, [pc, #24]	; (80037fc <LL_RCC_SetAHBPrescaler+0x24>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e8:	4904      	ldr	r1, [pc, #16]	; (80037fc <LL_RCC_SetAHBPrescaler+0x24>)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	608b      	str	r3, [r1, #8]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	40023800 	.word	0x40023800

08003800 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <LL_RCC_SetAPB1Prescaler+0x24>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003810:	4904      	ldr	r1, [pc, #16]	; (8003824 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4313      	orrs	r3, r2
 8003816:	608b      	str	r3, [r1, #8]
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	40023800 	.word	0x40023800

08003828 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <LL_RCC_SetAPB2Prescaler+0x24>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003838:	4904      	ldr	r1, [pc, #16]	; (800384c <LL_RCC_SetAPB2Prescaler+0x24>)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4313      	orrs	r3, r2
 800383e:	608b      	str	r3, [r1, #8]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	40023800 	.word	0x40023800

08003850 <LL_RCC_SetI2SClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2SClockSource(uint32_t Source)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR_I2SSRC)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_I2SSRC, Source);
 8003858:	4b06      	ldr	r3, [pc, #24]	; (8003874 <LL_RCC_SetI2SClockSource+0x24>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003860:	4904      	ldr	r1, [pc, #16]	; (8003874 <LL_RCC_SetI2SClockSource+0x24>)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4313      	orrs	r3, r2
 8003866:	608b      	str	r3, [r1, #8]
#else
  MODIFY_REG(RCC->DCKCFGR, (Source & 0xFFFF0000U), (Source << 16U));
#endif /* RCC_CFGR_I2SSRC */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40023800 	.word	0x40023800

08003878 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <LL_RCC_PLL_Enable+0x1c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a04      	ldr	r2, [pc, #16]	; (8003894 <LL_RCC_PLL_Enable+0x1c>)
 8003882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003886:	6013      	str	r3, [r2, #0]
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800

08003898 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800389c:	4b07      	ldr	r3, [pc, #28]	; (80038bc <LL_RCC_PLL_IsReady+0x24>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038a8:	bf0c      	ite	eq
 80038aa:	2301      	moveq	r3, #1
 80038ac:	2300      	movne	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800

080038c0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80038ce:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	68f9      	ldr	r1, [r7, #12]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	4311      	orrs	r1, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	0192      	lsls	r2, r2, #6
 80038e0:	430a      	orrs	r2, r1
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80038e8:	4b06      	ldr	r3, [pc, #24]	; (8003904 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038f0:	4904      	ldr	r1, [pc, #16]	; (8003904 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80038f8:	bf00      	nop
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	40023800 	.word	0x40023800
 8003908:	ffbf8000 	.word	0xffbf8000

0800390c <LL_RCC_PLLI2S_Enable>:
  * @brief  Enable PLLI2S
  * @rmtoll CR           PLLI2SON     LL_RCC_PLLI2S_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLI2S_Enable(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <LL_RCC_PLLI2S_Enable+0x1c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a04      	ldr	r2, [pc, #16]	; (8003928 <LL_RCC_PLLI2S_Enable+0x1c>)
 8003916:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800391a:	6013      	str	r3, [r2, #0]
}
 800391c:	bf00      	nop
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40023800 	.word	0x40023800

0800392c <LL_RCC_PLLI2S_IsReady>:
  * @brief  Check if PLLI2S Ready
  * @rmtoll CR           PLLI2SRDY    LL_RCC_PLLI2S_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLI2S_IsReady(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8003930:	4b07      	ldr	r3, [pc, #28]	; (8003950 <LL_RCC_PLLI2S_IsReady+0x24>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800393c:	bf0c      	ite	eq
 800393e:	2301      	moveq	r3, #1
 8003940:	2300      	movne	r3, #0
 8003942:	b2db      	uxtb	r3, r3
}
 8003944:	4618      	mov	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800

08003954 <LL_RCC_PLLI2S_ConfigDomain_I2S>:
  *         @arg @ref LL_RCC_PLLI2SR_DIV_6
  *         @arg @ref LL_RCC_PLLI2SR_DIV_7
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLI2S_ConfigDomain_I2S(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&RCC->PLLCFGR) + (Source & 0x80U)));
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8003968:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <LL_RCC_PLLI2S_ConfigDomain_I2S+0x64>)
 800396a:	4413      	add	r3, r2
 800396c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*pReg, RCC_PLLCFGR_PLLSRC, (Source & (~0x80U)));
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800397c:	431a      	orrs	r2, r3
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	601a      	str	r2, [r3, #0]
#if defined(RCC_PLLI2SCFGR_PLLI2SM)
  MODIFY_REG(RCC->PLLI2SCFGR, RCC_PLLI2SCFGR_PLLI2SM, PLLM);
#else
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLM, PLLM);
 8003982:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <LL_RCC_PLLI2S_ConfigDomain_I2S+0x68>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800398a:	490c      	ldr	r1, [pc, #48]	; (80039bc <LL_RCC_PLLI2S_ConfigDomain_I2S+0x68>)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4313      	orrs	r3, r2
 8003990:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLI2SCFGR_PLLI2SM */
  MODIFY_REG(RCC->PLLI2SCFGR, RCC_PLLI2SCFGR_PLLI2SN | RCC_PLLI2SCFGR_PLLI2SR, PLLN << RCC_PLLI2SCFGR_PLLI2SN_Pos | PLLR);
 8003992:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <LL_RCC_PLLI2S_ConfigDomain_I2S+0x68>)
 8003994:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <LL_RCC_PLLI2S_ConfigDomain_I2S+0x6c>)
 800399a:	4013      	ands	r3, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	0191      	lsls	r1, r2, #6
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	4905      	ldr	r1, [pc, #20]	; (80039bc <LL_RCC_PLLI2S_ConfigDomain_I2S+0x68>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 80039ac:	bf00      	nop
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	40023804 	.word	0x40023804
 80039bc:	40023800 	.word	0x40023800
 80039c0:	8fff803f 	.word	0x8fff803f

080039c4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <LL_FLASH_SetLatency+0x24>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f023 0207 	bic.w	r2, r3, #7
 80039d4:	4904      	ldr	r1, [pc, #16]	; (80039e8 <LL_FLASH_SetLatency+0x24>)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4313      	orrs	r3, r2
 80039da:	600b      	str	r3, [r1, #0]
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	40023c00 	.word	0x40023c00

080039ec <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80039f0:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <LL_FLASH_GetLatency+0x18>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0307 	and.w	r3, r3, #7
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40023c00 	.word	0x40023c00

08003a08 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a18:	4904      	ldr	r1, [pc, #16]	; (8003a2c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	600b      	str	r3, [r1, #0]
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	40007000 	.word	0x40007000

08003a30 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	60da      	str	r2, [r3, #12]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a60:	2b40      	cmp	r3, #64	; 0x40
 8003a62:	bf0c      	ite	eq
 8003a64:	2301      	moveq	r3, #1
 8003a66:	2300      	movne	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f043 0220 	orr.w	r2, r3, #32
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	60da      	str	r2, [r3, #12]
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	605a      	str	r2, [r3, #4]
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <append_data>:
uint8_t fifo_w_ptr = 0;
uint8_t fifo_r_ptr = 0;
uint8_t fifo_read_enabled = 0;

void append_data(uint16_t data)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	80fb      	strh	r3, [r7, #6]
	data_col[counter_samples++] = data;
 8003abe:	4b08      	ldr	r3, [pc, #32]	; (8003ae0 <append_data+0x2c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	4906      	ldr	r1, [pc, #24]	; (8003ae0 <append_data+0x2c>)
 8003ac6:	600a      	str	r2, [r1, #0]
 8003ac8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003acc:	4a05      	ldr	r2, [pc, #20]	; (8003ae4 <append_data+0x30>)
 8003ace:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20000604 	.word	0x20000604
 8003ae4:	200050e4 	.word	0x200050e4

08003ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003aee:	f000 fd3f 	bl	8004570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003af2:	f000 f8e9 	bl	8003cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003af6:	f7ff fce3 	bl	80034c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003afa:	f7ff fbff 	bl	80032fc <MX_DMA_Init>
  MX_TIM3_Init();
 8003afe:	f000 fb83 	bl	8004208 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8003b02:	f000 fcab 	bl	800445c <MX_USART2_UART_Init>
  MX_I2S2_Init();
 8003b06:	f7ff fd57 	bl	80035b8 <MX_I2S2_Init>
  MX_CRC_Init();
 8003b0a:	f7ff fbef 	bl	80032ec <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8003b0e:	f003 fadb 	bl	80070c8 <MX_PDM2PCM_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b12:	4b5b      	ldr	r3, [pc, #364]	; (8003c80 <main+0x198>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	4b5b      	ldr	r3, [pc, #364]	; (8003c84 <main+0x19c>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b20:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fe98 	bl	800485e <HAL_SYSTICK_Config>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <main+0x50>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e09e      	b.n	8003c76 <main+0x18e>
  }

  LL_USART_EnableIT_RXNE(USART2);
 8003b38:	4853      	ldr	r0, [pc, #332]	; (8003c88 <main+0x1a0>)
 8003b3a:	f7ff ff9c 	bl	8003a76 <LL_USART_EnableIT_RXNE>
  LL_USART_Enable(USART2);
 8003b3e:	4852      	ldr	r0, [pc, #328]	; (8003c88 <main+0x1a0>)
 8003b40:	f7ff ff76 	bl	8003a30 <LL_USART_Enable>
  HAL_I2S_Receive_DMA(&hi2s2, &pdmRxBuf[0],64);
 8003b44:	2240      	movs	r2, #64	; 0x40
 8003b46:	4951      	ldr	r1, [pc, #324]	; (8003c8c <main+0x1a4>)
 8003b48:	4851      	ldr	r0, [pc, #324]	; (8003c90 <main+0x1a8>)
 8003b4a:	f001 fce1 	bl	8005510 <HAL_I2S_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (rxstate)
 8003b4e:	4b51      	ldr	r3, [pc, #324]	; (8003c94 <main+0x1ac>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d01e      	beq.n	8003b94 <main+0xac>
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	dc36      	bgt.n	8003bc8 <main+0xe0>
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d033      	beq.n	8003bc6 <main+0xde>
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d132      	bne.n	8003bc8 <main+0xe0>
	  {
		case STATE_HALF:
			PDM_Filter(&pdmRxBuf[0],&MidBuffer[0], &PDM1_filter_handler);
 8003b62:	4a4d      	ldr	r2, [pc, #308]	; (8003c98 <main+0x1b0>)
 8003b64:	494d      	ldr	r1, [pc, #308]	; (8003c9c <main+0x1b4>)
 8003b66:	4849      	ldr	r0, [pc, #292]	; (8003c8c <main+0x1a4>)
 8003b68:	f005 f9a4 	bl	8008eb4 <PDM_Filter>
			for (int i=0; i<16;i++) append_data(MidBuffer[i]);
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	e009      	b.n	8003b86 <main+0x9e>
 8003b72:	4a4a      	ldr	r2, [pc, #296]	; (8003c9c <main+0x1b4>)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff ff9a 	bl	8003ab4 <append_data>
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	3301      	adds	r3, #1
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b0f      	cmp	r3, #15
 8003b8a:	ddf2      	ble.n	8003b72 <main+0x8a>
			rxstate = STATE_IDLE;
 8003b8c:	4b41      	ldr	r3, [pc, #260]	; (8003c94 <main+0x1ac>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]
			break;
 8003b92:	e019      	b.n	8003bc8 <main+0xe0>
		case STATE_FULL:
			  PDM_Filter(&pdmRxBuf[64],&MidBuffer[0], &PDM1_filter_handler);
 8003b94:	4a40      	ldr	r2, [pc, #256]	; (8003c98 <main+0x1b0>)
 8003b96:	4941      	ldr	r1, [pc, #260]	; (8003c9c <main+0x1b4>)
 8003b98:	4841      	ldr	r0, [pc, #260]	; (8003ca0 <main+0x1b8>)
 8003b9a:	f005 f98b 	bl	8008eb4 <PDM_Filter>
			  for (int i=0; i<16;i++) append_data(MidBuffer[i]);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	e009      	b.n	8003bb8 <main+0xd0>
 8003ba4:	4a3d      	ldr	r2, [pc, #244]	; (8003c9c <main+0x1b4>)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff81 	bl	8003ab4 <append_data>
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	2b0f      	cmp	r3, #15
 8003bbc:	ddf2      	ble.n	8003ba4 <main+0xbc>
			  rxstate = STATE_IDLE;
 8003bbe:	4b35      	ldr	r3, [pc, #212]	; (8003c94 <main+0x1ac>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
			break;
 8003bc4:	e000      	b.n	8003bc8 <main+0xe0>
		case STATE_IDLE:
			//do some task...
			break;
 8003bc6:	bf00      	nop
	  }

	  if(counter_samples>=FFT_SIZE)
 8003bc8:	4b36      	ldr	r3, [pc, #216]	; (8003ca4 <main+0x1bc>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd0:	dbbd      	blt.n	8003b4e <main+0x66>
	  {

			/* Copy data to preserve buffer content */
			for(int inx_data = 0; inx_data<FFT_SIZE; inx_data++)
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	e010      	b.n	8003bfa <main+0x112>
				fft_in_buf[inx_data] = (float)data_col[inx_data];
 8003bd8:	4a33      	ldr	r2, [pc, #204]	; (8003ca8 <main+0x1c0>)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003be0:	ee07 3a90 	vmov	s15, r3
 8003be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003be8:	4a30      	ldr	r2, [pc, #192]	; (8003cac <main+0x1c4>)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	edc3 7a00 	vstr	s15, [r3]
			for(int inx_data = 0; inx_data<FFT_SIZE; inx_data++)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c00:	dbea      	blt.n	8003bd8 <main+0xf0>

			/* Reset index of the buffer accumulating PCM samples */
			counter_samples = 0;
 8003c02:	4b28      	ldr	r3, [pc, #160]	; (8003ca4 <main+0x1bc>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]

			arm_cfft_f32(&arm_cfft_sR_f32_len1024, fft_in_buf, ifftFlag, doBitReverse);
 8003c08:	4b29      	ldr	r3, [pc, #164]	; (8003cb0 <main+0x1c8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	4b29      	ldr	r3, [pc, #164]	; (8003cb4 <main+0x1cc>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	4925      	ldr	r1, [pc, #148]	; (8003cac <main+0x1c4>)
 8003c16:	4828      	ldr	r0, [pc, #160]	; (8003cb8 <main+0x1d0>)
 8003c18:	f7fe fa8f 	bl	800213a <arm_cfft_f32>
			arm_cmplx_mag_f32(fft_in_buf, fft_mag_out_buf, FFT_SIZE);
 8003c1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c20:	4926      	ldr	r1, [pc, #152]	; (8003cbc <main+0x1d4>)
 8003c22:	4822      	ldr	r0, [pc, #136]	; (8003cac <main+0x1c4>)
 8003c24:	f7fd f9be 	bl	8000fa4 <arm_cmplx_mag_f32>

			/* Just keep the usefull part of the spectrum (FFT points/2) */
			for(int inx_data = 0; inx_data<FFT_SIZE/2; inx_data++)
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60bb      	str	r3, [r7, #8]
 8003c2c:	e00c      	b.n	8003c48 <main+0x160>
				signal_spectrum[inx_data] = fft_mag_out_buf[inx_data];
 8003c2e:	4a23      	ldr	r2, [pc, #140]	; (8003cbc <main+0x1d4>)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	4921      	ldr	r1, [pc, #132]	; (8003cc0 <main+0x1d8>)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	601a      	str	r2, [r3, #0]
			for(int inx_data = 0; inx_data<FFT_SIZE/2; inx_data++)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	3301      	adds	r3, #1
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c4e:	dbee      	blt.n	8003c2e <main+0x146>

			/* Do your processing here */


#ifdef STREAM_RAW_DATA
			for(int inx_data = 0; inx_data<FFT_SIZE; inx_data++)
 8003c50:	2300      	movs	r3, #0
 8003c52:	607b      	str	r3, [r7, #4]
 8003c54:	e00a      	b.n	8003c6c <main+0x184>
			{
				printf("%d\r\n", data_col[inx_data]);
 8003c56:	4a14      	ldr	r2, [pc, #80]	; (8003ca8 <main+0x1c0>)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4818      	ldr	r0, [pc, #96]	; (8003cc4 <main+0x1dc>)
 8003c62:	f005 fe1d 	bl	80098a0 <iprintf>
			for(int inx_data = 0; inx_data<FFT_SIZE; inx_data++)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	607b      	str	r3, [r7, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c72:	dbf0      	blt.n	8003c56 <main+0x16e>
				printf("%2.2f\r\n", fft_mag_out_buf[inx_data]);
			}
#endif

#ifdef STREAM_RAW_DATA
			while(1);
 8003c74:	e7fe      	b.n	8003c74 <main+0x18c>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000404 	.word	0x20000404
 8003c84:	2000040c 	.word	0x2000040c
 8003c88:	40004400 	.word	0x40004400
 8003c8c:	20002fe4 	.word	0x20002fe4
 8003c90:	2000067c 	.word	0x2000067c
 8003c94:	20000608 	.word	0x20000608
 8003c98:	200062f0 	.word	0x200062f0
 8003c9c:	20002fc4 	.word	0x20002fc4
 8003ca0:	20003064 	.word	0x20003064
 8003ca4:	20000604 	.word	0x20000604
 8003ca8:	200050e4 	.word	0x200050e4
 8003cac:	200030e4 	.word	0x200030e4
 8003cb0:	2000060c 	.word	0x2000060c
 8003cb4:	20000400 	.word	0x20000400
 8003cb8:	0800f128 	.word	0x0800f128
 8003cbc:	20000ec4 	.word	0x20000ec4
 8003cc0:	200006c4 	.word	0x200006c4
 8003cc4:	0800c2d8 	.word	0x0800c2d8

08003cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8003ccc:	2005      	movs	r0, #5
 8003cce:	f7ff fe79 	bl	80039c4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8003cd2:	bf00      	nop
 8003cd4:	f7ff fe8a 	bl	80039ec <LL_FLASH_GetLatency>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b05      	cmp	r3, #5
 8003cdc:	d1fa      	bne.n	8003cd4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8003cde:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003ce2:	f7ff fe91 	bl	8003a08 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8003ce6:	f7ff fd31 	bl	800374c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8003cea:	bf00      	nop
 8003cec:	f7ff fd3e 	bl	800376c <LL_RCC_HSE_IsReady>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d1fa      	bne.n	8003cec <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 336, LL_RCC_PLLP_DIV_2);
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8003cfc:	2108      	movs	r1, #8
 8003cfe:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003d02:	f7ff fddd 	bl	80038c0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLLI2S_ConfigDomain_I2S(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLI2SM_DIV_8, 192, LL_RCC_PLLI2SR_DIV_2);
 8003d06:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003d0a:	22c0      	movs	r2, #192	; 0xc0
 8003d0c:	2108      	movs	r1, #8
 8003d0e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003d12:	f7ff fe1f 	bl	8003954 <LL_RCC_PLLI2S_ConfigDomain_I2S>
  LL_RCC_PLL_Enable();
 8003d16:	f7ff fdaf 	bl	8003878 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8003d1a:	bf00      	nop
 8003d1c:	f7ff fdbc 	bl	8003898 <LL_RCC_PLL_IsReady>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d1fa      	bne.n	8003d1c <SystemClock_Config+0x54>
  {

  }
  LL_RCC_PLLI2S_Enable();
 8003d26:	f7ff fdf1 	bl	800390c <LL_RCC_PLLI2S_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLLI2S_IsReady() != 1)
 8003d2a:	bf00      	nop
 8003d2c:	f7ff fdfe 	bl	800392c <LL_RCC_PLLI2S_IsReady>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d1fa      	bne.n	8003d2c <SystemClock_Config+0x64>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003d36:	2000      	movs	r0, #0
 8003d38:	f7ff fd4e 	bl	80037d8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8003d3c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003d40:	f7ff fd5e 	bl	8003800 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8003d44:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003d48:	f7ff fd6e 	bl	8003828 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8003d4c:	2002      	movs	r0, #2
 8003d4e:	f7ff fd21 	bl	8003794 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003d52:	bf00      	nop
 8003d54:	f7ff fd32 	bl	80037bc <LL_RCC_GetSysClkSource>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d1fa      	bne.n	8003d54 <SystemClock_Config+0x8c>
  {

  }
  LL_SetSystemCoreClock(168000000);
 8003d5e:	4808      	ldr	r0, [pc, #32]	; (8003d80 <SystemClock_Config+0xb8>)
 8003d60:	f003 f9a2 	bl	80070a8 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8003d64:	2000      	movs	r0, #0
 8003d66:	f000 fc25 	bl	80045b4 <HAL_InitTick>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003d70:	f000 f840 	bl	8003df4 <Error_Handler>
  }
  LL_RCC_SetI2SClockSource(LL_RCC_I2S1_CLKSOURCE_PLLI2S);
 8003d74:	2000      	movs	r0, #0
 8003d76:	f7ff fd6b 	bl	8003850 <LL_RCC_SetI2SClockSource>
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	0a037a00 	.word	0x0a037a00

08003d84 <__io_putchar>:
 * @param 	n 		size of the array
 * @return 	index 	array index of maximum value in array
 */

int __io_putchar(int ch)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
  LL_USART_TransmitData8(USART2, (uint8_t)ch);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	4619      	mov	r1, r3
 8003d92:	4807      	ldr	r0, [pc, #28]	; (8003db0 <__io_putchar+0x2c>)
 8003d94:	f7ff fe7f 	bl	8003a96 <LL_USART_TransmitData8>

  /* Loop until the end of transmission */
  while (LL_USART_IsActiveFlag_TC(USART2) == 0)
 8003d98:	bf00      	nop
 8003d9a:	4805      	ldr	r0, [pc, #20]	; (8003db0 <__io_putchar+0x2c>)
 8003d9c:	f7ff fe58 	bl	8003a50 <LL_USART_IsActiveFlag_TC>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f9      	beq.n	8003d9a <__io_putchar+0x16>
  {}

  return ch;
 8003da6:	687b      	ldr	r3, [r7, #4]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40004400 	.word	0x40004400

08003db4 <HAL_I2S_RxHalfCpltCallback>:


void HAL_I2S_RxHalfCpltCallback (I2S_HandleTypeDef *hi2s) {
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
	rxstate = STATE_HALF;
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	701a      	strb	r2, [r3, #0]
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20000608 	.word	0x20000608

08003dd4 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback (I2S_HandleTypeDef *hi2s) {
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
	rxstate = STATE_FULL;
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <HAL_I2S_RxCpltCallback+0x1c>)
 8003dde:	2202      	movs	r2, #2
 8003de0:	701a      	strb	r2, [r3, #0]
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20000608 	.word	0x20000608

08003df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003df8:	b672      	cpsid	i
}
 8003dfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003dfc:	e7fe      	b.n	8003dfc <Error_Handler+0x8>
	...

08003e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	607b      	str	r3, [r7, #4]
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <HAL_MspInit+0x4c>)
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	4a0f      	ldr	r2, [pc, #60]	; (8003e4c <HAL_MspInit+0x4c>)
 8003e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e14:	6453      	str	r3, [r2, #68]	; 0x44
 8003e16:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <HAL_MspInit+0x4c>)
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e1e:	607b      	str	r3, [r7, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	603b      	str	r3, [r7, #0]
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <HAL_MspInit+0x4c>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <HAL_MspInit+0x4c>)
 8003e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e30:	6413      	str	r3, [r2, #64]	; 0x40
 8003e32:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <HAL_MspInit+0x4c>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800

08003e50 <LL_USART_IsActiveFlag_RXNE>:
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	bf0c      	ite	eq
 8003e64:	2301      	moveq	r3, #1
 8003e66:	2300      	movne	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <LL_USART_ReceiveData8>:
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	b2db      	uxtb	r3, r3
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e94:	e7fe      	b.n	8003e94 <NMI_Handler+0x4>

08003e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e96:	b480      	push	{r7}
 8003e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e9a:	e7fe      	b.n	8003e9a <HardFault_Handler+0x4>

08003e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ea0:	e7fe      	b.n	8003ea0 <MemManage_Handler+0x4>

08003ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ea6:	e7fe      	b.n	8003ea6 <BusFault_Handler+0x4>

08003ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003eac:	e7fe      	b.n	8003eac <UsageFault_Handler+0x4>

08003eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003eb2:	bf00      	nop
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003edc:	f000 fb9a 	bl	8004614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ee0:	bf00      	nop
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003ee8:	4802      	ldr	r0, [pc, #8]	; (8003ef4 <DMA1_Stream3_IRQHandler+0x10>)
 8003eea:	f000 fdcb 	bl	8004a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003eee:	bf00      	nop
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	2000061c 	.word	0x2000061c

08003ef8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	/* RX interrupt */

	if (LL_USART_IsActiveFlag_RXNE(USART2) != RESET)
 8003efc:	4808      	ldr	r0, [pc, #32]	; (8003f20 <USART2_IRQHandler+0x28>)
 8003efe:	f7ff ffa7 	bl	8003e50 <LL_USART_IsActiveFlag_RXNE>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d009      	beq.n	8003f1c <USART2_IRQHandler+0x24>
	{
		chRX = LL_USART_ReceiveData8(USART2);
 8003f08:	4805      	ldr	r0, [pc, #20]	; (8003f20 <USART2_IRQHandler+0x28>)
 8003f0a:	f7ff ffb4 	bl	8003e76 <LL_USART_ReceiveData8>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <USART2_IRQHandler+0x2c>)
 8003f14:	701a      	strb	r2, [r3, #0]
		dataReceived = 1;
 8003f16:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <USART2_IRQHandler+0x30>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f1c:	bf00      	nop
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40004400 	.word	0x40004400
 8003f24:	2000060a 	.word	0x2000060a
 8003f28:	20000609 	.word	0x20000609

08003f2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
	return 1;
 8003f30:	2301      	movs	r3, #1
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <_kill>:

int _kill(int pid, int sig)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f46:	f005 f80f 	bl	8008f68 <__errno>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2216      	movs	r2, #22
 8003f4e:	601a      	str	r2, [r3, #0]
	return -1;
 8003f50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <_exit>:

void _exit (int status)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f64:	f04f 31ff 	mov.w	r1, #4294967295
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff ffe7 	bl	8003f3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f6e:	e7fe      	b.n	8003f6e <_exit+0x12>

08003f70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	e00a      	b.n	8003f98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f82:	f3af 8000 	nop.w
 8003f86:	4601      	mov	r1, r0
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	60ba      	str	r2, [r7, #8]
 8003f8e:	b2ca      	uxtb	r2, r1
 8003f90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	3301      	adds	r3, #1
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	dbf0      	blt.n	8003f82 <_read+0x12>
	}

return len;
 8003fa0:	687b      	ldr	r3, [r7, #4]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b086      	sub	sp, #24
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]
 8003fba:	e009      	b.n	8003fd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	60ba      	str	r2, [r7, #8]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff fedd 	bl	8003d84 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	dbf1      	blt.n	8003fbc <_write+0x12>
	}
	return len;
 8003fd8:	687b      	ldr	r3, [r7, #4]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <_close>:

int _close(int file)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
	return -1;
 8003fea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800400a:	605a      	str	r2, [r3, #4]
	return 0;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <_isatty>:

int _isatty(int file)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
	return 1;
 8004022:	2301      	movs	r3, #1
}
 8004024:	4618      	mov	r0, r3
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
	return 0;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004054:	4a14      	ldr	r2, [pc, #80]	; (80040a8 <_sbrk+0x5c>)
 8004056:	4b15      	ldr	r3, [pc, #84]	; (80040ac <_sbrk+0x60>)
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004060:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <_sbrk+0x64>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004068:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <_sbrk+0x64>)
 800406a:	4a12      	ldr	r2, [pc, #72]	; (80040b4 <_sbrk+0x68>)
 800406c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800406e:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <_sbrk+0x64>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4413      	add	r3, r2
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	429a      	cmp	r2, r3
 800407a:	d207      	bcs.n	800408c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800407c:	f004 ff74 	bl	8008f68 <__errno>
 8004080:	4603      	mov	r3, r0
 8004082:	220c      	movs	r2, #12
 8004084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004086:	f04f 33ff 	mov.w	r3, #4294967295
 800408a:	e009      	b.n	80040a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800408c:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <_sbrk+0x64>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004092:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <_sbrk+0x64>)
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4413      	add	r3, r2
 800409a:	4a05      	ldr	r2, [pc, #20]	; (80040b0 <_sbrk+0x64>)
 800409c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800409e:	68fb      	ldr	r3, [r7, #12]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20020000 	.word	0x20020000
 80040ac:	00000400 	.word	0x00000400
 80040b0:	20000610 	.word	0x20000610
 80040b4:	20006350 	.word	0x20006350

080040b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040bc:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <SystemInit+0x28>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c2:	4a07      	ldr	r2, [pc, #28]	; (80040e0 <SystemInit+0x28>)
 80040c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040cc:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <SystemInit+0x28>)
 80040ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040d2:	609a      	str	r2, [r3, #8]
#endif
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	e000ed00 	.word	0xe000ed00

080040e4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80040ec:	4b08      	ldr	r3, [pc, #32]	; (8004110 <LL_APB1_GRP1_EnableClock+0x2c>)
 80040ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040f0:	4907      	ldr	r1, [pc, #28]	; (8004110 <LL_APB1_GRP1_EnableClock+0x2c>)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <LL_APB1_GRP1_EnableClock+0x2c>)
 80040fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4013      	ands	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004102:	68fb      	ldr	r3, [r7, #12]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	40023800 	.word	0x40023800

08004114 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	601a      	str	r2, [r3, #0]
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d01c      	beq.n	800417e <LL_TIM_OC_DisableFast+0x4a>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b04      	cmp	r3, #4
 8004148:	d017      	beq.n	800417a <LL_TIM_OC_DisableFast+0x46>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b10      	cmp	r3, #16
 800414e:	d012      	beq.n	8004176 <LL_TIM_OC_DisableFast+0x42>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d00d      	beq.n	8004172 <LL_TIM_OC_DisableFast+0x3e>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800415c:	d007      	beq.n	800416e <LL_TIM_OC_DisableFast+0x3a>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004164:	d101      	bne.n	800416a <LL_TIM_OC_DisableFast+0x36>
 8004166:	2305      	movs	r3, #5
 8004168:	e00a      	b.n	8004180 <LL_TIM_OC_DisableFast+0x4c>
 800416a:	2306      	movs	r3, #6
 800416c:	e008      	b.n	8004180 <LL_TIM_OC_DisableFast+0x4c>
 800416e:	2304      	movs	r3, #4
 8004170:	e006      	b.n	8004180 <LL_TIM_OC_DisableFast+0x4c>
 8004172:	2303      	movs	r3, #3
 8004174:	e004      	b.n	8004180 <LL_TIM_OC_DisableFast+0x4c>
 8004176:	2302      	movs	r3, #2
 8004178:	e002      	b.n	8004180 <LL_TIM_OC_DisableFast+0x4c>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <LL_TIM_OC_DisableFast+0x4c>
 800417e:	2300      	movs	r3, #0
 8004180:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3318      	adds	r3, #24
 8004186:	4619      	mov	r1, r3
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	4a0b      	ldr	r2, [pc, #44]	; (80041b8 <LL_TIM_OC_DisableFast+0x84>)
 800418c:	5cd3      	ldrb	r3, [r2, r3]
 800418e:	440b      	add	r3, r1
 8004190:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	4908      	ldr	r1, [pc, #32]	; (80041bc <LL_TIM_OC_DisableFast+0x88>)
 800419a:	5ccb      	ldrb	r3, [r1, r3]
 800419c:	4619      	mov	r1, r3
 800419e:	2304      	movs	r3, #4
 80041a0:	408b      	lsls	r3, r1
 80041a2:	43db      	mvns	r3, r3
 80041a4:	401a      	ands	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	601a      	str	r2, [r3, #0]

}
 80041aa:	bf00      	nop
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	0800f150 	.word	0x0800f150
 80041bc:	0800f158 	.word	0x0800f158

080041c0 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	605a      	str	r2, [r3, #4]
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	609a      	str	r2, [r3, #8]
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
	...

08004208 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08e      	sub	sp, #56	; 0x38
 800420c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800420e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	605a      	str	r2, [r3, #4]
 8004218:	609a      	str	r2, [r3, #8]
 800421a:	60da      	str	r2, [r3, #12]
 800421c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800421e:	1d3b      	adds	r3, r7, #4
 8004220:	2220      	movs	r2, #32
 8004222:	2100      	movs	r1, #0
 8004224:	4618      	mov	r0, r3
 8004226:	f004 fec9 	bl	8008fbc <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800422a:	2002      	movs	r0, #2
 800422c:	f7ff ff5a 	bl	80040e4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 1679;
 8004230:	f240 638f 	movw	r3, #1679	; 0x68f
 8004234:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004236:	2300      	movs	r3, #0
 8004238:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 65535;
 800423a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800423e:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004240:	2300      	movs	r3, #0
 8004242:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8004244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004248:	4619      	mov	r1, r3
 800424a:	4813      	ldr	r0, [pc, #76]	; (8004298 <MX_TIM3_Init+0x90>)
 800424c:	f002 fa62 	bl	8006714 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8004250:	4811      	ldr	r0, [pc, #68]	; (8004298 <MX_TIM3_Init+0x90>)
 8004252:	f7ff ff5f 	bl	8004114 <LL_TIM_DisableARRPreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8004256:	2300      	movs	r3, #0
 8004258:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800425a:	2300      	movs	r3, #0
 800425c:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 50000;
 8004262:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004266:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800426c:	1d3b      	adds	r3, r7, #4
 800426e:	461a      	mov	r2, r3
 8004270:	2101      	movs	r1, #1
 8004272:	4809      	ldr	r0, [pc, #36]	; (8004298 <MX_TIM3_Init+0x90>)
 8004274:	f002 fae8 	bl	8006848 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8004278:	2101      	movs	r1, #1
 800427a:	4807      	ldr	r0, [pc, #28]	; (8004298 <MX_TIM3_Init+0x90>)
 800427c:	f7ff ff5a 	bl	8004134 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_OC1REF);
 8004280:	2140      	movs	r1, #64	; 0x40
 8004282:	4805      	ldr	r0, [pc, #20]	; (8004298 <MX_TIM3_Init+0x90>)
 8004284:	f7ff ff9c 	bl	80041c0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8004288:	4803      	ldr	r0, [pc, #12]	; (8004298 <MX_TIM3_Init+0x90>)
 800428a:	f7ff ffac 	bl	80041e6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800428e:	bf00      	nop
 8004290:	3738      	adds	r7, #56	; 0x38
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40000400 	.word	0x40000400

0800429c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042a0:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <__NVIC_GetPriorityGrouping+0x18>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	0a1b      	lsrs	r3, r3, #8
 80042a6:	f003 0307 	and.w	r3, r3, #7
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	e000ed00 	.word	0xe000ed00

080042b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	db0b      	blt.n	80042e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ca:	79fb      	ldrb	r3, [r7, #7]
 80042cc:	f003 021f 	and.w	r2, r3, #31
 80042d0:	4907      	ldr	r1, [pc, #28]	; (80042f0 <__NVIC_EnableIRQ+0x38>)
 80042d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	2001      	movs	r0, #1
 80042da:	fa00 f202 	lsl.w	r2, r0, r2
 80042de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	e000e100 	.word	0xe000e100

080042f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	6039      	str	r1, [r7, #0]
 80042fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004304:	2b00      	cmp	r3, #0
 8004306:	db0a      	blt.n	800431e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	b2da      	uxtb	r2, r3
 800430c:	490c      	ldr	r1, [pc, #48]	; (8004340 <__NVIC_SetPriority+0x4c>)
 800430e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004312:	0112      	lsls	r2, r2, #4
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	440b      	add	r3, r1
 8004318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800431c:	e00a      	b.n	8004334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	4908      	ldr	r1, [pc, #32]	; (8004344 <__NVIC_SetPriority+0x50>)
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	3b04      	subs	r3, #4
 800432c:	0112      	lsls	r2, r2, #4
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	440b      	add	r3, r1
 8004332:	761a      	strb	r2, [r3, #24]
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	e000e100 	.word	0xe000e100
 8004344:	e000ed00 	.word	0xe000ed00

08004348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004348:	b480      	push	{r7}
 800434a:	b089      	sub	sp, #36	; 0x24
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f1c3 0307 	rsb	r3, r3, #7
 8004362:	2b04      	cmp	r3, #4
 8004364:	bf28      	it	cs
 8004366:	2304      	movcs	r3, #4
 8004368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	3304      	adds	r3, #4
 800436e:	2b06      	cmp	r3, #6
 8004370:	d902      	bls.n	8004378 <NVIC_EncodePriority+0x30>
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	3b03      	subs	r3, #3
 8004376:	e000      	b.n	800437a <NVIC_EncodePriority+0x32>
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800437c:	f04f 32ff 	mov.w	r2, #4294967295
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43da      	mvns	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	401a      	ands	r2, r3
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004390:	f04f 31ff 	mov.w	r1, #4294967295
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	fa01 f303 	lsl.w	r3, r1, r3
 800439a:	43d9      	mvns	r1, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a0:	4313      	orrs	r3, r2
         );
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3724      	adds	r7, #36	; 0x24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
	...

080043b0 <LL_AHB1_GRP1_EnableClock>:
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80043b8:	4b08      	ldr	r3, [pc, #32]	; (80043dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80043ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043bc:	4907      	ldr	r1, [pc, #28]	; (80043dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80043c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4013      	ands	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043ce:	68fb      	ldr	r3, [r7, #12]
}
 80043d0:	bf00      	nop
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	40023800 	.word	0x40023800

080043e0 <LL_APB1_GRP1_EnableClock>:
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80043e8:	4b08      	ldr	r3, [pc, #32]	; (800440c <LL_APB1_GRP1_EnableClock+0x2c>)
 80043ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ec:	4907      	ldr	r1, [pc, #28]	; (800440c <LL_APB1_GRP1_EnableClock+0x2c>)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80043f4:	4b05      	ldr	r3, [pc, #20]	; (800440c <LL_APB1_GRP1_EnableClock+0x2c>)
 80043f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4013      	ands	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043fe:	68fb      	ldr	r3, [r7, #12]
}
 8004400:	bf00      	nop
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	40023800 	.word	0x40023800

08004410 <LL_USART_Enable>:
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	60da      	str	r2, [r3, #12]
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <LL_USART_ConfigAsyncMode>:
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	615a      	str	r2, [r3, #20]
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08e      	sub	sp, #56	; 0x38
 8004460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004462:	f107 031c 	add.w	r3, r7, #28
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	605a      	str	r2, [r3, #4]
 800446c:	609a      	str	r2, [r3, #8]
 800446e:	60da      	str	r2, [r3, #12]
 8004470:	611a      	str	r2, [r3, #16]
 8004472:	615a      	str	r2, [r3, #20]
 8004474:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004476:	1d3b      	adds	r3, r7, #4
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	60da      	str	r2, [r3, #12]
 8004482:	611a      	str	r2, [r3, #16]
 8004484:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8004486:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800448a:	f7ff ffa9 	bl	80043e0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800448e:	2001      	movs	r0, #1
 8004490:	f7ff ff8e 	bl	80043b0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8004494:	230c      	movs	r3, #12
 8004496:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004498:	2302      	movs	r3, #2
 800449a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 800449c:	2301      	movs	r3, #1
 800449e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80044a8:	2307      	movs	r3, #7
 80044aa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ac:	1d3b      	adds	r3, r7, #4
 80044ae:	4619      	mov	r1, r3
 80044b0:	4818      	ldr	r0, [pc, #96]	; (8004514 <MX_USART2_UART_Init+0xb8>)
 80044b2:	f001 ff0f 	bl	80062d4 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80044b6:	f7ff fef1 	bl	800429c <__NVIC_GetPriorityGrouping>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2200      	movs	r2, #0
 80044be:	2100      	movs	r1, #0
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff ff41 	bl	8004348 <NVIC_EncodePriority>
 80044c6:	4603      	mov	r3, r0
 80044c8:	4619      	mov	r1, r3
 80044ca:	2026      	movs	r0, #38	; 0x26
 80044cc:	f7ff ff12 	bl	80042f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80044d0:	2026      	movs	r0, #38	; 0x26
 80044d2:	f7ff fef1 	bl	80042b8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80044d6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80044da:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80044dc:	2300      	movs	r3, #0
 80044de:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80044e0:	2300      	movs	r3, #0
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80044e4:	2300      	movs	r3, #0
 80044e6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80044e8:	230c      	movs	r3, #12
 80044ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80044ec:	2300      	movs	r3, #0
 80044ee:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80044f0:	2300      	movs	r3, #0
 80044f2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80044f4:	f107 031c 	add.w	r3, r7, #28
 80044f8:	4619      	mov	r1, r3
 80044fa:	4807      	ldr	r0, [pc, #28]	; (8004518 <MX_USART2_UART_Init+0xbc>)
 80044fc:	f002 fd54 	bl	8006fa8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8004500:	4805      	ldr	r0, [pc, #20]	; (8004518 <MX_USART2_UART_Init+0xbc>)
 8004502:	f7ff ff95 	bl	8004430 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8004506:	4804      	ldr	r0, [pc, #16]	; (8004518 <MX_USART2_UART_Init+0xbc>)
 8004508:	f7ff ff82 	bl	8004410 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800450c:	bf00      	nop
 800450e:	3738      	adds	r7, #56	; 0x38
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40020000 	.word	0x40020000
 8004518:	40004400 	.word	0x40004400

0800451c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800451c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004554 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004520:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004522:	e003      	b.n	800452c <LoopCopyDataInit>

08004524 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004526:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004528:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800452a:	3104      	adds	r1, #4

0800452c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800452c:	480b      	ldr	r0, [pc, #44]	; (800455c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800452e:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004530:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004532:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004534:	d3f6      	bcc.n	8004524 <CopyDataInit>
  ldr  r2, =_sbss
 8004536:	4a0b      	ldr	r2, [pc, #44]	; (8004564 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004538:	e002      	b.n	8004540 <LoopFillZerobss>

0800453a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800453a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800453c:	f842 3b04 	str.w	r3, [r2], #4

08004540 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004540:	4b09      	ldr	r3, [pc, #36]	; (8004568 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004542:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004544:	d3f9      	bcc.n	800453a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004546:	f7ff fdb7 	bl	80040b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800454a:	f004 fd13 	bl	8008f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800454e:	f7ff facb 	bl	8003ae8 <main>
  bx  lr    
 8004552:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004554:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004558:	0800f57c 	.word	0x0800f57c
  ldr  r0, =_sdata
 800455c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004560:	200005e4 	.word	0x200005e4
  ldr  r2, =_sbss
 8004564:	200005e4 	.word	0x200005e4
  ldr  r3, = _ebss
 8004568:	2000634c 	.word	0x2000634c

0800456c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800456c:	e7fe      	b.n	800456c <ADC_IRQHandler>
	...

08004570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004574:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <HAL_Init+0x40>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a0d      	ldr	r2, [pc, #52]	; (80045b0 <HAL_Init+0x40>)
 800457a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800457e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <HAL_Init+0x40>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a0a      	ldr	r2, [pc, #40]	; (80045b0 <HAL_Init+0x40>)
 8004586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800458a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800458c:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <HAL_Init+0x40>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a07      	ldr	r2, [pc, #28]	; (80045b0 <HAL_Init+0x40>)
 8004592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004598:	2003      	movs	r0, #3
 800459a:	f000 f92b 	bl	80047f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800459e:	2000      	movs	r0, #0
 80045a0:	f000 f808 	bl	80045b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045a4:	f7ff fc2c 	bl	8003e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40023c00 	.word	0x40023c00

080045b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045bc:	4b12      	ldr	r3, [pc, #72]	; (8004608 <HAL_InitTick+0x54>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4b12      	ldr	r3, [pc, #72]	; (800460c <HAL_InitTick+0x58>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	4619      	mov	r1, r3
 80045c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80045ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 f943 	bl	800485e <HAL_SYSTICK_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e00e      	b.n	8004600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b0f      	cmp	r3, #15
 80045e6:	d80a      	bhi.n	80045fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045e8:	2200      	movs	r2, #0
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	f04f 30ff 	mov.w	r0, #4294967295
 80045f0:	f000 f90b 	bl	800480a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045f4:	4a06      	ldr	r2, [pc, #24]	; (8004610 <HAL_InitTick+0x5c>)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e000      	b.n	8004600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
}
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20000404 	.word	0x20000404
 800460c:	2000040c 	.word	0x2000040c
 8004610:	20000408 	.word	0x20000408

08004614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004618:	4b06      	ldr	r3, [pc, #24]	; (8004634 <HAL_IncTick+0x20>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	461a      	mov	r2, r3
 800461e:	4b06      	ldr	r3, [pc, #24]	; (8004638 <HAL_IncTick+0x24>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4413      	add	r3, r2
 8004624:	4a04      	ldr	r2, [pc, #16]	; (8004638 <HAL_IncTick+0x24>)
 8004626:	6013      	str	r3, [r2, #0]
}
 8004628:	bf00      	nop
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	2000040c 	.word	0x2000040c
 8004638:	200062e4 	.word	0x200062e4

0800463c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  return uwTick;
 8004640:	4b03      	ldr	r3, [pc, #12]	; (8004650 <HAL_GetTick+0x14>)
 8004642:	681b      	ldr	r3, [r3, #0]
}
 8004644:	4618      	mov	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	200062e4 	.word	0x200062e4

08004654 <__NVIC_SetPriorityGrouping>:
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004664:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <__NVIC_SetPriorityGrouping+0x44>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004670:	4013      	ands	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800467c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004686:	4a04      	ldr	r2, [pc, #16]	; (8004698 <__NVIC_SetPriorityGrouping+0x44>)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	60d3      	str	r3, [r2, #12]
}
 800468c:	bf00      	nop
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	e000ed00 	.word	0xe000ed00

0800469c <__NVIC_GetPriorityGrouping>:
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046a0:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <__NVIC_GetPriorityGrouping+0x18>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	0a1b      	lsrs	r3, r3, #8
 80046a6:	f003 0307 	and.w	r3, r3, #7
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	e000ed00 	.word	0xe000ed00

080046b8 <__NVIC_EnableIRQ>:
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	db0b      	blt.n	80046e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	f003 021f 	and.w	r2, r3, #31
 80046d0:	4907      	ldr	r1, [pc, #28]	; (80046f0 <__NVIC_EnableIRQ+0x38>)
 80046d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	2001      	movs	r0, #1
 80046da:	fa00 f202 	lsl.w	r2, r0, r2
 80046de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	e000e100 	.word	0xe000e100

080046f4 <__NVIC_SetPriority>:
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	6039      	str	r1, [r7, #0]
 80046fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004704:	2b00      	cmp	r3, #0
 8004706:	db0a      	blt.n	800471e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	b2da      	uxtb	r2, r3
 800470c:	490c      	ldr	r1, [pc, #48]	; (8004740 <__NVIC_SetPriority+0x4c>)
 800470e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004712:	0112      	lsls	r2, r2, #4
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	440b      	add	r3, r1
 8004718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800471c:	e00a      	b.n	8004734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	b2da      	uxtb	r2, r3
 8004722:	4908      	ldr	r1, [pc, #32]	; (8004744 <__NVIC_SetPriority+0x50>)
 8004724:	79fb      	ldrb	r3, [r7, #7]
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	3b04      	subs	r3, #4
 800472c:	0112      	lsls	r2, r2, #4
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	440b      	add	r3, r1
 8004732:	761a      	strb	r2, [r3, #24]
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	e000e100 	.word	0xe000e100
 8004744:	e000ed00 	.word	0xe000ed00

08004748 <NVIC_EncodePriority>:
{
 8004748:	b480      	push	{r7}
 800474a:	b089      	sub	sp, #36	; 0x24
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f1c3 0307 	rsb	r3, r3, #7
 8004762:	2b04      	cmp	r3, #4
 8004764:	bf28      	it	cs
 8004766:	2304      	movcs	r3, #4
 8004768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	3304      	adds	r3, #4
 800476e:	2b06      	cmp	r3, #6
 8004770:	d902      	bls.n	8004778 <NVIC_EncodePriority+0x30>
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	3b03      	subs	r3, #3
 8004776:	e000      	b.n	800477a <NVIC_EncodePriority+0x32>
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800477c:	f04f 32ff 	mov.w	r2, #4294967295
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43da      	mvns	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	401a      	ands	r2, r3
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004790:	f04f 31ff 	mov.w	r1, #4294967295
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	fa01 f303 	lsl.w	r3, r1, r3
 800479a:	43d9      	mvns	r1, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a0:	4313      	orrs	r3, r2
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3724      	adds	r7, #36	; 0x24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
	...

080047b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047c0:	d301      	bcc.n	80047c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047c2:	2301      	movs	r3, #1
 80047c4:	e00f      	b.n	80047e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047c6:	4a0a      	ldr	r2, [pc, #40]	; (80047f0 <SysTick_Config+0x40>)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047ce:	210f      	movs	r1, #15
 80047d0:	f04f 30ff 	mov.w	r0, #4294967295
 80047d4:	f7ff ff8e 	bl	80046f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <SysTick_Config+0x40>)
 80047da:	2200      	movs	r2, #0
 80047dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047de:	4b04      	ldr	r3, [pc, #16]	; (80047f0 <SysTick_Config+0x40>)
 80047e0:	2207      	movs	r2, #7
 80047e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	e000e010 	.word	0xe000e010

080047f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff ff29 	bl	8004654 <__NVIC_SetPriorityGrouping>
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800480a:	b580      	push	{r7, lr}
 800480c:	b086      	sub	sp, #24
 800480e:	af00      	add	r7, sp, #0
 8004810:	4603      	mov	r3, r0
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	607a      	str	r2, [r7, #4]
 8004816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004818:	2300      	movs	r3, #0
 800481a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800481c:	f7ff ff3e 	bl	800469c <__NVIC_GetPriorityGrouping>
 8004820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	6978      	ldr	r0, [r7, #20]
 8004828:	f7ff ff8e 	bl	8004748 <NVIC_EncodePriority>
 800482c:	4602      	mov	r2, r0
 800482e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004832:	4611      	mov	r1, r2
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff ff5d 	bl	80046f4 <__NVIC_SetPriority>
}
 800483a:	bf00      	nop
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b082      	sub	sp, #8
 8004846:	af00      	add	r7, sp, #0
 8004848:	4603      	mov	r3, r0
 800484a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800484c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff ff31 	bl	80046b8 <__NVIC_EnableIRQ>
}
 8004856:	bf00      	nop
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b082      	sub	sp, #8
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff ffa2 	bl	80047b0 <SysTick_Config>
 800486c:	4603      	mov	r3, r0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004884:	f7ff feda 	bl	800463c <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e099      	b.n	80049c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0201 	bic.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048b4:	e00f      	b.n	80048d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048b6:	f7ff fec1 	bl	800463c <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b05      	cmp	r3, #5
 80048c2:	d908      	bls.n	80048d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2220      	movs	r2, #32
 80048c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2203      	movs	r2, #3
 80048ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e078      	b.n	80049c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e8      	bne.n	80048b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4b38      	ldr	r3, [pc, #224]	; (80049d0 <HAL_DMA_Init+0x158>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004902:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800490e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800491a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	2b04      	cmp	r3, #4
 800492e:	d107      	bne.n	8004940 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	4313      	orrs	r3, r2
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f023 0307 	bic.w	r3, r3, #7
 8004956:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	2b04      	cmp	r3, #4
 8004968:	d117      	bne.n	800499a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00e      	beq.n	800499a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fa6f 	bl	8004e60 <DMA_CheckFifoParam>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2240      	movs	r2, #64	; 0x40
 800498c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004996:	2301      	movs	r3, #1
 8004998:	e016      	b.n	80049c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fa26 	bl	8004df4 <DMA_CalcBaseAndBitshift>
 80049a8:	4603      	mov	r3, r0
 80049aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b0:	223f      	movs	r2, #63	; 0x3f
 80049b2:	409a      	lsls	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	f010803f 	.word	0xf010803f

080049d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_DMA_Start_IT+0x26>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e040      	b.n	8004a7c <HAL_DMA_Start_IT+0xa8>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d12f      	bne.n	8004a6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2202      	movs	r2, #2
 8004a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	68b9      	ldr	r1, [r7, #8]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f9b8 	bl	8004d98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2c:	223f      	movs	r2, #63	; 0x3f
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0216 	orr.w	r2, r2, #22
 8004a42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d007      	beq.n	8004a5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0208 	orr.w	r2, r2, #8
 8004a5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	e005      	b.n	8004a7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a76:	2302      	movs	r3, #2
 8004a78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a90:	4b92      	ldr	r3, [pc, #584]	; (8004cdc <HAL_DMA_IRQHandler+0x258>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a92      	ldr	r2, [pc, #584]	; (8004ce0 <HAL_DMA_IRQHandler+0x25c>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	0a9b      	lsrs	r3, r3, #10
 8004a9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aae:	2208      	movs	r2, #8
 8004ab0:	409a      	lsls	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01a      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d013      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0204 	bic.w	r2, r2, #4
 8004ad6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004adc:	2208      	movs	r2, #8
 8004ade:	409a      	lsls	r2, r3
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae8:	f043 0201 	orr.w	r2, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af4:	2201      	movs	r2, #1
 8004af6:	409a      	lsls	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d012      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00b      	beq.n	8004b26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b12:	2201      	movs	r2, #1
 8004b14:	409a      	lsls	r2, r3
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1e:	f043 0202 	orr.w	r2, r3, #2
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2a:	2204      	movs	r2, #4
 8004b2c:	409a      	lsls	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4013      	ands	r3, r2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d012      	beq.n	8004b5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00b      	beq.n	8004b5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b48:	2204      	movs	r2, #4
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b54:	f043 0204 	orr.w	r2, r3, #4
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b60:	2210      	movs	r2, #16
 8004b62:	409a      	lsls	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d043      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d03c      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7e:	2210      	movs	r2, #16
 8004b80:	409a      	lsls	r2, r3
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d018      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d108      	bne.n	8004bb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d024      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	4798      	blx	r3
 8004bb2:	e01f      	b.n	8004bf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d01b      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	4798      	blx	r3
 8004bc4:	e016      	b.n	8004bf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d107      	bne.n	8004be4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0208 	bic.w	r2, r2, #8
 8004be2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	409a      	lsls	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 808e 	beq.w	8004d22 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0310 	and.w	r3, r3, #16
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 8086 	beq.w	8004d22 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	409a      	lsls	r2, r3
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b05      	cmp	r3, #5
 8004c2c:	d136      	bne.n	8004c9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0216 	bic.w	r2, r2, #22
 8004c3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695a      	ldr	r2, [r3, #20]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d103      	bne.n	8004c5e <HAL_DMA_IRQHandler+0x1da>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0208 	bic.w	r2, r2, #8
 8004c6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c72:	223f      	movs	r2, #63	; 0x3f
 8004c74:	409a      	lsls	r2, r3
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d07d      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	4798      	blx	r3
        }
        return;
 8004c9a:	e078      	b.n	8004d8e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d01c      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d108      	bne.n	8004cca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d030      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	4798      	blx	r3
 8004cc8:	e02b      	b.n	8004d22 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d027      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	4798      	blx	r3
 8004cda:	e022      	b.n	8004d22 <HAL_DMA_IRQHandler+0x29e>
 8004cdc:	20000404 	.word	0x20000404
 8004ce0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10f      	bne.n	8004d12 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0210 	bic.w	r2, r2, #16
 8004d00:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d032      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d022      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2205      	movs	r2, #5
 8004d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0201 	bic.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	3301      	adds	r3, #1
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d307      	bcc.n	8004d6a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1f2      	bne.n	8004d4e <HAL_DMA_IRQHandler+0x2ca>
 8004d68:	e000      	b.n	8004d6c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004d6a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	4798      	blx	r3
 8004d8c:	e000      	b.n	8004d90 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004d8e:	bf00      	nop
    }
  }
}
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop

08004d98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004db4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d108      	bne.n	8004dd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004dd6:	e007      	b.n	8004de8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	60da      	str	r2, [r3, #12]
}
 8004de8:	bf00      	nop
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	3b10      	subs	r3, #16
 8004e04:	4a14      	ldr	r2, [pc, #80]	; (8004e58 <DMA_CalcBaseAndBitshift+0x64>)
 8004e06:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0a:	091b      	lsrs	r3, r3, #4
 8004e0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e0e:	4a13      	ldr	r2, [pc, #76]	; (8004e5c <DMA_CalcBaseAndBitshift+0x68>)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d909      	bls.n	8004e36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e2a:	f023 0303 	bic.w	r3, r3, #3
 8004e2e:	1d1a      	adds	r2, r3, #4
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	659a      	str	r2, [r3, #88]	; 0x58
 8004e34:	e007      	b.n	8004e46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e3e:	f023 0303 	bic.w	r3, r3, #3
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	aaaaaaab 	.word	0xaaaaaaab
 8004e5c:	0800f160 	.word	0x0800f160

08004e60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d11f      	bne.n	8004eba <DMA_CheckFifoParam+0x5a>
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d856      	bhi.n	8004f2e <DMA_CheckFifoParam+0xce>
 8004e80:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <DMA_CheckFifoParam+0x28>)
 8004e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e86:	bf00      	nop
 8004e88:	08004e99 	.word	0x08004e99
 8004e8c:	08004eab 	.word	0x08004eab
 8004e90:	08004e99 	.word	0x08004e99
 8004e94:	08004f2f 	.word	0x08004f2f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d046      	beq.n	8004f32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ea8:	e043      	b.n	8004f32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004eb2:	d140      	bne.n	8004f36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eb8:	e03d      	b.n	8004f36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec2:	d121      	bne.n	8004f08 <DMA_CheckFifoParam+0xa8>
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d837      	bhi.n	8004f3a <DMA_CheckFifoParam+0xda>
 8004eca:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <DMA_CheckFifoParam+0x70>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004ee1 	.word	0x08004ee1
 8004ed4:	08004ee7 	.word	0x08004ee7
 8004ed8:	08004ee1 	.word	0x08004ee1
 8004edc:	08004ef9 	.word	0x08004ef9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee4:	e030      	b.n	8004f48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d025      	beq.n	8004f3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ef6:	e022      	b.n	8004f3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f00:	d11f      	bne.n	8004f42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f06:	e01c      	b.n	8004f42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d903      	bls.n	8004f16 <DMA_CheckFifoParam+0xb6>
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d003      	beq.n	8004f1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f14:	e018      	b.n	8004f48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	73fb      	strb	r3, [r7, #15]
      break;
 8004f1a:	e015      	b.n	8004f48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00e      	beq.n	8004f46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f2c:	e00b      	b.n	8004f46 <DMA_CheckFifoParam+0xe6>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e00a      	b.n	8004f48 <DMA_CheckFifoParam+0xe8>
      break;
 8004f32:	bf00      	nop
 8004f34:	e008      	b.n	8004f48 <DMA_CheckFifoParam+0xe8>
      break;
 8004f36:	bf00      	nop
 8004f38:	e006      	b.n	8004f48 <DMA_CheckFifoParam+0xe8>
      break;
 8004f3a:	bf00      	nop
 8004f3c:	e004      	b.n	8004f48 <DMA_CheckFifoParam+0xe8>
      break;
 8004f3e:	bf00      	nop
 8004f40:	e002      	b.n	8004f48 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f42:	bf00      	nop
 8004f44:	e000      	b.n	8004f48 <DMA_CheckFifoParam+0xe8>
      break;
 8004f46:	bf00      	nop
    }
  } 
  
  return status; 
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop

08004f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b089      	sub	sp, #36	; 0x24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	e16b      	b.n	800524c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f74:	2201      	movs	r2, #1
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4013      	ands	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	f040 815a 	bne.w	8005246 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d005      	beq.n	8004faa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d130      	bne.n	800500c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	4013      	ands	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	091b      	lsrs	r3, r3, #4
 8004ff6:	f003 0201 	and.w	r2, r3, #1
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	4313      	orrs	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	2b03      	cmp	r3, #3
 8005016:	d017      	beq.n	8005048 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	2203      	movs	r2, #3
 8005024:	fa02 f303 	lsl.w	r3, r2, r3
 8005028:	43db      	mvns	r3, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4013      	ands	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4313      	orrs	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d123      	bne.n	800509c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	08da      	lsrs	r2, r3, #3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3208      	adds	r2, #8
 800505c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005060:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	220f      	movs	r2, #15
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	43db      	mvns	r3, r3
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	4013      	ands	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4313      	orrs	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	08da      	lsrs	r2, r3, #3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3208      	adds	r2, #8
 8005096:	69b9      	ldr	r1, [r7, #24]
 8005098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	2203      	movs	r2, #3
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	43db      	mvns	r3, r3
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	4013      	ands	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f003 0203 	and.w	r2, r3, #3
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 80b4 	beq.w	8005246 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	4b60      	ldr	r3, [pc, #384]	; (8005264 <HAL_GPIO_Init+0x30c>)
 80050e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e6:	4a5f      	ldr	r2, [pc, #380]	; (8005264 <HAL_GPIO_Init+0x30c>)
 80050e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050ec:	6453      	str	r3, [r2, #68]	; 0x44
 80050ee:	4b5d      	ldr	r3, [pc, #372]	; (8005264 <HAL_GPIO_Init+0x30c>)
 80050f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050fa:	4a5b      	ldr	r2, [pc, #364]	; (8005268 <HAL_GPIO_Init+0x310>)
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	089b      	lsrs	r3, r3, #2
 8005100:	3302      	adds	r3, #2
 8005102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	220f      	movs	r2, #15
 8005112:	fa02 f303 	lsl.w	r3, r2, r3
 8005116:	43db      	mvns	r3, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4013      	ands	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a52      	ldr	r2, [pc, #328]	; (800526c <HAL_GPIO_Init+0x314>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d02b      	beq.n	800517e <HAL_GPIO_Init+0x226>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a51      	ldr	r2, [pc, #324]	; (8005270 <HAL_GPIO_Init+0x318>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d025      	beq.n	800517a <HAL_GPIO_Init+0x222>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a50      	ldr	r2, [pc, #320]	; (8005274 <HAL_GPIO_Init+0x31c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d01f      	beq.n	8005176 <HAL_GPIO_Init+0x21e>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a4f      	ldr	r2, [pc, #316]	; (8005278 <HAL_GPIO_Init+0x320>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d019      	beq.n	8005172 <HAL_GPIO_Init+0x21a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a4e      	ldr	r2, [pc, #312]	; (800527c <HAL_GPIO_Init+0x324>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d013      	beq.n	800516e <HAL_GPIO_Init+0x216>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a4d      	ldr	r2, [pc, #308]	; (8005280 <HAL_GPIO_Init+0x328>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00d      	beq.n	800516a <HAL_GPIO_Init+0x212>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a4c      	ldr	r2, [pc, #304]	; (8005284 <HAL_GPIO_Init+0x32c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d007      	beq.n	8005166 <HAL_GPIO_Init+0x20e>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a4b      	ldr	r2, [pc, #300]	; (8005288 <HAL_GPIO_Init+0x330>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d101      	bne.n	8005162 <HAL_GPIO_Init+0x20a>
 800515e:	2307      	movs	r3, #7
 8005160:	e00e      	b.n	8005180 <HAL_GPIO_Init+0x228>
 8005162:	2308      	movs	r3, #8
 8005164:	e00c      	b.n	8005180 <HAL_GPIO_Init+0x228>
 8005166:	2306      	movs	r3, #6
 8005168:	e00a      	b.n	8005180 <HAL_GPIO_Init+0x228>
 800516a:	2305      	movs	r3, #5
 800516c:	e008      	b.n	8005180 <HAL_GPIO_Init+0x228>
 800516e:	2304      	movs	r3, #4
 8005170:	e006      	b.n	8005180 <HAL_GPIO_Init+0x228>
 8005172:	2303      	movs	r3, #3
 8005174:	e004      	b.n	8005180 <HAL_GPIO_Init+0x228>
 8005176:	2302      	movs	r3, #2
 8005178:	e002      	b.n	8005180 <HAL_GPIO_Init+0x228>
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <HAL_GPIO_Init+0x228>
 800517e:	2300      	movs	r3, #0
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	f002 0203 	and.w	r2, r2, #3
 8005186:	0092      	lsls	r2, r2, #2
 8005188:	4093      	lsls	r3, r2
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4313      	orrs	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005190:	4935      	ldr	r1, [pc, #212]	; (8005268 <HAL_GPIO_Init+0x310>)
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	089b      	lsrs	r3, r3, #2
 8005196:	3302      	adds	r3, #2
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800519e:	4b3b      	ldr	r3, [pc, #236]	; (800528c <HAL_GPIO_Init+0x334>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	43db      	mvns	r3, r3
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4013      	ands	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051c2:	4a32      	ldr	r2, [pc, #200]	; (800528c <HAL_GPIO_Init+0x334>)
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80051c8:	4b30      	ldr	r3, [pc, #192]	; (800528c <HAL_GPIO_Init+0x334>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	43db      	mvns	r3, r3
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4013      	ands	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051ec:	4a27      	ldr	r2, [pc, #156]	; (800528c <HAL_GPIO_Init+0x334>)
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051f2:	4b26      	ldr	r3, [pc, #152]	; (800528c <HAL_GPIO_Init+0x334>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	43db      	mvns	r3, r3
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4013      	ands	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005216:	4a1d      	ldr	r2, [pc, #116]	; (800528c <HAL_GPIO_Init+0x334>)
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800521c:	4b1b      	ldr	r3, [pc, #108]	; (800528c <HAL_GPIO_Init+0x334>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	43db      	mvns	r3, r3
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	4013      	ands	r3, r2
 800522a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005240:	4a12      	ldr	r2, [pc, #72]	; (800528c <HAL_GPIO_Init+0x334>)
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	3301      	adds	r3, #1
 800524a:	61fb      	str	r3, [r7, #28]
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	2b0f      	cmp	r3, #15
 8005250:	f67f ae90 	bls.w	8004f74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005254:	bf00      	nop
 8005256:	bf00      	nop
 8005258:	3724      	adds	r7, #36	; 0x24
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	40023800 	.word	0x40023800
 8005268:	40013800 	.word	0x40013800
 800526c:	40020000 	.word	0x40020000
 8005270:	40020400 	.word	0x40020400
 8005274:	40020800 	.word	0x40020800
 8005278:	40020c00 	.word	0x40020c00
 800527c:	40021000 	.word	0x40021000
 8005280:	40021400 	.word	0x40021400
 8005284:	40021800 	.word	0x40021800
 8005288:	40021c00 	.word	0x40021c00
 800528c:	40013c00 	.word	0x40013c00

08005290 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e128      	b.n	80054f4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d109      	bne.n	80052c2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a90      	ldr	r2, [pc, #576]	; (80054fc <HAL_I2S_Init+0x26c>)
 80052ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7fe f9a9 	bl	8003614 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2202      	movs	r2, #2
 80052c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80052d8:	f023 030f 	bic.w	r3, r3, #15
 80052dc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2202      	movs	r2, #2
 80052e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d060      	beq.n	80053b0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d102      	bne.n	80052fc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80052f6:	2310      	movs	r3, #16
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	e001      	b.n	8005300 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80052fc:	2320      	movs	r3, #32
 80052fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	2b20      	cmp	r3, #32
 8005306:	d802      	bhi.n	800530e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800530e:	2001      	movs	r0, #1
 8005310:	f000 fd64 	bl	8005ddc <HAL_RCCEx_GetPeriphCLKFreq>
 8005314:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800531e:	d125      	bne.n	800536c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d010      	beq.n	800534a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	461a      	mov	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	fbb2 f3f3 	udiv	r3, r2, r3
 8005344:	3305      	adds	r3, #5
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	e01f      	b.n	800538a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	fbb2 f2f3 	udiv	r2, r2, r3
 8005354:	4613      	mov	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	461a      	mov	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	fbb2 f3f3 	udiv	r3, r2, r3
 8005366:	3305      	adds	r3, #5
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	e00e      	b.n	800538a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	fbb2 f2f3 	udiv	r2, r2, r3
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	461a      	mov	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	fbb2 f3f3 	udiv	r3, r2, r3
 8005386:	3305      	adds	r3, #5
 8005388:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	4a5c      	ldr	r2, [pc, #368]	; (8005500 <HAL_I2S_Init+0x270>)
 800538e:	fba2 2303 	umull	r2, r3, r2, r3
 8005392:	08db      	lsrs	r3, r3, #3
 8005394:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	085b      	lsrs	r3, r3, #1
 80053a6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	021b      	lsls	r3, r3, #8
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	e003      	b.n	80053b8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80053b0:	2302      	movs	r3, #2
 80053b2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d902      	bls.n	80053c4 <HAL_I2S_Init+0x134>
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	2bff      	cmp	r3, #255	; 0xff
 80053c2:	d907      	bls.n	80053d4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c8:	f043 0210 	orr.w	r2, r3, #16
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e08f      	b.n	80054f4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	ea42 0103 	orr.w	r1, r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80053f2:	f023 030f 	bic.w	r3, r3, #15
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6851      	ldr	r1, [r2, #4]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6892      	ldr	r2, [r2, #8]
 80053fe:	4311      	orrs	r1, r2
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	68d2      	ldr	r2, [r2, #12]
 8005404:	4311      	orrs	r1, r2
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6992      	ldr	r2, [r2, #24]
 800540a:	430a      	orrs	r2, r1
 800540c:	431a      	orrs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005416:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d161      	bne.n	80054e4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a38      	ldr	r2, [pc, #224]	; (8005504 <HAL_I2S_Init+0x274>)
 8005424:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a37      	ldr	r2, [pc, #220]	; (8005508 <HAL_I2S_Init+0x278>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d101      	bne.n	8005434 <HAL_I2S_Init+0x1a4>
 8005430:	4b36      	ldr	r3, [pc, #216]	; (800550c <HAL_I2S_Init+0x27c>)
 8005432:	e001      	b.n	8005438 <HAL_I2S_Init+0x1a8>
 8005434:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6812      	ldr	r2, [r2, #0]
 800543e:	4932      	ldr	r1, [pc, #200]	; (8005508 <HAL_I2S_Init+0x278>)
 8005440:	428a      	cmp	r2, r1
 8005442:	d101      	bne.n	8005448 <HAL_I2S_Init+0x1b8>
 8005444:	4a31      	ldr	r2, [pc, #196]	; (800550c <HAL_I2S_Init+0x27c>)
 8005446:	e001      	b.n	800544c <HAL_I2S_Init+0x1bc>
 8005448:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800544c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005450:	f023 030f 	bic.w	r3, r3, #15
 8005454:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a2b      	ldr	r2, [pc, #172]	; (8005508 <HAL_I2S_Init+0x278>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d101      	bne.n	8005464 <HAL_I2S_Init+0x1d4>
 8005460:	4b2a      	ldr	r3, [pc, #168]	; (800550c <HAL_I2S_Init+0x27c>)
 8005462:	e001      	b.n	8005468 <HAL_I2S_Init+0x1d8>
 8005464:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005468:	2202      	movs	r2, #2
 800546a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a25      	ldr	r2, [pc, #148]	; (8005508 <HAL_I2S_Init+0x278>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d101      	bne.n	800547a <HAL_I2S_Init+0x1ea>
 8005476:	4b25      	ldr	r3, [pc, #148]	; (800550c <HAL_I2S_Init+0x27c>)
 8005478:	e001      	b.n	800547e <HAL_I2S_Init+0x1ee>
 800547a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800548a:	d003      	beq.n	8005494 <HAL_I2S_Init+0x204>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d103      	bne.n	800549c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005498:	613b      	str	r3, [r7, #16]
 800549a:	e001      	b.n	80054a0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800549c:	2300      	movs	r3, #0
 800549e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80054aa:	4313      	orrs	r3, r2
 80054ac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80054b4:	4313      	orrs	r3, r2
 80054b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80054be:	4313      	orrs	r3, r2
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	897b      	ldrh	r3, [r7, #10]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054cc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a0d      	ldr	r2, [pc, #52]	; (8005508 <HAL_I2S_Init+0x278>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d101      	bne.n	80054dc <HAL_I2S_Init+0x24c>
 80054d8:	4b0c      	ldr	r3, [pc, #48]	; (800550c <HAL_I2S_Init+0x27c>)
 80054da:	e001      	b.n	80054e0 <HAL_I2S_Init+0x250>
 80054dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054e0:	897a      	ldrh	r2, [r7, #10]
 80054e2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3720      	adds	r7, #32
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	08005815 	.word	0x08005815
 8005500:	cccccccd 	.word	0xcccccccd
 8005504:	08005929 	.word	0x08005929
 8005508:	40003800 	.word	0x40003800
 800550c:	40003400 	.word	0x40003400

08005510 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	4613      	mov	r3, r2
 800551c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <HAL_I2S_Receive_DMA+0x1a>
 8005524:	88fb      	ldrh	r3, [r7, #6]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e0a1      	b.n	8005672 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b01      	cmp	r3, #1
 8005538:	d101      	bne.n	800553e <HAL_I2S_Receive_DMA+0x2e>
 800553a:	2302      	movs	r3, #2
 800553c:	e099      	b.n	8005672 <HAL_I2S_Receive_DMA+0x162>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b01      	cmp	r3, #1
 8005550:	d005      	beq.n	800555e <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800555a:	2302      	movs	r3, #2
 800555c:	e089      	b.n	8005672 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2204      	movs	r2, #4
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b03      	cmp	r3, #3
 8005582:	d002      	beq.n	800558a <HAL_I2S_Receive_DMA+0x7a>
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2b05      	cmp	r3, #5
 8005588:	d10a      	bne.n	80055a0 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 800558a:	88fb      	ldrh	r3, [r7, #6]
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8005594:	88fb      	ldrh	r3, [r7, #6]
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	865a      	strh	r2, [r3, #50]	; 0x32
 800559e:	e005      	b.n	80055ac <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	88fa      	ldrh	r2, [r7, #6]
 80055a4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	88fa      	ldrh	r2, [r7, #6]
 80055aa:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b0:	4a32      	ldr	r2, [pc, #200]	; (800567c <HAL_I2S_Receive_DMA+0x16c>)
 80055b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b8:	4a31      	ldr	r2, [pc, #196]	; (8005680 <HAL_I2S_Receive_DMA+0x170>)
 80055ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c0:	4a30      	ldr	r2, [pc, #192]	; (8005684 <HAL_I2S_Receive_DMA+0x174>)
 80055c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055d2:	d10a      	bne.n	80055ea <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80055d4:	2300      	movs	r3, #0
 80055d6:	613b      	str	r3, [r7, #16]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	613b      	str	r3, [r7, #16]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	330c      	adds	r3, #12
 80055f4:	4619      	mov	r1, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005600:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005602:	f7ff f9e7 	bl	80049d4 <HAL_DMA_Start_IT>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00f      	beq.n	800562c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005610:	f043 0208 	orr.w	r2, r3, #8
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e022      	b.n	8005672 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005636:	2b00      	cmp	r3, #0
 8005638:	d107      	bne.n	800564a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69da      	ldr	r2, [r3, #28]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005648:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d107      	bne.n	8005668 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	080056f3 	.word	0x080056f3
 8005680:	080056b1 	.word	0x080056b1
 8005684:	0800570f 	.word	0x0800570f

08005688 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10e      	bne.n	80056e4 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f7fe fb75 	bl	8003dd4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80056ea:	bf00      	nop
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7fe fb57 	bl	8003db4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005706:	bf00      	nop
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0203 	bic.w	r2, r2, #3
 800572a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005744:	f043 0208 	orr.w	r2, r3, #8
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f7ff ffa5 	bl	800569c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b082      	sub	sp, #8
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	881a      	ldrh	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	1c9a      	adds	r2, r3, #2
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577c:	b29b      	uxth	r3, r3
 800577e:	3b01      	subs	r3, #1
 8005780:	b29a      	uxth	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578a:	b29b      	uxth	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10e      	bne.n	80057ae <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800579e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff ff6d 	bl	8005688 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80057ae:	bf00      	nop
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b082      	sub	sp, #8
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	b292      	uxth	r2, r2
 80057ca:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	1c9a      	adds	r2, r3, #2
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80057da:	b29b      	uxth	r3, r3
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10e      	bne.n	800580c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80057fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7fe fae4 	bl	8003dd4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800580c:	bf00      	nop
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b04      	cmp	r3, #4
 800582e:	d13a      	bne.n	80058a6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b01      	cmp	r3, #1
 8005838:	d109      	bne.n	800584e <I2S_IRQHandler+0x3a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005844:	2b40      	cmp	r3, #64	; 0x40
 8005846:	d102      	bne.n	800584e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff ffb4 	bl	80057b6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005854:	2b40      	cmp	r3, #64	; 0x40
 8005856:	d126      	bne.n	80058a6 <I2S_IRQHandler+0x92>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b20      	cmp	r3, #32
 8005864:	d11f      	bne.n	80058a6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005874:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005876:	2300      	movs	r3, #0
 8005878:	613b      	str	r3, [r7, #16]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	613b      	str	r3, [r7, #16]
 800588a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005898:	f043 0202 	orr.w	r2, r3, #2
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff fefb 	bl	800569c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d136      	bne.n	8005920 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d109      	bne.n	80058d0 <I2S_IRQHandler+0xbc>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c6:	2b80      	cmp	r3, #128	; 0x80
 80058c8:	d102      	bne.n	80058d0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7ff ff45 	bl	800575a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b08      	cmp	r3, #8
 80058d8:	d122      	bne.n	8005920 <I2S_IRQHandler+0x10c>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d11b      	bne.n	8005920 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058f6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80058f8:	2300      	movs	r3, #0
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005912:	f043 0204 	orr.w	r2, r3, #4
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff febe 	bl	800569c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005920:	bf00      	nop
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b088      	sub	sp, #32
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4aa2      	ldr	r2, [pc, #648]	; (8005bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d101      	bne.n	8005946 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005942:	4ba2      	ldr	r3, [pc, #648]	; (8005bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005944:	e001      	b.n	800594a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005946:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a9b      	ldr	r2, [pc, #620]	; (8005bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d101      	bne.n	8005964 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005960:	4b9a      	ldr	r3, [pc, #616]	; (8005bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005962:	e001      	b.n	8005968 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005964:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005974:	d004      	beq.n	8005980 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f040 8099 	bne.w	8005ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b02      	cmp	r3, #2
 8005988:	d107      	bne.n	800599a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f925 	bl	8005be4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d107      	bne.n	80059b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f9c8 	bl	8005d44 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ba:	2b40      	cmp	r3, #64	; 0x40
 80059bc:	d13a      	bne.n	8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d035      	beq.n	8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a7e      	ldr	r2, [pc, #504]	; (8005bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d101      	bne.n	80059d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80059d2:	4b7e      	ldr	r3, [pc, #504]	; (8005bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80059d4:	e001      	b.n	80059da <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80059d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4979      	ldr	r1, [pc, #484]	; (8005bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80059e2:	428b      	cmp	r3, r1
 80059e4:	d101      	bne.n	80059ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80059e6:	4b79      	ldr	r3, [pc, #484]	; (8005bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80059e8:	e001      	b.n	80059ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80059ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80059f2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a02:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a26:	f043 0202 	orr.w	r2, r3, #2
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7ff fe34 	bl	800569c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	2b08      	cmp	r3, #8
 8005a3c:	f040 80be 	bne.w	8005bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 80b8 	beq.w	8005bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a5a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a59      	ldr	r2, [pc, #356]	; (8005bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d101      	bne.n	8005a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005a66:	4b59      	ldr	r3, [pc, #356]	; (8005bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005a68:	e001      	b.n	8005a6e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005a6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4954      	ldr	r1, [pc, #336]	; (8005bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005a76:	428b      	cmp	r3, r1
 8005a78:	d101      	bne.n	8005a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005a7a:	4b54      	ldr	r3, [pc, #336]	; (8005bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005a7c:	e001      	b.n	8005a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005a7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a86:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60bb      	str	r3, [r7, #8]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60bb      	str	r3, [r7, #8]
 8005a94:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa2:	f043 0204 	orr.w	r2, r3, #4
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff fdf6 	bl	800569c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ab0:	e084      	b.n	8005bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d107      	bne.n	8005acc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f8be 	bl	8005c48 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d107      	bne.n	8005ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f8fd 	bl	8005ce0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aec:	2b40      	cmp	r3, #64	; 0x40
 8005aee:	d12f      	bne.n	8005b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	f003 0320 	and.w	r3, r3, #32
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d02a      	beq.n	8005b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b08:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a2e      	ldr	r2, [pc, #184]	; (8005bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d101      	bne.n	8005b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005b14:	4b2d      	ldr	r3, [pc, #180]	; (8005bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005b16:	e001      	b.n	8005b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005b18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4929      	ldr	r1, [pc, #164]	; (8005bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005b24:	428b      	cmp	r3, r1
 8005b26:	d101      	bne.n	8005b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005b28:	4b28      	ldr	r3, [pc, #160]	; (8005bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005b2a:	e001      	b.n	8005b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005b2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b34:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b42:	f043 0202 	orr.w	r2, r3, #2
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff fda6 	bl	800569c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	f003 0308 	and.w	r3, r3, #8
 8005b56:	2b08      	cmp	r3, #8
 8005b58:	d131      	bne.n	8005bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d02c      	beq.n	8005bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a17      	ldr	r2, [pc, #92]	; (8005bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d101      	bne.n	8005b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005b6e:	4b17      	ldr	r3, [pc, #92]	; (8005bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005b70:	e001      	b.n	8005b76 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005b72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4912      	ldr	r1, [pc, #72]	; (8005bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005b7e:	428b      	cmp	r3, r1
 8005b80:	d101      	bne.n	8005b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005b82:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005b84:	e001      	b.n	8005b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005b86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b8e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b9e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bac:	f043 0204 	orr.w	r2, r3, #4
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff fd71 	bl	800569c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005bba:	e000      	b.n	8005bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005bbc:	bf00      	nop
}
 8005bbe:	bf00      	nop
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	40003800 	.word	0x40003800
 8005bcc:	40003400 	.word	0x40003400

08005bd0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	1c99      	adds	r1, r3, #2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6251      	str	r1, [r2, #36]	; 0x24
 8005bf6:	881a      	ldrh	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d113      	bne.n	8005c3e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c24:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d106      	bne.n	8005c3e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff ffc9 	bl	8005bd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c3e:	bf00      	nop
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	1c99      	adds	r1, r3, #2
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6251      	str	r1, [r2, #36]	; 0x24
 8005c5a:	8819      	ldrh	r1, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a1d      	ldr	r2, [pc, #116]	; (8005cd8 <I2SEx_TxISR_I2SExt+0x90>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d101      	bne.n	8005c6a <I2SEx_TxISR_I2SExt+0x22>
 8005c66:	4b1d      	ldr	r3, [pc, #116]	; (8005cdc <I2SEx_TxISR_I2SExt+0x94>)
 8005c68:	e001      	b.n	8005c6e <I2SEx_TxISR_I2SExt+0x26>
 8005c6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c6e:	460a      	mov	r2, r1
 8005c70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d121      	bne.n	8005cce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a12      	ldr	r2, [pc, #72]	; (8005cd8 <I2SEx_TxISR_I2SExt+0x90>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d101      	bne.n	8005c98 <I2SEx_TxISR_I2SExt+0x50>
 8005c94:	4b11      	ldr	r3, [pc, #68]	; (8005cdc <I2SEx_TxISR_I2SExt+0x94>)
 8005c96:	e001      	b.n	8005c9c <I2SEx_TxISR_I2SExt+0x54>
 8005c98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	490d      	ldr	r1, [pc, #52]	; (8005cd8 <I2SEx_TxISR_I2SExt+0x90>)
 8005ca4:	428b      	cmp	r3, r1
 8005ca6:	d101      	bne.n	8005cac <I2SEx_TxISR_I2SExt+0x64>
 8005ca8:	4b0c      	ldr	r3, [pc, #48]	; (8005cdc <I2SEx_TxISR_I2SExt+0x94>)
 8005caa:	e001      	b.n	8005cb0 <I2SEx_TxISR_I2SExt+0x68>
 8005cac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cb0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cb4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d106      	bne.n	8005cce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff ff81 	bl	8005bd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40003800 	.word	0x40003800
 8005cdc:	40003400 	.word	0x40003400

08005ce0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68d8      	ldr	r0, [r3, #12]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	1c99      	adds	r1, r3, #2
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005cf8:	b282      	uxth	r2, r0
 8005cfa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d113      	bne.n	8005d3c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d22:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d106      	bne.n	8005d3c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff ff4a 	bl	8005bd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d3c:	bf00      	nop
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a20      	ldr	r2, [pc, #128]	; (8005dd4 <I2SEx_RxISR_I2SExt+0x90>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d101      	bne.n	8005d5a <I2SEx_RxISR_I2SExt+0x16>
 8005d56:	4b20      	ldr	r3, [pc, #128]	; (8005dd8 <I2SEx_RxISR_I2SExt+0x94>)
 8005d58:	e001      	b.n	8005d5e <I2SEx_RxISR_I2SExt+0x1a>
 8005d5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d5e:	68d8      	ldr	r0, [r3, #12]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	1c99      	adds	r1, r3, #2
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005d6a:	b282      	uxth	r2, r0
 8005d6c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d121      	bne.n	8005dca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a12      	ldr	r2, [pc, #72]	; (8005dd4 <I2SEx_RxISR_I2SExt+0x90>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d101      	bne.n	8005d94 <I2SEx_RxISR_I2SExt+0x50>
 8005d90:	4b11      	ldr	r3, [pc, #68]	; (8005dd8 <I2SEx_RxISR_I2SExt+0x94>)
 8005d92:	e001      	b.n	8005d98 <I2SEx_RxISR_I2SExt+0x54>
 8005d94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	490d      	ldr	r1, [pc, #52]	; (8005dd4 <I2SEx_RxISR_I2SExt+0x90>)
 8005da0:	428b      	cmp	r3, r1
 8005da2:	d101      	bne.n	8005da8 <I2SEx_RxISR_I2SExt+0x64>
 8005da4:	4b0c      	ldr	r3, [pc, #48]	; (8005dd8 <I2SEx_RxISR_I2SExt+0x94>)
 8005da6:	e001      	b.n	8005dac <I2SEx_RxISR_I2SExt+0x68>
 8005da8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005db0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d106      	bne.n	8005dca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff ff03 	bl	8005bd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005dca:	bf00      	nop
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	40003800 	.word	0x40003800
 8005dd8:	40003400 	.word	0x40003400

08005ddc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005de8:	2300      	movs	r3, #0
 8005dea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d13e      	bne.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005dfa:	4b23      	ldr	r3, [pc, #140]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d005      	beq.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d12f      	bne.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e10:	4b1e      	ldr	r3, [pc, #120]	; (8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e12:	617b      	str	r3, [r7, #20]
          break;
 8005e14:	e02f      	b.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005e16:	4b1c      	ldr	r3, [pc, #112]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e22:	d108      	bne.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e24:	4b18      	ldr	r3, [pc, #96]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e2c:	4a18      	ldr	r2, [pc, #96]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	e007      	b.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e3e:	4a15      	ldr	r2, [pc, #84]	; (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e44:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005e46:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e4c:	099b      	lsrs	r3, r3, #6
 8005e4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	fb02 f303 	mul.w	r3, r2, r3
 8005e58:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005e5a:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e60:	0f1b      	lsrs	r3, r3, #28
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6c:	617b      	str	r3, [r7, #20]
          break;
 8005e6e:	e002      	b.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	617b      	str	r3, [r7, #20]
          break;
 8005e74:	bf00      	nop
        }
      }
      break;
 8005e76:	bf00      	nop
    }
  }
  return frequency;
 8005e78:	697b      	ldr	r3, [r7, #20]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	40023800 	.word	0x40023800
 8005e8c:	00bb8000 	.word	0x00bb8000
 8005e90:	007a1200 	.word	0x007a1200
 8005e94:	00f42400 	.word	0x00f42400

08005e98 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8005ea0:	4b05      	ldr	r3, [pc, #20]	; (8005eb8 <LL_EXTI_EnableIT_0_31+0x20>)
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	4904      	ldr	r1, [pc, #16]	; (8005eb8 <LL_EXTI_EnableIT_0_31+0x20>)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	600b      	str	r3, [r1, #0]
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	40013c00 	.word	0x40013c00

08005ebc <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8005ec4:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <LL_EXTI_DisableIT_0_31+0x24>)
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	43db      	mvns	r3, r3
 8005ecc:	4904      	ldr	r1, [pc, #16]	; (8005ee0 <LL_EXTI_DisableIT_0_31+0x24>)
 8005ece:	4013      	ands	r3, r2
 8005ed0:	600b      	str	r3, [r1, #0]
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40013c00 	.word	0x40013c00

08005ee4 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8005eec:	4b05      	ldr	r3, [pc, #20]	; (8005f04 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	4904      	ldr	r1, [pc, #16]	; (8005f04 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	604b      	str	r3, [r1, #4]

}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	40013c00 	.word	0x40013c00

08005f08 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8005f10:	4b06      	ldr	r3, [pc, #24]	; (8005f2c <LL_EXTI_DisableEvent_0_31+0x24>)
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	43db      	mvns	r3, r3
 8005f18:	4904      	ldr	r1, [pc, #16]	; (8005f2c <LL_EXTI_DisableEvent_0_31+0x24>)
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	604b      	str	r3, [r1, #4]
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	40013c00 	.word	0x40013c00

08005f30 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8005f38:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	4904      	ldr	r1, [pc, #16]	; (8005f50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	608b      	str	r3, [r1, #8]

}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	40013c00 	.word	0x40013c00

08005f54 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8005f5c:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	43db      	mvns	r3, r3
 8005f64:	4904      	ldr	r1, [pc, #16]	; (8005f78 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005f66:	4013      	ands	r3, r2
 8005f68:	608b      	str	r3, [r1, #8]

}
 8005f6a:	bf00      	nop
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40013c00 	.word	0x40013c00

08005f7c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8005f84:	4b05      	ldr	r3, [pc, #20]	; (8005f9c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005f86:	68da      	ldr	r2, [r3, #12]
 8005f88:	4904      	ldr	r1, [pc, #16]	; (8005f9c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60cb      	str	r3, [r1, #12]
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	40013c00 	.word	0x40013c00

08005fa0 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8005fa8:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	43db      	mvns	r3, r3
 8005fb0:	4904      	ldr	r1, [pc, #16]	; (8005fc4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	60cb      	str	r3, [r1, #12]
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40013c00 	.word	0x40013c00

08005fc8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	791b      	ldrb	r3, [r3, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d065      	beq.n	80060a8 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d06c      	beq.n	80060be <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	795b      	ldrb	r3, [r3, #5]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d01c      	beq.n	8006026 <LL_EXTI_Init+0x5e>
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	dc25      	bgt.n	800603c <LL_EXTI_Init+0x74>
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <LL_EXTI_Init+0x32>
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d00b      	beq.n	8006010 <LL_EXTI_Init+0x48>
 8005ff8:	e020      	b.n	800603c <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff ff82 	bl	8005f08 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff ff45 	bl	8005e98 <LL_EXTI_EnableIT_0_31>
          break;
 800600e:	e018      	b.n	8006042 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff ff51 	bl	8005ebc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff ff60 	bl	8005ee4 <LL_EXTI_EnableEvent_0_31>
          break;
 8006024:	e00d      	b.n	8006042 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f7ff ff34 	bl	8005e98 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff ff55 	bl	8005ee4 <LL_EXTI_EnableEvent_0_31>
          break;
 800603a:	e002      	b.n	8006042 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	73fb      	strb	r3, [r7, #15]
          break;
 8006040:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	799b      	ldrb	r3, [r3, #6]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d039      	beq.n	80060be <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	799b      	ldrb	r3, [r3, #6]
 800604e:	2b03      	cmp	r3, #3
 8006050:	d01c      	beq.n	800608c <LL_EXTI_Init+0xc4>
 8006052:	2b03      	cmp	r3, #3
 8006054:	dc25      	bgt.n	80060a2 <LL_EXTI_Init+0xda>
 8006056:	2b01      	cmp	r3, #1
 8006058:	d002      	beq.n	8006060 <LL_EXTI_Init+0x98>
 800605a:	2b02      	cmp	r3, #2
 800605c:	d00b      	beq.n	8006076 <LL_EXTI_Init+0xae>
 800605e:	e020      	b.n	80060a2 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff ff9b 	bl	8005fa0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f7ff ff5e 	bl	8005f30 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8006074:	e024      	b.n	80060c0 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff ff6a 	bl	8005f54 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4618      	mov	r0, r3
 8006086:	f7ff ff79 	bl	8005f7c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800608a:	e019      	b.n	80060c0 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4618      	mov	r0, r3
 8006092:	f7ff ff4d 	bl	8005f30 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f7ff ff6e 	bl	8005f7c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80060a0:	e00e      	b.n	80060c0 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	73fb      	strb	r3, [r7, #15]
            break;
 80060a6:	e00b      	b.n	80060c0 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff ff05 	bl	8005ebc <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff ff26 	bl	8005f08 <LL_EXTI_DisableEvent_0_31>
 80060bc:	e000      	b.n	80060c0 <LL_EXTI_Init+0xf8>
      }
 80060be:	bf00      	nop
  }
  return status;
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <LL_GPIO_SetPinMode>:
{
 80060ca:	b480      	push	{r7}
 80060cc:	b089      	sub	sp, #36	; 0x24
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	fa93 f3a3 	rbit	r3, r3
 80060e4:	613b      	str	r3, [r7, #16]
  return result;
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	fab3 f383 	clz	r3, r3
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	2103      	movs	r1, #3
 80060f2:	fa01 f303 	lsl.w	r3, r1, r3
 80060f6:	43db      	mvns	r3, r3
 80060f8:	401a      	ands	r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	fa93 f3a3 	rbit	r3, r3
 8006104:	61bb      	str	r3, [r7, #24]
  return result;
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	fab3 f383 	clz	r3, r3
 800610c:	b2db      	uxtb	r3, r3
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	fa01 f303 	lsl.w	r3, r1, r3
 8006116:	431a      	orrs	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	601a      	str	r2, [r3, #0]
}
 800611c:	bf00      	nop
 800611e:	3724      	adds	r7, #36	; 0x24
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <LL_GPIO_SetPinOutputType>:
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	43db      	mvns	r3, r3
 800613c:	401a      	ands	r2, r3
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	fb01 f303 	mul.w	r3, r1, r3
 8006146:	431a      	orrs	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	605a      	str	r2, [r3, #4]
}
 800614c:	bf00      	nop
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <LL_GPIO_SetPinSpeed>:
{
 8006158:	b480      	push	{r7}
 800615a:	b089      	sub	sp, #36	; 0x24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	fa93 f3a3 	rbit	r3, r3
 8006172:	613b      	str	r3, [r7, #16]
  return result;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	fab3 f383 	clz	r3, r3
 800617a:	b2db      	uxtb	r3, r3
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	2103      	movs	r1, #3
 8006180:	fa01 f303 	lsl.w	r3, r1, r3
 8006184:	43db      	mvns	r3, r3
 8006186:	401a      	ands	r2, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	fa93 f3a3 	rbit	r3, r3
 8006192:	61bb      	str	r3, [r7, #24]
  return result;
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	fab3 f383 	clz	r3, r3
 800619a:	b2db      	uxtb	r3, r3
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	fa01 f303 	lsl.w	r3, r1, r3
 80061a4:	431a      	orrs	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	609a      	str	r2, [r3, #8]
}
 80061aa:	bf00      	nop
 80061ac:	3724      	adds	r7, #36	; 0x24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <LL_GPIO_SetPinPull>:
{
 80061b6:	b480      	push	{r7}
 80061b8:	b089      	sub	sp, #36	; 0x24
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	fa93 f3a3 	rbit	r3, r3
 80061d0:	613b      	str	r3, [r7, #16]
  return result;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	fab3 f383 	clz	r3, r3
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	2103      	movs	r1, #3
 80061de:	fa01 f303 	lsl.w	r3, r1, r3
 80061e2:	43db      	mvns	r3, r3
 80061e4:	401a      	ands	r2, r3
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	fa93 f3a3 	rbit	r3, r3
 80061f0:	61bb      	str	r3, [r7, #24]
  return result;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	fab3 f383 	clz	r3, r3
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006202:	431a      	orrs	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	60da      	str	r2, [r3, #12]
}
 8006208:	bf00      	nop
 800620a:	3724      	adds	r7, #36	; 0x24
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <LL_GPIO_SetAFPin_0_7>:
{
 8006214:	b480      	push	{r7}
 8006216:	b089      	sub	sp, #36	; 0x24
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a1a      	ldr	r2, [r3, #32]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	fa93 f3a3 	rbit	r3, r3
 800622e:	613b      	str	r3, [r7, #16]
  return result;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	fab3 f383 	clz	r3, r3
 8006236:	b2db      	uxtb	r3, r3
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	210f      	movs	r1, #15
 800623c:	fa01 f303 	lsl.w	r3, r1, r3
 8006240:	43db      	mvns	r3, r3
 8006242:	401a      	ands	r2, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	fa93 f3a3 	rbit	r3, r3
 800624e:	61bb      	str	r3, [r7, #24]
  return result;
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	fab3 f383 	clz	r3, r3
 8006256:	b2db      	uxtb	r3, r3
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	fa01 f303 	lsl.w	r3, r1, r3
 8006260:	431a      	orrs	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	621a      	str	r2, [r3, #32]
}
 8006266:	bf00      	nop
 8006268:	3724      	adds	r7, #36	; 0x24
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <LL_GPIO_SetAFPin_8_15>:
{
 8006272:	b480      	push	{r7}
 8006274:	b089      	sub	sp, #36	; 0x24
 8006276:	af00      	add	r7, sp, #0
 8006278:	60f8      	str	r0, [r7, #12]
 800627a:	60b9      	str	r1, [r7, #8]
 800627c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	0a1b      	lsrs	r3, r3, #8
 8006286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	fa93 f3a3 	rbit	r3, r3
 800628e:	613b      	str	r3, [r7, #16]
  return result;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	fab3 f383 	clz	r3, r3
 8006296:	b2db      	uxtb	r3, r3
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	210f      	movs	r1, #15
 800629c:	fa01 f303 	lsl.w	r3, r1, r3
 80062a0:	43db      	mvns	r3, r3
 80062a2:	401a      	ands	r2, r3
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	0a1b      	lsrs	r3, r3, #8
 80062a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	fa93 f3a3 	rbit	r3, r3
 80062b0:	61bb      	str	r3, [r7, #24]
  return result;
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	fab3 f383 	clz	r3, r3
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	fa01 f303 	lsl.w	r3, r1, r3
 80062c2:	431a      	orrs	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80062c8:	bf00      	nop
 80062ca:	3724      	adds	r7, #36	; 0x24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b088      	sub	sp, #32
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80062de:	2300      	movs	r3, #0
 80062e0:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	fa93 f3a3 	rbit	r3, r3
 80062f2:	613b      	str	r3, [r7, #16]
  return result;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	fab3 f383 	clz	r3, r3
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80062fe:	e050      	b.n	80063a2 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	2101      	movs	r1, #1
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	fa01 f303 	lsl.w	r3, r1, r3
 800630c:	4013      	ands	r3, r2
 800630e:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d042      	beq.n	800639c <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d003      	beq.n	8006326 <LL_GPIO_Init+0x52>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d10d      	bne.n	8006342 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	461a      	mov	r2, r3
 800632c:	69b9      	ldr	r1, [r7, #24]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff ff12 	bl	8006158 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	461a      	mov	r2, r3
 800633a:	69b9      	ldr	r1, [r7, #24]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7ff fef3 	bl	8006128 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	461a      	mov	r2, r3
 8006348:	69b9      	ldr	r1, [r7, #24]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7ff ff33 	bl	80061b6 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2b02      	cmp	r3, #2
 8006356:	d11a      	bne.n	800638e <LL_GPIO_Init+0xba>
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	fa93 f3a3 	rbit	r3, r3
 8006362:	60bb      	str	r3, [r7, #8]
  return result;
 8006364:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006366:	fab3 f383 	clz	r3, r3
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b07      	cmp	r3, #7
 800636e:	d807      	bhi.n	8006380 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	461a      	mov	r2, r3
 8006376:	69b9      	ldr	r1, [r7, #24]
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7ff ff4b 	bl	8006214 <LL_GPIO_SetAFPin_0_7>
 800637e:	e006      	b.n	800638e <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	461a      	mov	r2, r3
 8006386:	69b9      	ldr	r1, [r7, #24]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff ff72 	bl	8006272 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	461a      	mov	r2, r3
 8006394:	69b9      	ldr	r1, [r7, #24]
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7ff fe97 	bl	80060ca <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	3301      	adds	r3, #1
 80063a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	fa22 f303 	lsr.w	r3, r2, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1a7      	bne.n	8006300 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3720      	adds	r7, #32
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <LL_RCC_GetSysClkSource>:
{
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80063c0:	4b04      	ldr	r3, [pc, #16]	; (80063d4 <LL_RCC_GetSysClkSource+0x18>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f003 030c 	and.w	r3, r3, #12
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	40023800 	.word	0x40023800

080063d8 <LL_RCC_GetAHBPrescaler>:
{
 80063d8:	b480      	push	{r7}
 80063da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80063dc:	4b04      	ldr	r3, [pc, #16]	; (80063f0 <LL_RCC_GetAHBPrescaler+0x18>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	40023800 	.word	0x40023800

080063f4 <LL_RCC_GetAPB1Prescaler>:
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80063f8:	4b04      	ldr	r3, [pc, #16]	; (800640c <LL_RCC_GetAPB1Prescaler+0x18>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8006400:	4618      	mov	r0, r3
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	40023800 	.word	0x40023800

08006410 <LL_RCC_GetAPB2Prescaler>:
{
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006414:	4b04      	ldr	r3, [pc, #16]	; (8006428 <LL_RCC_GetAPB2Prescaler+0x18>)
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800641c:	4618      	mov	r0, r3
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	40023800 	.word	0x40023800

0800642c <LL_RCC_PLL_GetMainSource>:
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006430:	4b04      	ldr	r3, [pc, #16]	; (8006444 <LL_RCC_PLL_GetMainSource+0x18>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8006438:	4618      	mov	r0, r3
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	40023800 	.word	0x40023800

08006448 <LL_RCC_PLL_GetN>:
{
 8006448:	b480      	push	{r7}
 800644a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800644c:	4b04      	ldr	r3, [pc, #16]	; (8006460 <LL_RCC_PLL_GetN+0x18>)
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	099b      	lsrs	r3, r3, #6
 8006452:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8006456:	4618      	mov	r0, r3
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	40023800 	.word	0x40023800

08006464 <LL_RCC_PLL_GetP>:
{
 8006464:	b480      	push	{r7}
 8006466:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8006468:	4b04      	ldr	r3, [pc, #16]	; (800647c <LL_RCC_PLL_GetP+0x18>)
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8006470:	4618      	mov	r0, r3
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40023800 	.word	0x40023800

08006480 <LL_RCC_PLL_GetDivider>:
{
 8006480:	b480      	push	{r7}
 8006482:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006484:	4b04      	ldr	r3, [pc, #16]	; (8006498 <LL_RCC_PLL_GetDivider+0x18>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800648c:	4618      	mov	r0, r3
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	40023800 	.word	0x40023800

0800649c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80064a4:	f000 f820 	bl	80064e8 <RCC_GetSystemClockFreq>
 80064a8:	4602      	mov	r2, r0
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 f840 	bl	8006538 <RCC_GetHCLKClockFreq>
 80064b8:	4602      	mov	r2, r0
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 f84e 	bl	8006564 <RCC_GetPCLK1ClockFreq>
 80064c8:	4602      	mov	r2, r0
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 f85a 	bl	800658c <RCC_GetPCLK2ClockFreq>
 80064d8:	4602      	mov	r2, r0
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	60da      	str	r2, [r3, #12]
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
	...

080064e8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80064f2:	f7ff ff63 	bl	80063bc <LL_RCC_GetSysClkSource>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d00c      	beq.n	8006516 <RCC_GetSystemClockFreq+0x2e>
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d80f      	bhi.n	8006520 <RCC_GetSystemClockFreq+0x38>
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <RCC_GetSystemClockFreq+0x22>
 8006504:	2b04      	cmp	r3, #4
 8006506:	d003      	beq.n	8006510 <RCC_GetSystemClockFreq+0x28>
 8006508:	e00a      	b.n	8006520 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800650a:	4b09      	ldr	r3, [pc, #36]	; (8006530 <RCC_GetSystemClockFreq+0x48>)
 800650c:	607b      	str	r3, [r7, #4]
      break;
 800650e:	e00a      	b.n	8006526 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006510:	4b08      	ldr	r3, [pc, #32]	; (8006534 <RCC_GetSystemClockFreq+0x4c>)
 8006512:	607b      	str	r3, [r7, #4]
      break;
 8006514:	e007      	b.n	8006526 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8006516:	2008      	movs	r0, #8
 8006518:	f000 f84c 	bl	80065b4 <RCC_PLL_GetFreqDomain_SYS>
 800651c:	6078      	str	r0, [r7, #4]
      break;
 800651e:	e002      	b.n	8006526 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8006520:	4b03      	ldr	r3, [pc, #12]	; (8006530 <RCC_GetSystemClockFreq+0x48>)
 8006522:	607b      	str	r3, [r7, #4]
      break;
 8006524:	bf00      	nop
  }

  return frequency;
 8006526:	687b      	ldr	r3, [r7, #4]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	00f42400 	.word	0x00f42400
 8006534:	007a1200 	.word	0x007a1200

08006538 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006540:	f7ff ff4a 	bl	80063d8 <LL_RCC_GetAHBPrescaler>
 8006544:	4603      	mov	r3, r0
 8006546:	091b      	lsrs	r3, r3, #4
 8006548:	f003 030f 	and.w	r3, r3, #15
 800654c:	4a04      	ldr	r2, [pc, #16]	; (8006560 <RCC_GetHCLKClockFreq+0x28>)
 800654e:	5cd3      	ldrb	r3, [r2, r3]
 8006550:	461a      	mov	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	40d3      	lsrs	r3, r2
}
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	0800f138 	.word	0x0800f138

08006564 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800656c:	f7ff ff42 	bl	80063f4 <LL_RCC_GetAPB1Prescaler>
 8006570:	4603      	mov	r3, r0
 8006572:	0a9b      	lsrs	r3, r3, #10
 8006574:	4a04      	ldr	r2, [pc, #16]	; (8006588 <RCC_GetPCLK1ClockFreq+0x24>)
 8006576:	5cd3      	ldrb	r3, [r2, r3]
 8006578:	461a      	mov	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	40d3      	lsrs	r3, r2
}
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	0800f148 	.word	0x0800f148

0800658c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006594:	f7ff ff3c 	bl	8006410 <LL_RCC_GetAPB2Prescaler>
 8006598:	4603      	mov	r3, r0
 800659a:	0b5b      	lsrs	r3, r3, #13
 800659c:	4a04      	ldr	r2, [pc, #16]	; (80065b0 <RCC_GetPCLK2ClockFreq+0x24>)
 800659e:	5cd3      	ldrb	r3, [r2, r3]
 80065a0:	461a      	mov	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	40d3      	lsrs	r3, r2
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	0800f148 	.word	0x0800f148

080065b4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80065b4:	b590      	push	{r4, r7, lr}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	2300      	movs	r3, #0
 80065c6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80065c8:	f7ff ff30 	bl	800642c <LL_RCC_PLL_GetMainSource>
 80065cc:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d004      	beq.n	80065de <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065da:	d003      	beq.n	80065e4 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80065dc:	e005      	b.n	80065ea <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80065de:	4b12      	ldr	r3, [pc, #72]	; (8006628 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80065e0:	617b      	str	r3, [r7, #20]
      break;
 80065e2:	e005      	b.n	80065f0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80065e4:	4b11      	ldr	r3, [pc, #68]	; (800662c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80065e6:	617b      	str	r3, [r7, #20]
      break;
 80065e8:	e002      	b.n	80065f0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80065ea:	4b0f      	ldr	r3, [pc, #60]	; (8006628 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80065ec:	617b      	str	r3, [r7, #20]
      break;
 80065ee:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b08      	cmp	r3, #8
 80065f4:	d113      	bne.n	800661e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80065f6:	f7ff ff43 	bl	8006480 <LL_RCC_PLL_GetDivider>
 80065fa:	4602      	mov	r2, r0
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	fbb3 f4f2 	udiv	r4, r3, r2
 8006602:	f7ff ff21 	bl	8006448 <LL_RCC_PLL_GetN>
 8006606:	4603      	mov	r3, r0
 8006608:	fb03 f404 	mul.w	r4, r3, r4
 800660c:	f7ff ff2a 	bl	8006464 <LL_RCC_PLL_GetP>
 8006610:	4603      	mov	r3, r0
 8006612:	0c1b      	lsrs	r3, r3, #16
 8006614:	3301      	adds	r3, #1
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	fbb4 f3f3 	udiv	r3, r4, r3
 800661c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800661e:	693b      	ldr	r3, [r7, #16]
}
 8006620:	4618      	mov	r0, r3
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	bd90      	pop	{r4, r7, pc}
 8006628:	00f42400 	.word	0x00f42400
 800662c:	007a1200 	.word	0x007a1200

08006630 <LL_TIM_SetPrescaler>:
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <LL_TIM_SetAutoReload>:
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <LL_TIM_SetRepetitionCounter>:
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <LL_TIM_OC_SetCompareCH1>:
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <LL_TIM_OC_SetCompareCH2>:
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	639a      	str	r2, [r3, #56]	; 0x38
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <LL_TIM_OC_SetCompareCH3>:
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	683a      	ldr	r2, [r7, #0]
 80066ca:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <LL_TIM_OC_SetCompareCH4>:
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	f043 0201 	orr.w	r2, r3, #1
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	615a      	str	r2, [r3, #20]
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a3d      	ldr	r2, [pc, #244]	; (800681c <LL_TIM_Init+0x108>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d013      	beq.n	8006754 <LL_TIM_Init+0x40>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006732:	d00f      	beq.n	8006754 <LL_TIM_Init+0x40>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a3a      	ldr	r2, [pc, #232]	; (8006820 <LL_TIM_Init+0x10c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d00b      	beq.n	8006754 <LL_TIM_Init+0x40>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a39      	ldr	r2, [pc, #228]	; (8006824 <LL_TIM_Init+0x110>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d007      	beq.n	8006754 <LL_TIM_Init+0x40>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a38      	ldr	r2, [pc, #224]	; (8006828 <LL_TIM_Init+0x114>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d003      	beq.n	8006754 <LL_TIM_Init+0x40>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a37      	ldr	r2, [pc, #220]	; (800682c <LL_TIM_Init+0x118>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d106      	bne.n	8006762 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a2d      	ldr	r2, [pc, #180]	; (800681c <LL_TIM_Init+0x108>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d02b      	beq.n	80067c2 <LL_TIM_Init+0xae>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006770:	d027      	beq.n	80067c2 <LL_TIM_Init+0xae>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a2a      	ldr	r2, [pc, #168]	; (8006820 <LL_TIM_Init+0x10c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d023      	beq.n	80067c2 <LL_TIM_Init+0xae>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a29      	ldr	r2, [pc, #164]	; (8006824 <LL_TIM_Init+0x110>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d01f      	beq.n	80067c2 <LL_TIM_Init+0xae>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a28      	ldr	r2, [pc, #160]	; (8006828 <LL_TIM_Init+0x114>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d01b      	beq.n	80067c2 <LL_TIM_Init+0xae>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a27      	ldr	r2, [pc, #156]	; (800682c <LL_TIM_Init+0x118>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d017      	beq.n	80067c2 <LL_TIM_Init+0xae>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a26      	ldr	r2, [pc, #152]	; (8006830 <LL_TIM_Init+0x11c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d013      	beq.n	80067c2 <LL_TIM_Init+0xae>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a25      	ldr	r2, [pc, #148]	; (8006834 <LL_TIM_Init+0x120>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d00f      	beq.n	80067c2 <LL_TIM_Init+0xae>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a24      	ldr	r2, [pc, #144]	; (8006838 <LL_TIM_Init+0x124>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d00b      	beq.n	80067c2 <LL_TIM_Init+0xae>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a23      	ldr	r2, [pc, #140]	; (800683c <LL_TIM_Init+0x128>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d007      	beq.n	80067c2 <LL_TIM_Init+0xae>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a22      	ldr	r2, [pc, #136]	; (8006840 <LL_TIM_Init+0x12c>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d003      	beq.n	80067c2 <LL_TIM_Init+0xae>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a21      	ldr	r2, [pc, #132]	; (8006844 <LL_TIM_Init+0x130>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d106      	bne.n	80067d0 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	4619      	mov	r1, r3
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7ff ff35 	bl	800664c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff ff21 	bl	8006630 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a0a      	ldr	r2, [pc, #40]	; (800681c <LL_TIM_Init+0x108>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d003      	beq.n	80067fe <LL_TIM_Init+0xea>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a0c      	ldr	r2, [pc, #48]	; (800682c <LL_TIM_Init+0x118>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d105      	bne.n	800680a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff ff2f 	bl	8006668 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7ff ff72 	bl	80066f4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	40010000 	.word	0x40010000
 8006820:	40000400 	.word	0x40000400
 8006824:	40000800 	.word	0x40000800
 8006828:	40000c00 	.word	0x40000c00
 800682c:	40010400 	.word	0x40010400
 8006830:	40014000 	.word	0x40014000
 8006834:	40014400 	.word	0x40014400
 8006838:	40014800 	.word	0x40014800
 800683c:	40001800 	.word	0x40001800
 8006840:	40001c00 	.word	0x40001c00
 8006844:	40002000 	.word	0x40002000

08006848 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800685e:	d027      	beq.n	80068b0 <LL_TIM_OC_Init+0x68>
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006866:	d82a      	bhi.n	80068be <LL_TIM_OC_Init+0x76>
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800686e:	d018      	beq.n	80068a2 <LL_TIM_OC_Init+0x5a>
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006876:	d822      	bhi.n	80068be <LL_TIM_OC_Init+0x76>
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d003      	beq.n	8006886 <LL_TIM_OC_Init+0x3e>
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b10      	cmp	r3, #16
 8006882:	d007      	beq.n	8006894 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8006884:	e01b      	b.n	80068be <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 f81f 	bl	80068cc <OC1Config>
 800688e:	4603      	mov	r3, r0
 8006890:	75fb      	strb	r3, [r7, #23]
      break;
 8006892:	e015      	b.n	80068c0 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 f884 	bl	80069a4 <OC2Config>
 800689c:	4603      	mov	r3, r0
 800689e:	75fb      	strb	r3, [r7, #23]
      break;
 80068a0:	e00e      	b.n	80068c0 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 f8ed 	bl	8006a84 <OC3Config>
 80068aa:	4603      	mov	r3, r0
 80068ac:	75fb      	strb	r3, [r7, #23]
      break;
 80068ae:	e007      	b.n	80068c0 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80068b0:	6879      	ldr	r1, [r7, #4]
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f000 f956 	bl	8006b64 <OC4Config>
 80068b8:	4603      	mov	r3, r0
 80068ba:	75fb      	strb	r3, [r7, #23]
      break;
 80068bc:	e000      	b.n	80068c0 <LL_TIM_OC_Init+0x78>
      break;
 80068be:	bf00      	nop
  }

  return result;
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	f023 0201 	bic.w	r2, r3, #1
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f023 0202 	bic.w	r2, r3, #2
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f023 0201 	bic.w	r2, r3, #1
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	4313      	orrs	r3, r2
 8006924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a1c      	ldr	r2, [pc, #112]	; (800699c <OC1Config+0xd0>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d003      	beq.n	8006936 <OC1Config+0x6a>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a1b      	ldr	r2, [pc, #108]	; (80069a0 <OC1Config+0xd4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d11e      	bne.n	8006974 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f023 0208 	bic.w	r2, r3, #8
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4313      	orrs	r3, r2
 8006944:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f023 0204 	bic.w	r2, r3, #4
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	4313      	orrs	r3, r2
 8006962:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7ff fe7c 	bl	8006684 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	40010000 	.word	0x40010000
 80069a0:	40010400 	.word	0x40010400

080069a4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	f023 0210 	bic.w	r2, r3, #16
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	021b      	lsls	r3, r3, #8
 80069e0:	4313      	orrs	r3, r2
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f023 0220 	bic.w	r2, r3, #32
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	011b      	lsls	r3, r3, #4
 80069f0:	4313      	orrs	r3, r2
 80069f2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f023 0210 	bic.w	r2, r3, #16
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	4313      	orrs	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a1d      	ldr	r2, [pc, #116]	; (8006a7c <OC2Config+0xd8>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d003      	beq.n	8006a14 <OC2Config+0x70>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a1c      	ldr	r2, [pc, #112]	; (8006a80 <OC2Config+0xdc>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d11f      	bne.n	8006a54 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	019b      	lsls	r3, r3, #6
 8006a20:	4313      	orrs	r3, r2
 8006a22:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	019b      	lsls	r3, r3, #6
 8006a30:	4313      	orrs	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	4313      	orrs	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff fe1a 	bl	80066a0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	40010000 	.word	0x40010000
 8006a80:	40010400 	.word	0x40010400

08006a84 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0303 	bic.w	r3, r3, #3
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	021b      	lsls	r3, r3, #8
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	021b      	lsls	r3, r3, #8
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a1d      	ldr	r2, [pc, #116]	; (8006b5c <OC3Config+0xd8>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d003      	beq.n	8006af2 <OC3Config+0x6e>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a1c      	ldr	r2, [pc, #112]	; (8006b60 <OC3Config+0xdc>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d11f      	bne.n	8006b32 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	029b      	lsls	r3, r3, #10
 8006afe:	4313      	orrs	r3, r2
 8006b00:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	029b      	lsls	r3, r3, #10
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	011b      	lsls	r3, r3, #4
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	015b      	lsls	r3, r3, #5
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f7ff fdb9 	bl	80066bc <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	40010000 	.word	0x40010000
 8006b60:	40010400 	.word	0x40010400

08006b64 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	021b      	lsls	r3, r3, #8
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	031b      	lsls	r3, r3, #12
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	031b      	lsls	r3, r3, #12
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a11      	ldr	r2, [pc, #68]	; (8006c0c <OC4Config+0xa8>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d003      	beq.n	8006bd4 <OC4Config+0x70>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a10      	ldr	r2, [pc, #64]	; (8006c10 <OC4Config+0xac>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d107      	bne.n	8006be4 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	019b      	lsls	r3, r3, #6
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7ff fd6e 	bl	80066d8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	40010000 	.word	0x40010000
 8006c10:	40010400 	.word	0x40010400

08006c14 <LL_USART_IsEnabled>:
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c28:	bf0c      	ite	eq
 8006c2a:	2301      	moveq	r3, #1
 8006c2c:	2300      	movne	r3, #0
 8006c2e:	b2db      	uxtb	r3, r3
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <LL_USART_SetStopBitsLength>:
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	611a      	str	r2, [r3, #16]
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <LL_USART_SetHWFlowCtrl>:
{
 8006c62:	b480      	push	{r7}
 8006c64:	b083      	sub	sp, #12
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	431a      	orrs	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	615a      	str	r2, [r3, #20]
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <LL_USART_SetBaudRate>:
{
 8006c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8c:	b09f      	sub	sp, #124	; 0x7c
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6778      	str	r0, [r7, #116]	; 0x74
 8006c92:	6739      	str	r1, [r7, #112]	; 0x70
 8006c94:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c96:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c9e:	f040 80bc 	bne.w	8006e1a <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ca4:	461c      	mov	r4, r3
 8006ca6:	f04f 0500 	mov.w	r5, #0
 8006caa:	4622      	mov	r2, r4
 8006cac:	462b      	mov	r3, r5
 8006cae:	eb12 0a02 	adds.w	sl, r2, r2
 8006cb2:	eb43 0b03 	adc.w	fp, r3, r3
 8006cb6:	4652      	mov	r2, sl
 8006cb8:	465b      	mov	r3, fp
 8006cba:	1912      	adds	r2, r2, r4
 8006cbc:	eb45 0303 	adc.w	r3, r5, r3
 8006cc0:	f04f 0000 	mov.w	r0, #0
 8006cc4:	f04f 0100 	mov.w	r1, #0
 8006cc8:	00d9      	lsls	r1, r3, #3
 8006cca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006cce:	00d0      	lsls	r0, r2, #3
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	1911      	adds	r1, r2, r4
 8006cd6:	6639      	str	r1, [r7, #96]	; 0x60
 8006cd8:	416b      	adcs	r3, r5
 8006cda:	667b      	str	r3, [r7, #100]	; 0x64
 8006cdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f04f 0300 	mov.w	r3, #0
 8006ce4:	1891      	adds	r1, r2, r2
 8006ce6:	6339      	str	r1, [r7, #48]	; 0x30
 8006ce8:	415b      	adcs	r3, r3
 8006cea:	637b      	str	r3, [r7, #52]	; 0x34
 8006cec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006cf0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006cf4:	f7f9 ffb8 	bl	8000c68 <__aeabi_uldivmod>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4ba9      	ldr	r3, [pc, #676]	; (8006fa4 <LL_USART_SetBaudRate+0x31c>)
 8006cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	011b      	lsls	r3, r3, #4
 8006d08:	b29e      	uxth	r6, r3
 8006d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d0c:	461c      	mov	r4, r3
 8006d0e:	f04f 0500 	mov.w	r5, #0
 8006d12:	4622      	mov	r2, r4
 8006d14:	462b      	mov	r3, r5
 8006d16:	1891      	adds	r1, r2, r2
 8006d18:	62b9      	str	r1, [r7, #40]	; 0x28
 8006d1a:	415b      	adcs	r3, r3
 8006d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d22:	1912      	adds	r2, r2, r4
 8006d24:	eb45 0303 	adc.w	r3, r5, r3
 8006d28:	f04f 0000 	mov.w	r0, #0
 8006d2c:	f04f 0100 	mov.w	r1, #0
 8006d30:	00d9      	lsls	r1, r3, #3
 8006d32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d36:	00d0      	lsls	r0, r2, #3
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	1911      	adds	r1, r2, r4
 8006d3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d40:	416b      	adcs	r3, r5
 8006d42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d46:	461a      	mov	r2, r3
 8006d48:	f04f 0300 	mov.w	r3, #0
 8006d4c:	1891      	adds	r1, r2, r2
 8006d4e:	6239      	str	r1, [r7, #32]
 8006d50:	415b      	adcs	r3, r3
 8006d52:	627b      	str	r3, [r7, #36]	; 0x24
 8006d54:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d58:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006d5c:	f7f9 ff84 	bl	8000c68 <__aeabi_uldivmod>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4b8f      	ldr	r3, [pc, #572]	; (8006fa4 <LL_USART_SetBaudRate+0x31c>)
 8006d66:	fba3 1302 	umull	r1, r3, r3, r2
 8006d6a:	095b      	lsrs	r3, r3, #5
 8006d6c:	2164      	movs	r1, #100	; 0x64
 8006d6e:	fb01 f303 	mul.w	r3, r1, r3
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	3332      	adds	r3, #50	; 0x32
 8006d78:	4a8a      	ldr	r2, [pc, #552]	; (8006fa4 <LL_USART_SetBaudRate+0x31c>)
 8006d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7e:	095b      	lsrs	r3, r3, #5
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	4433      	add	r3, r6
 8006d8e:	b29e      	uxth	r6, r3
 8006d90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d92:	4618      	mov	r0, r3
 8006d94:	f04f 0100 	mov.w	r1, #0
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	1894      	adds	r4, r2, r2
 8006d9e:	61bc      	str	r4, [r7, #24]
 8006da0:	415b      	adcs	r3, r3
 8006da2:	61fb      	str	r3, [r7, #28]
 8006da4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006da8:	1812      	adds	r2, r2, r0
 8006daa:	eb41 0303 	adc.w	r3, r1, r3
 8006dae:	f04f 0400 	mov.w	r4, #0
 8006db2:	f04f 0500 	mov.w	r5, #0
 8006db6:	00dd      	lsls	r5, r3, #3
 8006db8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006dbc:	00d4      	lsls	r4, r2, #3
 8006dbe:	4622      	mov	r2, r4
 8006dc0:	462b      	mov	r3, r5
 8006dc2:	1814      	adds	r4, r2, r0
 8006dc4:	653c      	str	r4, [r7, #80]	; 0x50
 8006dc6:	414b      	adcs	r3, r1
 8006dc8:	657b      	str	r3, [r7, #84]	; 0x54
 8006dca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dcc:	461a      	mov	r2, r3
 8006dce:	f04f 0300 	mov.w	r3, #0
 8006dd2:	1891      	adds	r1, r2, r2
 8006dd4:	6139      	str	r1, [r7, #16]
 8006dd6:	415b      	adcs	r3, r3
 8006dd8:	617b      	str	r3, [r7, #20]
 8006dda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006dde:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006de2:	f7f9 ff41 	bl	8000c68 <__aeabi_uldivmod>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	4b6e      	ldr	r3, [pc, #440]	; (8006fa4 <LL_USART_SetBaudRate+0x31c>)
 8006dec:	fba3 1302 	umull	r1, r3, r3, r2
 8006df0:	095b      	lsrs	r3, r3, #5
 8006df2:	2164      	movs	r1, #100	; 0x64
 8006df4:	fb01 f303 	mul.w	r3, r1, r3
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	3332      	adds	r3, #50	; 0x32
 8006dfe:	4a69      	ldr	r2, [pc, #420]	; (8006fa4 <LL_USART_SetBaudRate+0x31c>)
 8006e00:	fba2 2303 	umull	r2, r3, r2, r3
 8006e04:	095b      	lsrs	r3, r3, #5
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	4433      	add	r3, r6
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	461a      	mov	r2, r3
 8006e14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e16:	609a      	str	r2, [r3, #8]
}
 8006e18:	e0be      	b.n	8006f98 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e1c:	461c      	mov	r4, r3
 8006e1e:	f04f 0500 	mov.w	r5, #0
 8006e22:	4622      	mov	r2, r4
 8006e24:	462b      	mov	r3, r5
 8006e26:	eb12 0802 	adds.w	r8, r2, r2
 8006e2a:	eb43 0903 	adc.w	r9, r3, r3
 8006e2e:	4642      	mov	r2, r8
 8006e30:	464b      	mov	r3, r9
 8006e32:	1912      	adds	r2, r2, r4
 8006e34:	eb45 0303 	adc.w	r3, r5, r3
 8006e38:	f04f 0000 	mov.w	r0, #0
 8006e3c:	f04f 0100 	mov.w	r1, #0
 8006e40:	00d9      	lsls	r1, r3, #3
 8006e42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e46:	00d0      	lsls	r0, r2, #3
 8006e48:	4602      	mov	r2, r0
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	1911      	adds	r1, r2, r4
 8006e4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e50:	416b      	adcs	r3, r5
 8006e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e56:	4618      	mov	r0, r3
 8006e58:	f04f 0100 	mov.w	r1, #0
 8006e5c:	f04f 0200 	mov.w	r2, #0
 8006e60:	f04f 0300 	mov.w	r3, #0
 8006e64:	008b      	lsls	r3, r1, #2
 8006e66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e6a:	0082      	lsls	r2, r0, #2
 8006e6c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006e70:	f7f9 fefa 	bl	8000c68 <__aeabi_uldivmod>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4b4a      	ldr	r3, [pc, #296]	; (8006fa4 <LL_USART_SetBaudRate+0x31c>)
 8006e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e7e:	095b      	lsrs	r3, r3, #5
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	011b      	lsls	r3, r3, #4
 8006e84:	b29e      	uxth	r6, r3
 8006e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f04f 0100 	mov.w	r1, #0
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	1894      	adds	r4, r2, r2
 8006e94:	60bc      	str	r4, [r7, #8]
 8006e96:	415b      	adcs	r3, r3
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e9e:	1812      	adds	r2, r2, r0
 8006ea0:	eb41 0303 	adc.w	r3, r1, r3
 8006ea4:	f04f 0400 	mov.w	r4, #0
 8006ea8:	f04f 0500 	mov.w	r5, #0
 8006eac:	00dd      	lsls	r5, r3, #3
 8006eae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006eb2:	00d4      	lsls	r4, r2, #3
 8006eb4:	4622      	mov	r2, r4
 8006eb6:	462b      	mov	r3, r5
 8006eb8:	1814      	adds	r4, r2, r0
 8006eba:	643c      	str	r4, [r7, #64]	; 0x40
 8006ebc:	414b      	adcs	r3, r1
 8006ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8006ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f04f 0100 	mov.w	r1, #0
 8006ec8:	f04f 0200 	mov.w	r2, #0
 8006ecc:	f04f 0300 	mov.w	r3, #0
 8006ed0:	008b      	lsls	r3, r1, #2
 8006ed2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ed6:	0082      	lsls	r2, r0, #2
 8006ed8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006edc:	f7f9 fec4 	bl	8000c68 <__aeabi_uldivmod>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4b2f      	ldr	r3, [pc, #188]	; (8006fa4 <LL_USART_SetBaudRate+0x31c>)
 8006ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8006eea:	095b      	lsrs	r3, r3, #5
 8006eec:	2164      	movs	r1, #100	; 0x64
 8006eee:	fb01 f303 	mul.w	r3, r1, r3
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	011b      	lsls	r3, r3, #4
 8006ef6:	3332      	adds	r3, #50	; 0x32
 8006ef8:	4a2a      	ldr	r2, [pc, #168]	; (8006fa4 <LL_USART_SetBaudRate+0x31c>)
 8006efa:	fba2 2303 	umull	r2, r3, r2, r3
 8006efe:	095b      	lsrs	r3, r3, #5
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	4433      	add	r3, r6
 8006f0a:	b29e      	uxth	r6, r3
 8006f0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f04f 0100 	mov.w	r1, #0
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	1894      	adds	r4, r2, r2
 8006f1a:	603c      	str	r4, [r7, #0]
 8006f1c:	415b      	adcs	r3, r3
 8006f1e:	607b      	str	r3, [r7, #4]
 8006f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f24:	1812      	adds	r2, r2, r0
 8006f26:	eb41 0303 	adc.w	r3, r1, r3
 8006f2a:	f04f 0400 	mov.w	r4, #0
 8006f2e:	f04f 0500 	mov.w	r5, #0
 8006f32:	00dd      	lsls	r5, r3, #3
 8006f34:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f38:	00d4      	lsls	r4, r2, #3
 8006f3a:	4622      	mov	r2, r4
 8006f3c:	462b      	mov	r3, r5
 8006f3e:	1814      	adds	r4, r2, r0
 8006f40:	63bc      	str	r4, [r7, #56]	; 0x38
 8006f42:	414b      	adcs	r3, r1
 8006f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f04f 0100 	mov.w	r1, #0
 8006f4e:	f04f 0200 	mov.w	r2, #0
 8006f52:	f04f 0300 	mov.w	r3, #0
 8006f56:	008b      	lsls	r3, r1, #2
 8006f58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f5c:	0082      	lsls	r2, r0, #2
 8006f5e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006f62:	f7f9 fe81 	bl	8000c68 <__aeabi_uldivmod>
 8006f66:	4602      	mov	r2, r0
 8006f68:	460b      	mov	r3, r1
 8006f6a:	4b0e      	ldr	r3, [pc, #56]	; (8006fa4 <LL_USART_SetBaudRate+0x31c>)
 8006f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f70:	095b      	lsrs	r3, r3, #5
 8006f72:	2164      	movs	r1, #100	; 0x64
 8006f74:	fb01 f303 	mul.w	r3, r1, r3
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	011b      	lsls	r3, r3, #4
 8006f7c:	3332      	adds	r3, #50	; 0x32
 8006f7e:	4a09      	ldr	r2, [pc, #36]	; (8006fa4 <LL_USART_SetBaudRate+0x31c>)
 8006f80:	fba2 2303 	umull	r2, r3, r2, r3
 8006f84:	095b      	lsrs	r3, r3, #5
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	f003 030f 	and.w	r3, r3, #15
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	4433      	add	r3, r6
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f96:	609a      	str	r2, [r3, #8]
}
 8006f98:	bf00      	nop
 8006f9a:	377c      	adds	r7, #124	; 0x7c
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa2:	bf00      	nop
 8006fa4:	51eb851f 	.word	0x51eb851f

08006fa8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff fe2a 	bl	8006c14 <LL_USART_IsEnabled>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d15e      	bne.n	8007084 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006fce:	f023 030c 	bic.w	r3, r3, #12
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	6851      	ldr	r1, [r2, #4]
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	68d2      	ldr	r2, [r2, #12]
 8006fda:	4311      	orrs	r1, r2
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	6912      	ldr	r2, [r2, #16]
 8006fe0:	4311      	orrs	r1, r2
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	6992      	ldr	r2, [r2, #24]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff fe21 	bl	8006c3c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff fe2e 	bl	8006c62 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007006:	f107 0308 	add.w	r3, r7, #8
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff fa46 	bl	800649c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a1f      	ldr	r2, [pc, #124]	; (8007090 <LL_USART_Init+0xe8>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d102      	bne.n	800701e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	61bb      	str	r3, [r7, #24]
 800701c:	e021      	b.n	8007062 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a1c      	ldr	r2, [pc, #112]	; (8007094 <LL_USART_Init+0xec>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d102      	bne.n	800702c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	61bb      	str	r3, [r7, #24]
 800702a:	e01a      	b.n	8007062 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a1a      	ldr	r2, [pc, #104]	; (8007098 <LL_USART_Init+0xf0>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d102      	bne.n	800703a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	61bb      	str	r3, [r7, #24]
 8007038:	e013      	b.n	8007062 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a17      	ldr	r2, [pc, #92]	; (800709c <LL_USART_Init+0xf4>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d102      	bne.n	8007048 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	e00c      	b.n	8007062 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a15      	ldr	r2, [pc, #84]	; (80070a0 <LL_USART_Init+0xf8>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d102      	bne.n	8007056 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	61bb      	str	r3, [r7, #24]
 8007054:	e005      	b.n	8007062 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a12      	ldr	r2, [pc, #72]	; (80070a4 <LL_USART_Init+0xfc>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d101      	bne.n	8007062 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00d      	beq.n	8007084 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d009      	beq.n	8007084 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8007070:	2300      	movs	r3, #0
 8007072:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	699a      	ldr	r2, [r3, #24]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	69b9      	ldr	r1, [r7, #24]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7ff fe02 	bl	8006c88 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007084:	7ffb      	ldrb	r3, [r7, #31]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3720      	adds	r7, #32
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	40011000 	.word	0x40011000
 8007094:	40004400 	.word	0x40004400
 8007098:	40004800 	.word	0x40004800
 800709c:	40011400 	.word	0x40011400
 80070a0:	40004c00 	.word	0x40004c00
 80070a4:	40005000 	.word	0x40005000

080070a8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80070b0:	4a04      	ldr	r2, [pc, #16]	; (80070c4 <LL_SetSystemCoreClock+0x1c>)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6013      	str	r3, [r2, #0]
}
 80070b6:	bf00      	nop
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	20000404 	.word	0x20000404

080070c8 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 80070cc:	4b10      	ldr	r3, [pc, #64]	; (8007110 <MX_PDM2PCM_Init+0x48>)
 80070ce:	2201      	movs	r2, #1
 80070d0:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 80070d2:	4b0f      	ldr	r3, [pc, #60]	; (8007110 <MX_PDM2PCM_Init+0x48>)
 80070d4:	2201      	movs	r2, #1
 80070d6:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 80070d8:	4b0d      	ldr	r3, [pc, #52]	; (8007110 <MX_PDM2PCM_Init+0x48>)
 80070da:	4a0e      	ldr	r2, [pc, #56]	; (8007114 <MX_PDM2PCM_Init+0x4c>)
 80070dc:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 80070de:	4b0c      	ldr	r3, [pc, #48]	; (8007110 <MX_PDM2PCM_Init+0x48>)
 80070e0:	2201      	movs	r2, #1
 80070e2:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 80070e4:	4b0a      	ldr	r3, [pc, #40]	; (8007110 <MX_PDM2PCM_Init+0x48>)
 80070e6:	2201      	movs	r2, #1
 80070e8:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 80070ea:	4809      	ldr	r0, [pc, #36]	; (8007110 <MX_PDM2PCM_Init+0x48>)
 80070ec:	f001 fd66 	bl	8008bbc <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80070f0:	4b09      	ldr	r3, [pc, #36]	; (8007118 <MX_PDM2PCM_Init+0x50>)
 80070f2:	2202      	movs	r2, #2
 80070f4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 80070f6:	4b08      	ldr	r3, [pc, #32]	; (8007118 <MX_PDM2PCM_Init+0x50>)
 80070f8:	2210      	movs	r2, #16
 80070fa:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 80070fc:	4b06      	ldr	r3, [pc, #24]	; (8007118 <MX_PDM2PCM_Init+0x50>)
 80070fe:	2200      	movs	r2, #0
 8007100:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8007102:	4905      	ldr	r1, [pc, #20]	; (8007118 <MX_PDM2PCM_Init+0x50>)
 8007104:	4802      	ldr	r0, [pc, #8]	; (8007110 <MX_PDM2PCM_Init+0x48>)
 8007106:	f001 fde3 	bl	8008cd0 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800710a:	bf00      	nop
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	200062f0 	.word	0x200062f0
 8007114:	7d70a3d6 	.word	0x7d70a3d6
 8007118:	200062e8 	.word	0x200062e8

0800711c <D16_GENERIC>:
 800711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007120:	b089      	sub	sp, #36	; 0x24
 8007122:	68d4      	ldr	r4, [r2, #12]
 8007124:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007126:	6993      	ldr	r3, [r2, #24]
 8007128:	9407      	str	r4, [sp, #28]
 800712a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800712c:	9306      	str	r3, [sp, #24]
 800712e:	9402      	str	r4, [sp, #8]
 8007130:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8007134:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8007138:	69d3      	ldr	r3, [r2, #28]
 800713a:	6896      	ldr	r6, [r2, #8]
 800713c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800713e:	9103      	str	r1, [sp, #12]
 8007140:	2d00      	cmp	r5, #0
 8007142:	d066      	beq.n	8007212 <D16_GENERIC+0xf6>
 8007144:	f004 0510 	and.w	r5, r4, #16
 8007148:	f004 0420 	and.w	r4, r4, #32
 800714c:	9504      	str	r5, [sp, #16]
 800714e:	4938      	ldr	r1, [pc, #224]	; (8007230 <D16_GENERIC+0x114>)
 8007150:	9405      	str	r4, [sp, #20]
 8007152:	f04f 0e00 	mov.w	lr, #0
 8007156:	4635      	mov	r5, r6
 8007158:	e04f      	b.n	80071fa <D16_GENERIC+0xde>
 800715a:	5d87      	ldrb	r7, [r0, r6]
 800715c:	7804      	ldrb	r4, [r0, #0]
 800715e:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8007162:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8007166:	b2e6      	uxtb	r6, r4
 8007168:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800716c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007170:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8007174:	4433      	add	r3, r6
 8007176:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800717a:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800717e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007182:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8007186:	0aa3      	lsrs	r3, r4, #10
 8007188:	4c2a      	ldr	r4, [pc, #168]	; (8007234 <D16_GENERIC+0x118>)
 800718a:	fb26 5404 	smlad	r4, r6, r4, r5
 800718e:	4d2a      	ldr	r5, [pc, #168]	; (8007238 <D16_GENERIC+0x11c>)
 8007190:	fb26 f505 	smuad	r5, r6, r5
 8007194:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8007198:	eb04 080a 	add.w	r8, r4, sl
 800719c:	eba8 080b 	sub.w	r8, r8, fp
 80071a0:	4646      	mov	r6, r8
 80071a2:	17f7      	asrs	r7, r6, #31
 80071a4:	e9cd 6700 	strd	r6, r7, [sp]
 80071a8:	9e04      	ldr	r6, [sp, #16]
 80071aa:	f10e 0c01 	add.w	ip, lr, #1
 80071ae:	b16e      	cbz	r6, 80071cc <D16_GENERIC+0xb0>
 80071b0:	6a16      	ldr	r6, [r2, #32]
 80071b2:	9f01      	ldr	r7, [sp, #4]
 80071b4:	fba8 8906 	umull	r8, r9, r8, r6
 80071b8:	fb06 9907 	mla	r9, r6, r7, r9
 80071bc:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80071c0:	f149 0900 	adc.w	r9, r9, #0
 80071c4:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80071c8:	46a3      	mov	fp, r4
 80071ca:	4654      	mov	r4, sl
 80071cc:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80071ce:	9f02      	ldr	r7, [sp, #8]
 80071d0:	0424      	lsls	r4, r4, #16
 80071d2:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80071d6:	f04f 0900 	mov.w	r9, #0
 80071da:	fb0e fe06 	mul.w	lr, lr, r6
 80071de:	fbc7 8904 	smlal	r8, r9, r7, r4
 80071e2:	9e03      	ldr	r6, [sp, #12]
 80071e4:	464f      	mov	r7, r9
 80071e6:	10bc      	asrs	r4, r7, #2
 80071e8:	f304 040f 	ssat	r4, #16, r4
 80071ec:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 80071f0:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80071f2:	fa1f fe8c 	uxth.w	lr, ip
 80071f6:	4574      	cmp	r4, lr
 80071f8:	d90a      	bls.n	8007210 <D16_GENERIC+0xf4>
 80071fa:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80071fc:	2c01      	cmp	r4, #1
 80071fe:	b2e6      	uxtb	r6, r4
 8007200:	d1ab      	bne.n	800715a <D16_GENERIC+0x3e>
 8007202:	9e05      	ldr	r6, [sp, #20]
 8007204:	f850 4b02 	ldr.w	r4, [r0], #2
 8007208:	2e00      	cmp	r6, #0
 800720a:	d0ac      	beq.n	8007166 <D16_GENERIC+0x4a>
 800720c:	ba64      	rev16	r4, r4
 800720e:	e7aa      	b.n	8007166 <D16_GENERIC+0x4a>
 8007210:	462e      	mov	r6, r5
 8007212:	9907      	ldr	r1, [sp, #28]
 8007214:	61d3      	str	r3, [r2, #28]
 8007216:	9b06      	ldr	r3, [sp, #24]
 8007218:	6096      	str	r6, [r2, #8]
 800721a:	2000      	movs	r0, #0
 800721c:	60d1      	str	r1, [r2, #12]
 800721e:	f8c2 a010 	str.w	sl, [r2, #16]
 8007222:	f8c2 b014 	str.w	fp, [r2, #20]
 8007226:	6193      	str	r3, [r2, #24]
 8007228:	b009      	add	sp, #36	; 0x24
 800722a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800722e:	bf00      	nop
 8007230:	20000000 	.word	0x20000000
 8007234:	00030001 	.word	0x00030001
 8007238:	00010003 	.word	0x00010003

0800723c <D24_GENERIC>:
 800723c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007240:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8007242:	6993      	ldr	r3, [r2, #24]
 8007244:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8007246:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800724a:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800724e:	6894      	ldr	r4, [r2, #8]
 8007250:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8007254:	b089      	sub	sp, #36	; 0x24
 8007256:	9307      	str	r3, [sp, #28]
 8007258:	9503      	str	r5, [sp, #12]
 800725a:	69d3      	ldr	r3, [r2, #28]
 800725c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800725e:	9104      	str	r1, [sp, #16]
 8007260:	2e00      	cmp	r6, #0
 8007262:	f000 8096 	beq.w	8007392 <D24_GENERIC+0x156>
 8007266:	f005 0610 	and.w	r6, r5, #16
 800726a:	f005 0520 	and.w	r5, r5, #32
 800726e:	4954      	ldr	r1, [pc, #336]	; (80073c0 <D24_GENERIC+0x184>)
 8007270:	9605      	str	r6, [sp, #20]
 8007272:	9506      	str	r5, [sp, #24]
 8007274:	f04f 0e00 	mov.w	lr, #0
 8007278:	f8cd 9008 	str.w	r9, [sp, #8]
 800727c:	e06a      	b.n	8007354 <D24_GENERIC+0x118>
 800727e:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8007282:	f810 8007 	ldrb.w	r8, [r0, r7]
 8007286:	f890 c000 	ldrb.w	ip, [r0]
 800728a:	042d      	lsls	r5, r5, #16
 800728c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8007290:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8007294:	44ac      	add	ip, r5
 8007296:	4438      	add	r0, r7
 8007298:	fa5f f68c 	uxtb.w	r6, ip
 800729c:	f3cc 2507 	ubfx	r5, ip, #8, #8
 80072a0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80072a4:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 80072a8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80072ac:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 80072b0:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80072b4:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 80072b8:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80072bc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80072c0:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80072c4:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80072c8:	4d3e      	ldr	r5, [pc, #248]	; (80073c4 <D24_GENERIC+0x188>)
 80072ca:	fb26 b705 	smlad	r7, r6, r5, fp
 80072ce:	4d3e      	ldr	r5, [pc, #248]	; (80073c8 <D24_GENERIC+0x18c>)
 80072d0:	fb26 4b05 	smlad	fp, r6, r5, r4
 80072d4:	f3c3 0409 	ubfx	r4, r3, #0, #10
 80072d8:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 80072dc:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 80072e0:	2401      	movs	r4, #1
 80072e2:	fb26 f604 	smuad	r6, r6, r4
 80072e6:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 80072ea:	9f02      	ldr	r7, [sp, #8]
 80072ec:	eb0e 0c04 	add.w	ip, lr, r4
 80072f0:	eb08 0406 	add.w	r4, r8, r6
 80072f4:	eb05 060a 	add.w	r6, r5, sl
 80072f8:	1bf6      	subs	r6, r6, r7
 80072fa:	4637      	mov	r7, r6
 80072fc:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8007300:	e9cd 7800 	strd	r7, r8, [sp]
 8007304:	9f05      	ldr	r7, [sp, #20]
 8007306:	b177      	cbz	r7, 8007326 <D24_GENERIC+0xea>
 8007308:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800730c:	9502      	str	r5, [sp, #8]
 800730e:	fba6 9a08 	umull	r9, sl, r6, r8
 8007312:	9e01      	ldr	r6, [sp, #4]
 8007314:	fb08 aa06 	mla	sl, r8, r6, sl
 8007318:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800731c:	f14a 0700 	adc.w	r7, sl, #0
 8007320:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8007324:	4655      	mov	r5, sl
 8007326:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8007328:	9f03      	ldr	r7, [sp, #12]
 800732a:	03ad      	lsls	r5, r5, #14
 800732c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8007330:	f04f 0900 	mov.w	r9, #0
 8007334:	fb0e fe06 	mul.w	lr, lr, r6
 8007338:	fbc7 8905 	smlal	r8, r9, r7, r5
 800733c:	9e04      	ldr	r6, [sp, #16]
 800733e:	464f      	mov	r7, r9
 8007340:	10bd      	asrs	r5, r7, #2
 8007342:	f305 050f 	ssat	r5, #16, r5
 8007346:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800734a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800734c:	fa1f fe8c 	uxth.w	lr, ip
 8007350:	4575      	cmp	r5, lr
 8007352:	d91c      	bls.n	800738e <D24_GENERIC+0x152>
 8007354:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8007356:	b2ef      	uxtb	r7, r5
 8007358:	2d01      	cmp	r5, #1
 800735a:	b23e      	sxth	r6, r7
 800735c:	d18f      	bne.n	800727e <D24_GENERIC+0x42>
 800735e:	9d06      	ldr	r5, [sp, #24]
 8007360:	b15d      	cbz	r5, 800737a <D24_GENERIC+0x13e>
 8007362:	f01e 0f01 	tst.w	lr, #1
 8007366:	d122      	bne.n	80073ae <D24_GENERIC+0x172>
 8007368:	7805      	ldrb	r5, [r0, #0]
 800736a:	78c7      	ldrb	r7, [r0, #3]
 800736c:	7846      	ldrb	r6, [r0, #1]
 800736e:	022d      	lsls	r5, r5, #8
 8007370:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8007374:	44b4      	add	ip, r6
 8007376:	3002      	adds	r0, #2
 8007378:	e78e      	b.n	8007298 <D24_GENERIC+0x5c>
 800737a:	7846      	ldrb	r6, [r0, #1]
 800737c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8007380:	f810 5b03 	ldrb.w	r5, [r0], #3
 8007384:	0236      	lsls	r6, r6, #8
 8007386:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800738a:	44ac      	add	ip, r5
 800738c:	e784      	b.n	8007298 <D24_GENERIC+0x5c>
 800738e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007392:	61d3      	str	r3, [r2, #28]
 8007394:	9b07      	ldr	r3, [sp, #28]
 8007396:	6094      	str	r4, [r2, #8]
 8007398:	2000      	movs	r0, #0
 800739a:	f8c2 b00c 	str.w	fp, [r2, #12]
 800739e:	f8c2 a010 	str.w	sl, [r2, #16]
 80073a2:	f8c2 9014 	str.w	r9, [r2, #20]
 80073a6:	6193      	str	r3, [r2, #24]
 80073a8:	b009      	add	sp, #36	; 0x24
 80073aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ae:	78c5      	ldrb	r5, [r0, #3]
 80073b0:	7887      	ldrb	r7, [r0, #2]
 80073b2:	f810 6b04 	ldrb.w	r6, [r0], #4
 80073b6:	022d      	lsls	r5, r5, #8
 80073b8:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 80073bc:	44b4      	add	ip, r6
 80073be:	e76b      	b.n	8007298 <D24_GENERIC+0x5c>
 80073c0:	20000000 	.word	0x20000000
 80073c4:	00030001 	.word	0x00030001
 80073c8:	00060007 	.word	0x00060007

080073cc <D32_GENERIC>:
 80073cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80073d2:	6993      	ldr	r3, [r2, #24]
 80073d4:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80073d6:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80073da:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80073de:	69d6      	ldr	r6, [r2, #28]
 80073e0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80073e4:	b089      	sub	sp, #36	; 0x24
 80073e6:	9307      	str	r3, [sp, #28]
 80073e8:	9403      	str	r4, [sp, #12]
 80073ea:	6893      	ldr	r3, [r2, #8]
 80073ec:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80073ee:	9104      	str	r1, [sp, #16]
 80073f0:	2d00      	cmp	r5, #0
 80073f2:	f000 809f 	beq.w	8007534 <D32_GENERIC+0x168>
 80073f6:	f004 0510 	and.w	r5, r4, #16
 80073fa:	f004 0420 	and.w	r4, r4, #32
 80073fe:	9505      	str	r5, [sp, #20]
 8007400:	4953      	ldr	r1, [pc, #332]	; (8007550 <D32_GENERIC+0x184>)
 8007402:	9406      	str	r4, [sp, #24]
 8007404:	f04f 0c00 	mov.w	ip, #0
 8007408:	f8cd 9008 	str.w	r9, [sp, #8]
 800740c:	461d      	mov	r5, r3
 800740e:	4617      	mov	r7, r2
 8007410:	e077      	b.n	8007502 <D32_GENERIC+0x136>
 8007412:	f818 3003 	ldrb.w	r3, [r8, r3]
 8007416:	f810 800e 	ldrb.w	r8, [r0, lr]
 800741a:	f810 e002 	ldrb.w	lr, [r0, r2]
 800741e:	7800      	ldrb	r0, [r0, #0]
 8007420:	041b      	lsls	r3, r3, #16
 8007422:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8007426:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800742a:	4403      	add	r3, r0
 800742c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8007430:	b2dc      	uxtb	r4, r3
 8007432:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007436:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800743a:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800743e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007442:	0e1b      	lsrs	r3, r3, #24
 8007444:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8007448:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800744c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007450:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8007454:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8007458:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 800745c:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8007460:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007464:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007468:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800746c:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8007470:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007474:	4b37      	ldr	r3, [pc, #220]	; (8007554 <D32_GENERIC+0x188>)
 8007476:	fb22 b403 	smlad	r4, r2, r3, fp
 800747a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800747e:	fb2e 4803 	smlad	r8, lr, r3, r4
 8007482:	4b35      	ldr	r3, [pc, #212]	; (8007558 <D32_GENERIC+0x18c>)
 8007484:	fb22 5503 	smlad	r5, r2, r3, r5
 8007488:	4b34      	ldr	r3, [pc, #208]	; (800755c <D32_GENERIC+0x190>)
 800748a:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800748e:	2301      	movs	r3, #1
 8007490:	fb22 f203 	smuad	r2, r2, r3
 8007494:	4b32      	ldr	r3, [pc, #200]	; (8007560 <D32_GENERIC+0x194>)
 8007496:	fb2e 2503 	smlad	r5, lr, r3, r2
 800749a:	9b02      	ldr	r3, [sp, #8]
 800749c:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 80074a0:	eb04 080a 	add.w	r8, r4, sl
 80074a4:	eba8 0803 	sub.w	r8, r8, r3
 80074a8:	4642      	mov	r2, r8
 80074aa:	17d3      	asrs	r3, r2, #31
 80074ac:	e9cd 2300 	strd	r2, r3, [sp]
 80074b0:	9b05      	ldr	r3, [sp, #20]
 80074b2:	f10c 0e01 	add.w	lr, ip, #1
 80074b6:	b16b      	cbz	r3, 80074d4 <D32_GENERIC+0x108>
 80074b8:	6a3a      	ldr	r2, [r7, #32]
 80074ba:	9b01      	ldr	r3, [sp, #4]
 80074bc:	9402      	str	r4, [sp, #8]
 80074be:	fba8 8902 	umull	r8, r9, r8, r2
 80074c2:	fb02 9903 	mla	r9, r2, r3, r9
 80074c6:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80074ca:	f149 0900 	adc.w	r9, r9, #0
 80074ce:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80074d2:	4654      	mov	r4, sl
 80074d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80074d6:	9a04      	ldr	r2, [sp, #16]
 80074d8:	fb0c fc03 	mul.w	ip, ip, r3
 80074dc:	9b03      	ldr	r3, [sp, #12]
 80074de:	0364      	lsls	r4, r4, #13
 80074e0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80074e4:	f04f 0900 	mov.w	r9, #0
 80074e8:	fbc3 8904 	smlal	r8, r9, r3, r4
 80074ec:	464b      	mov	r3, r9
 80074ee:	109b      	asrs	r3, r3, #2
 80074f0:	f303 030f 	ssat	r3, #16, r3
 80074f4:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 80074f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074fa:	fa1f fc8e 	uxth.w	ip, lr
 80074fe:	4563      	cmp	r3, ip
 8007500:	d914      	bls.n	800752c <D32_GENERIC+0x160>
 8007502:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8007504:	b2e2      	uxtb	r2, r4
 8007506:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800750a:	eb00 080e 	add.w	r8, r0, lr
 800750e:	4253      	negs	r3, r2
 8007510:	2c01      	cmp	r4, #1
 8007512:	eb08 0403 	add.w	r4, r8, r3
 8007516:	f47f af7c 	bne.w	8007412 <D32_GENERIC+0x46>
 800751a:	1d02      	adds	r2, r0, #4
 800751c:	6803      	ldr	r3, [r0, #0]
 800751e:	9806      	ldr	r0, [sp, #24]
 8007520:	b110      	cbz	r0, 8007528 <D32_GENERIC+0x15c>
 8007522:	ba5b      	rev16	r3, r3
 8007524:	4610      	mov	r0, r2
 8007526:	e783      	b.n	8007430 <D32_GENERIC+0x64>
 8007528:	4610      	mov	r0, r2
 800752a:	e781      	b.n	8007430 <D32_GENERIC+0x64>
 800752c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007530:	462b      	mov	r3, r5
 8007532:	463a      	mov	r2, r7
 8007534:	6093      	str	r3, [r2, #8]
 8007536:	9b07      	ldr	r3, [sp, #28]
 8007538:	f8c2 b00c 	str.w	fp, [r2, #12]
 800753c:	2000      	movs	r0, #0
 800753e:	61d6      	str	r6, [r2, #28]
 8007540:	f8c2 a010 	str.w	sl, [r2, #16]
 8007544:	f8c2 9014 	str.w	r9, [r2, #20]
 8007548:	6193      	str	r3, [r2, #24]
 800754a:	b009      	add	sp, #36	; 0x24
 800754c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007550:	20000000 	.word	0x20000000
 8007554:	00060003 	.word	0x00060003
 8007558:	000a000c 	.word	0x000a000c
 800755c:	000c000a 	.word	0x000c000a
 8007560:	00030006 	.word	0x00030006

08007564 <D48_GENERIC>:
 8007564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007568:	b089      	sub	sp, #36	; 0x24
 800756a:	6953      	ldr	r3, [r2, #20]
 800756c:	68d4      	ldr	r4, [r2, #12]
 800756e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8007570:	9302      	str	r3, [sp, #8]
 8007572:	9400      	str	r4, [sp, #0]
 8007574:	6993      	ldr	r3, [r2, #24]
 8007576:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8007578:	9307      	str	r3, [sp, #28]
 800757a:	9403      	str	r4, [sp, #12]
 800757c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8007580:	69d6      	ldr	r6, [r2, #28]
 8007582:	6893      	ldr	r3, [r2, #8]
 8007584:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007586:	9104      	str	r1, [sp, #16]
 8007588:	2d00      	cmp	r5, #0
 800758a:	f000 80c5 	beq.w	8007718 <D48_GENERIC+0x1b4>
 800758e:	f004 0510 	and.w	r5, r4, #16
 8007592:	f004 0420 	and.w	r4, r4, #32
 8007596:	4967      	ldr	r1, [pc, #412]	; (8007734 <D48_GENERIC+0x1d0>)
 8007598:	9505      	str	r5, [sp, #20]
 800759a:	9406      	str	r4, [sp, #24]
 800759c:	f04f 0c00 	mov.w	ip, #0
 80075a0:	4657      	mov	r7, sl
 80075a2:	9301      	str	r3, [sp, #4]
 80075a4:	e09c      	b.n	80076e0 <D48_GENERIC+0x17c>
 80075a6:	f81b 4005 	ldrb.w	r4, [fp, r5]
 80075aa:	f810 b009 	ldrb.w	fp, [r0, r9]
 80075ae:	f81a 9009 	ldrb.w	r9, [sl, r9]
 80075b2:	f810 a00e 	ldrb.w	sl, [r0, lr]
 80075b6:	7800      	ldrb	r0, [r0, #0]
 80075b8:	0424      	lsls	r4, r4, #16
 80075ba:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 80075be:	f818 4005 	ldrb.w	r4, [r8, r5]
 80075c2:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 80075c6:	44a8      	add	r8, r5
 80075c8:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 80075cc:	eb0b 0500 	add.w	r5, fp, r0
 80075d0:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 80075d4:	fa5f f885 	uxtb.w	r8, r5
 80075d8:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 80075dc:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 80075e0:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 80075e4:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 80075e8:	0e2d      	lsrs	r5, r5, #24
 80075ea:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 80075ee:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 80075f2:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 80075f6:	b2e6      	uxtb	r6, r4
 80075f8:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 80075fc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8007600:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8007604:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007608:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 800760c:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8007610:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8007614:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8007618:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800761c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007620:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8007624:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8007628:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800762c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007630:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8007634:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8007638:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800763c:	4c3e      	ldr	r4, [pc, #248]	; (8007738 <D48_GENERIC+0x1d4>)
 800763e:	9d00      	ldr	r5, [sp, #0]
 8007640:	fb2a 5404 	smlad	r4, sl, r4, r5
 8007644:	4d3d      	ldr	r5, [pc, #244]	; (800773c <D48_GENERIC+0x1d8>)
 8007646:	fb28 4405 	smlad	r4, r8, r5, r4
 800764a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800764e:	fb2e 4b03 	smlad	fp, lr, r3, r4
 8007652:	4c3b      	ldr	r4, [pc, #236]	; (8007740 <D48_GENERIC+0x1dc>)
 8007654:	9b01      	ldr	r3, [sp, #4]
 8007656:	fb2a 3304 	smlad	r3, sl, r4, r3
 800765a:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800765e:	fb28 3304 	smlad	r3, r8, r4, r3
 8007662:	4c38      	ldr	r4, [pc, #224]	; (8007744 <D48_GENERIC+0x1e0>)
 8007664:	fb2e 3304 	smlad	r3, lr, r4, r3
 8007668:	2501      	movs	r5, #1
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	fb2a fa05 	smuad	sl, sl, r5
 8007670:	4b35      	ldr	r3, [pc, #212]	; (8007748 <D48_GENERIC+0x1e4>)
 8007672:	fb28 a803 	smlad	r8, r8, r3, sl
 8007676:	4b35      	ldr	r3, [pc, #212]	; (800774c <D48_GENERIC+0x1e8>)
 8007678:	fb2e 8303 	smlad	r3, lr, r3, r8
 800767c:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 8007680:	9301      	str	r3, [sp, #4]
 8007682:	9b02      	ldr	r3, [sp, #8]
 8007684:	eb04 0807 	add.w	r8, r4, r7
 8007688:	eba8 0803 	sub.w	r8, r8, r3
 800768c:	9b05      	ldr	r3, [sp, #20]
 800768e:	4465      	add	r5, ip
 8007690:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8007694:	b163      	cbz	r3, 80076b0 <D48_GENERIC+0x14c>
 8007696:	6a17      	ldr	r7, [r2, #32]
 8007698:	9402      	str	r4, [sp, #8]
 800769a:	fba8 8907 	umull	r8, r9, r8, r7
 800769e:	fb07 990b 	mla	r9, r7, fp, r9
 80076a2:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80076a6:	f149 0900 	adc.w	r9, r9, #0
 80076aa:	ea4f 0749 	mov.w	r7, r9, lsl #1
 80076ae:	463c      	mov	r4, r7
 80076b0:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 80076b4:	9b03      	ldr	r3, [sp, #12]
 80076b6:	02e4      	lsls	r4, r4, #11
 80076b8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80076bc:	f04f 0900 	mov.w	r9, #0
 80076c0:	fb0c fc0e 	mul.w	ip, ip, lr
 80076c4:	fbc3 8904 	smlal	r8, r9, r3, r4
 80076c8:	9b04      	ldr	r3, [sp, #16]
 80076ca:	ea4f 04a9 	mov.w	r4, r9, asr #2
 80076ce:	f304 040f 	ssat	r4, #16, r4
 80076d2:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 80076d6:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80076d8:	fa1f fc85 	uxth.w	ip, r5
 80076dc:	4564      	cmp	r4, ip
 80076de:	d919      	bls.n	8007714 <D48_GENERIC+0x1b0>
 80076e0:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80076e2:	fa5f fe84 	uxtb.w	lr, r4
 80076e6:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 80076ea:	f1ce 0500 	rsb	r5, lr, #0
 80076ee:	eb00 0b09 	add.w	fp, r0, r9
 80076f2:	eb0b 0a05 	add.w	sl, fp, r5
 80076f6:	2c01      	cmp	r4, #1
 80076f8:	eb0a 0809 	add.w	r8, sl, r9
 80076fc:	f47f af53 	bne.w	80075a6 <D48_GENERIC+0x42>
 8007700:	9b06      	ldr	r3, [sp, #24]
 8007702:	6805      	ldr	r5, [r0, #0]
 8007704:	6844      	ldr	r4, [r0, #4]
 8007706:	3006      	adds	r0, #6
 8007708:	2b00      	cmp	r3, #0
 800770a:	f43f af63 	beq.w	80075d4 <D48_GENERIC+0x70>
 800770e:	ba6d      	rev16	r5, r5
 8007710:	ba64      	rev16	r4, r4
 8007712:	e75f      	b.n	80075d4 <D48_GENERIC+0x70>
 8007714:	9b01      	ldr	r3, [sp, #4]
 8007716:	46ba      	mov	sl, r7
 8007718:	6093      	str	r3, [r2, #8]
 800771a:	9b00      	ldr	r3, [sp, #0]
 800771c:	60d3      	str	r3, [r2, #12]
 800771e:	9b02      	ldr	r3, [sp, #8]
 8007720:	6153      	str	r3, [r2, #20]
 8007722:	9b07      	ldr	r3, [sp, #28]
 8007724:	61d6      	str	r6, [r2, #28]
 8007726:	2000      	movs	r0, #0
 8007728:	f8c2 a010 	str.w	sl, [r2, #16]
 800772c:	6193      	str	r3, [r2, #24]
 800772e:	b009      	add	sp, #36	; 0x24
 8007730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007734:	20000000 	.word	0x20000000
 8007738:	000f000a 	.word	0x000f000a
 800773c:	00060003 	.word	0x00060003
 8007740:	00150019 	.word	0x00150019
 8007744:	00190015 	.word	0x00190015
 8007748:	00030006 	.word	0x00030006
 800774c:	000a000f 	.word	0x000a000f

08007750 <D64_GENERIC>:
 8007750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007754:	b089      	sub	sp, #36	; 0x24
 8007756:	6913      	ldr	r3, [r2, #16]
 8007758:	6895      	ldr	r5, [r2, #8]
 800775a:	9303      	str	r3, [sp, #12]
 800775c:	9501      	str	r5, [sp, #4]
 800775e:	6953      	ldr	r3, [r2, #20]
 8007760:	68d5      	ldr	r5, [r2, #12]
 8007762:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8007764:	9304      	str	r3, [sp, #16]
 8007766:	9500      	str	r5, [sp, #0]
 8007768:	6993      	ldr	r3, [r2, #24]
 800776a:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800776c:	9307      	str	r3, [sp, #28]
 800776e:	9505      	str	r5, [sp, #20]
 8007770:	69d3      	ldr	r3, [r2, #28]
 8007772:	9106      	str	r1, [sp, #24]
 8007774:	2c00      	cmp	r4, #0
 8007776:	f000 80d9 	beq.w	800792c <D64_GENERIC+0x1dc>
 800777a:	6a11      	ldr	r1, [r2, #32]
 800777c:	9102      	str	r1, [sp, #8]
 800777e:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800796c <D64_GENERIC+0x21c>
 8007782:	f04f 0c00 	mov.w	ip, #0
 8007786:	4681      	mov	r9, r0
 8007788:	e0c1      	b.n	800790e <D64_GENERIC+0x1be>
 800778a:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800778e:	4274      	negs	r4, r6
 8007790:	eb09 0708 	add.w	r7, r9, r8
 8007794:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8007798:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 800779c:	5d38      	ldrb	r0, [r7, r4]
 800779e:	5d29      	ldrb	r1, [r5, r4]
 80077a0:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 80077a4:	f819 a008 	ldrb.w	sl, [r9, r8]
 80077a8:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 80077ac:	f899 7000 	ldrb.w	r7, [r9]
 80077b0:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 80077b4:	4425      	add	r5, r4
 80077b6:	0409      	lsls	r1, r1, #16
 80077b8:	0400      	lsls	r0, r0, #16
 80077ba:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 80077be:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 80077c2:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 80077c6:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 80077ca:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80077ce:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 80077d2:	4459      	add	r1, fp
 80077d4:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 80077d8:	4438      	add	r0, r7
 80077da:	b2c5      	uxtb	r5, r0
 80077dc:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80077e0:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 80077e4:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 80077e8:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80077ec:	0e00      	lsrs	r0, r0, #24
 80077ee:	eb03 0806 	add.w	r8, r3, r6
 80077f2:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 80077f6:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 80077fa:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80077fe:	b2c8      	uxtb	r0, r1
 8007800:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8007804:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8007808:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 800780c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8007810:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8007814:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8007818:	0e09      	lsrs	r1, r1, #24
 800781a:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800781e:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8007822:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8007826:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800782a:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800782e:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8007832:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8007836:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800783a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800783e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007842:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8007846:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800784a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800784e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8007852:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8007856:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800785a:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800785e:	0a8b      	lsrs	r3, r1, #10
 8007860:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8007864:	4939      	ldr	r1, [pc, #228]	; (800794c <D64_GENERIC+0x1fc>)
 8007866:	9c00      	ldr	r4, [sp, #0]
 8007868:	fb28 4101 	smlad	r1, r8, r1, r4
 800786c:	4c38      	ldr	r4, [pc, #224]	; (8007950 <D64_GENERIC+0x200>)
 800786e:	fb27 1104 	smlad	r1, r7, r4, r1
 8007872:	4c38      	ldr	r4, [pc, #224]	; (8007954 <D64_GENERIC+0x204>)
 8007874:	fb20 1104 	smlad	r1, r0, r4, r1
 8007878:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800787c:	fb2a 1106 	smlad	r1, sl, r6, r1
 8007880:	4c35      	ldr	r4, [pc, #212]	; (8007958 <D64_GENERIC+0x208>)
 8007882:	9d01      	ldr	r5, [sp, #4]
 8007884:	fb28 5404 	smlad	r4, r8, r4, r5
 8007888:	4d33      	ldr	r5, [pc, #204]	; (8007958 <D64_GENERIC+0x208>)
 800788a:	fb2a 4415 	smladx	r4, sl, r5, r4
 800788e:	4d33      	ldr	r5, [pc, #204]	; (800795c <D64_GENERIC+0x20c>)
 8007890:	fb27 4405 	smlad	r4, r7, r5, r4
 8007894:	fb20 4415 	smladx	r4, r0, r5, r4
 8007898:	2501      	movs	r5, #1
 800789a:	9400      	str	r4, [sp, #0]
 800789c:	fb28 f805 	smuad	r8, r8, r5
 80078a0:	4c2f      	ldr	r4, [pc, #188]	; (8007960 <D64_GENERIC+0x210>)
 80078a2:	fb27 8704 	smlad	r7, r7, r4, r8
 80078a6:	4c2f      	ldr	r4, [pc, #188]	; (8007964 <D64_GENERIC+0x214>)
 80078a8:	fb20 7004 	smlad	r0, r0, r4, r7
 80078ac:	4c2e      	ldr	r4, [pc, #184]	; (8007968 <D64_GENERIC+0x218>)
 80078ae:	fb2a 0004 	smlad	r0, sl, r4, r0
 80078b2:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 80078b6:	9902      	ldr	r1, [sp, #8]
 80078b8:	9001      	str	r0, [sp, #4]
 80078ba:	b189      	cbz	r1, 80078e0 <D64_GENERIC+0x190>
 80078bc:	9803      	ldr	r0, [sp, #12]
 80078be:	9c04      	ldr	r4, [sp, #16]
 80078c0:	9604      	str	r6, [sp, #16]
 80078c2:	4430      	add	r0, r6
 80078c4:	1b00      	subs	r0, r0, r4
 80078c6:	17c5      	asrs	r5, r0, #31
 80078c8:	460f      	mov	r7, r1
 80078ca:	fba0 0101 	umull	r0, r1, r0, r1
 80078ce:	fb07 1105 	mla	r1, r7, r5, r1
 80078d2:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80078d6:	f141 0100 	adc.w	r1, r1, #0
 80078da:	0049      	lsls	r1, r1, #1
 80078dc:	9103      	str	r1, [sp, #12]
 80078de:	460e      	mov	r6, r1
 80078e0:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 80078e2:	9905      	ldr	r1, [sp, #20]
 80078e4:	9806      	ldr	r0, [sp, #24]
 80078e6:	02b6      	lsls	r6, r6, #10
 80078e8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80078ec:	f04f 0800 	mov.w	r8, #0
 80078f0:	fb0c f404 	mul.w	r4, ip, r4
 80078f4:	fbc1 7806 	smlal	r7, r8, r1, r6
 80078f8:	4641      	mov	r1, r8
 80078fa:	1089      	asrs	r1, r1, #2
 80078fc:	f301 010f 	ssat	r1, #16, r1
 8007900:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8007904:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8007906:	f10c 0c01 	add.w	ip, ip, #1
 800790a:	4561      	cmp	r1, ip
 800790c:	dd0e      	ble.n	800792c <D64_GENERIC+0x1dc>
 800790e:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8007910:	2e01      	cmp	r6, #1
 8007912:	f47f af3a 	bne.w	800778a <D64_GENERIC+0x3a>
 8007916:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8007918:	06b4      	lsls	r4, r6, #26
 800791a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800791e:	f109 0908 	add.w	r9, r9, #8
 8007922:	f57f af5a 	bpl.w	80077da <D64_GENERIC+0x8a>
 8007926:	ba40      	rev16	r0, r0
 8007928:	ba49      	rev16	r1, r1
 800792a:	e756      	b.n	80077da <D64_GENERIC+0x8a>
 800792c:	61d3      	str	r3, [r2, #28]
 800792e:	9b03      	ldr	r3, [sp, #12]
 8007930:	9901      	ldr	r1, [sp, #4]
 8007932:	6113      	str	r3, [r2, #16]
 8007934:	9b04      	ldr	r3, [sp, #16]
 8007936:	6091      	str	r1, [r2, #8]
 8007938:	6153      	str	r3, [r2, #20]
 800793a:	9900      	ldr	r1, [sp, #0]
 800793c:	9b07      	ldr	r3, [sp, #28]
 800793e:	60d1      	str	r1, [r2, #12]
 8007940:	2000      	movs	r0, #0
 8007942:	6193      	str	r3, [r2, #24]
 8007944:	b009      	add	sp, #36	; 0x24
 8007946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800794a:	bf00      	nop
 800794c:	001c0015 	.word	0x001c0015
 8007950:	000f000a 	.word	0x000f000a
 8007954:	00060003 	.word	0x00060003
 8007958:	0024002a 	.word	0x0024002a
 800795c:	002e0030 	.word	0x002e0030
 8007960:	00030006 	.word	0x00030006
 8007964:	000a000f 	.word	0x000a000f
 8007968:	0015001c 	.word	0x0015001c
 800796c:	20000000 	.word	0x20000000

08007970 <D80_GENERIC>:
 8007970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007974:	b08b      	sub	sp, #44	; 0x2c
 8007976:	6914      	ldr	r4, [r2, #16]
 8007978:	9404      	str	r4, [sp, #16]
 800797a:	6954      	ldr	r4, [r2, #20]
 800797c:	9405      	str	r4, [sp, #20]
 800797e:	6994      	ldr	r4, [r2, #24]
 8007980:	9409      	str	r4, [sp, #36]	; 0x24
 8007982:	6894      	ldr	r4, [r2, #8]
 8007984:	9402      	str	r4, [sp, #8]
 8007986:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8007988:	68d4      	ldr	r4, [r2, #12]
 800798a:	9401      	str	r4, [sp, #4]
 800798c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800798e:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8007992:	9406      	str	r4, [sp, #24]
 8007994:	9107      	str	r1, [sp, #28]
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 810f 	beq.w	8007bba <D80_GENERIC+0x24a>
 800799c:	6a13      	ldr	r3, [r2, #32]
 800799e:	9308      	str	r3, [sp, #32]
 80079a0:	2300      	movs	r3, #0
 80079a2:	9200      	str	r2, [sp, #0]
 80079a4:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8007c0c <D80_GENERIC+0x29c>
 80079a8:	f8cd b00c 	str.w	fp, [sp, #12]
 80079ac:	461a      	mov	r2, r3
 80079ae:	e0ed      	b.n	8007b8c <D80_GENERIC+0x21c>
 80079b0:	fa5f fc8c 	uxtb.w	ip, ip
 80079b4:	fa0f f48c 	sxth.w	r4, ip
 80079b8:	0066      	lsls	r6, r4, #1
 80079ba:	eb06 0804 	add.w	r8, r6, r4
 80079be:	f1cc 0500 	rsb	r5, ip, #0
 80079c2:	eb00 0108 	add.w	r1, r0, r8
 80079c6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80079ca:	194b      	adds	r3, r1, r5
 80079cc:	5d49      	ldrb	r1, [r1, r5]
 80079ce:	f810 a008 	ldrb.w	sl, [r0, r8]
 80079d2:	f813 b004 	ldrb.w	fp, [r3, r4]
 80079d6:	f810 c00c 	ldrb.w	ip, [r0, ip]
 80079da:	f890 8000 	ldrb.w	r8, [r0]
 80079de:	eb03 0e04 	add.w	lr, r3, r4
 80079e2:	eb0e 0705 	add.w	r7, lr, r5
 80079e6:	0409      	lsls	r1, r1, #16
 80079e8:	f81e 3005 	ldrb.w	r3, [lr, r5]
 80079ec:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 80079f0:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 80079f4:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 80079f8:	eb0a 0004 	add.w	r0, sl, r4
 80079fc:	041b      	lsls	r3, r3, #16
 80079fe:	f81a a004 	ldrb.w	sl, [sl, r4]
 8007a02:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8007a06:	5d44      	ldrb	r4, [r0, r5]
 8007a08:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8007a0c:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8007a10:	4428      	add	r0, r5
 8007a12:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8007a16:	4441      	add	r1, r8
 8007a18:	4430      	add	r0, r6
 8007a1a:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8007a1e:	441f      	add	r7, r3
 8007a20:	b2cd      	uxtb	r5, r1
 8007a22:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8007a26:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8007a2a:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 8007a2e:	9b03      	ldr	r3, [sp, #12]
 8007a30:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8007a34:	0e09      	lsrs	r1, r1, #24
 8007a36:	4433      	add	r3, r6
 8007a38:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8007a3c:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8007a40:	b2fd      	uxtb	r5, r7
 8007a42:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8007a46:	469b      	mov	fp, r3
 8007a48:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8007a4c:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8007a50:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8007a54:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8007a58:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8007a5c:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8007a60:	0e3b      	lsrs	r3, r7, #24
 8007a62:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8007a66:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 8007a6a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007a6e:	fa5f fe84 	uxtb.w	lr, r4
 8007a72:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8007a76:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8007a7a:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8007a7e:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8007a82:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8007a86:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8007a8a:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 8007a8e:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8007a92:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007a96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a9a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8007a9e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007aa2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007aa6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007aaa:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8007aae:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8007ab2:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8007ab6:	0aa3      	lsrs	r3, r4, #10
 8007ab8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007abc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007ac0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007ac4:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8007ac8:	9303      	str	r3, [sp, #12]
 8007aca:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8007ace:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8007ad2:	4b42      	ldr	r3, [pc, #264]	; (8007bdc <D80_GENERIC+0x26c>)
 8007ad4:	9901      	ldr	r1, [sp, #4]
 8007ad6:	fb2b 1303 	smlad	r3, fp, r3, r1
 8007ada:	4941      	ldr	r1, [pc, #260]	; (8007be0 <D80_GENERIC+0x270>)
 8007adc:	fb28 3301 	smlad	r3, r8, r1, r3
 8007ae0:	4940      	ldr	r1, [pc, #256]	; (8007be4 <D80_GENERIC+0x274>)
 8007ae2:	fb2c 3301 	smlad	r3, ip, r1, r3
 8007ae6:	4940      	ldr	r1, [pc, #256]	; (8007be8 <D80_GENERIC+0x278>)
 8007ae8:	fb27 3301 	smlad	r3, r7, r1, r3
 8007aec:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8007af0:	fb2e 3301 	smlad	r3, lr, r1, r3
 8007af4:	493d      	ldr	r1, [pc, #244]	; (8007bec <D80_GENERIC+0x27c>)
 8007af6:	9c02      	ldr	r4, [sp, #8]
 8007af8:	fb2b 4401 	smlad	r4, fp, r1, r4
 8007afc:	493c      	ldr	r1, [pc, #240]	; (8007bf0 <D80_GENERIC+0x280>)
 8007afe:	fb28 4401 	smlad	r4, r8, r1, r4
 8007b02:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8007b06:	fb2c 4101 	smlad	r1, ip, r1, r4
 8007b0a:	4c3a      	ldr	r4, [pc, #232]	; (8007bf4 <D80_GENERIC+0x284>)
 8007b0c:	fb27 1104 	smlad	r1, r7, r4, r1
 8007b10:	4c39      	ldr	r4, [pc, #228]	; (8007bf8 <D80_GENERIC+0x288>)
 8007b12:	fb2e 1104 	smlad	r1, lr, r4, r1
 8007b16:	9101      	str	r1, [sp, #4]
 8007b18:	2101      	movs	r1, #1
 8007b1a:	fb2b fb01 	smuad	fp, fp, r1
 8007b1e:	4937      	ldr	r1, [pc, #220]	; (8007bfc <D80_GENERIC+0x28c>)
 8007b20:	fb28 b801 	smlad	r8, r8, r1, fp
 8007b24:	4d36      	ldr	r5, [pc, #216]	; (8007c00 <D80_GENERIC+0x290>)
 8007b26:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8007b2a:	4d36      	ldr	r5, [pc, #216]	; (8007c04 <D80_GENERIC+0x294>)
 8007b2c:	fb27 c705 	smlad	r7, r7, r5, ip
 8007b30:	4d35      	ldr	r5, [pc, #212]	; (8007c08 <D80_GENERIC+0x298>)
 8007b32:	fb2e 7105 	smlad	r1, lr, r5, r7
 8007b36:	9102      	str	r1, [sp, #8]
 8007b38:	9908      	ldr	r1, [sp, #32]
 8007b3a:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8007b3e:	b181      	cbz	r1, 8007b62 <D80_GENERIC+0x1f2>
 8007b40:	9c04      	ldr	r4, [sp, #16]
 8007b42:	9d05      	ldr	r5, [sp, #20]
 8007b44:	9305      	str	r3, [sp, #20]
 8007b46:	441c      	add	r4, r3
 8007b48:	1b64      	subs	r4, r4, r5
 8007b4a:	17e7      	asrs	r7, r4, #31
 8007b4c:	fba4 4501 	umull	r4, r5, r4, r1
 8007b50:	fb01 5507 	mla	r5, r1, r7, r5
 8007b54:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8007b58:	f145 0500 	adc.w	r5, r5, #0
 8007b5c:	0069      	lsls	r1, r5, #1
 8007b5e:	9104      	str	r1, [sp, #16]
 8007b60:	460b      	mov	r3, r1
 8007b62:	9e00      	ldr	r6, [sp, #0]
 8007b64:	9f06      	ldr	r7, [sp, #24]
 8007b66:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8007b68:	025b      	lsls	r3, r3, #9
 8007b6a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007b6e:	2500      	movs	r5, #0
 8007b70:	fb02 f101 	mul.w	r1, r2, r1
 8007b74:	fbc7 4503 	smlal	r4, r5, r7, r3
 8007b78:	9c07      	ldr	r4, [sp, #28]
 8007b7a:	10ab      	asrs	r3, r5, #2
 8007b7c:	f303 030f 	ssat	r3, #16, r3
 8007b80:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8007b84:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8007b86:	3201      	adds	r2, #1
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	dd13      	ble.n	8007bb4 <D80_GENERIC+0x244>
 8007b8c:	9b00      	ldr	r3, [sp, #0]
 8007b8e:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8007b92:	f1bc 0f01 	cmp.w	ip, #1
 8007b96:	f47f af0b 	bne.w	80079b0 <D80_GENERIC+0x40>
 8007b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b9c:	6884      	ldr	r4, [r0, #8]
 8007b9e:	069b      	lsls	r3, r3, #26
 8007ba0:	e890 0082 	ldmia.w	r0, {r1, r7}
 8007ba4:	f100 000a 	add.w	r0, r0, #10
 8007ba8:	f57f af3a 	bpl.w	8007a20 <D80_GENERIC+0xb0>
 8007bac:	ba49      	rev16	r1, r1
 8007bae:	ba7f      	rev16	r7, r7
 8007bb0:	ba64      	rev16	r4, r4
 8007bb2:	e735      	b.n	8007a20 <D80_GENERIC+0xb0>
 8007bb4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007bb8:	4632      	mov	r2, r6
 8007bba:	9b02      	ldr	r3, [sp, #8]
 8007bbc:	6093      	str	r3, [r2, #8]
 8007bbe:	9b01      	ldr	r3, [sp, #4]
 8007bc0:	60d3      	str	r3, [r2, #12]
 8007bc2:	9b04      	ldr	r3, [sp, #16]
 8007bc4:	6113      	str	r3, [r2, #16]
 8007bc6:	9b05      	ldr	r3, [sp, #20]
 8007bc8:	6153      	str	r3, [r2, #20]
 8007bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bcc:	f8c2 b01c 	str.w	fp, [r2, #28]
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	6193      	str	r3, [r2, #24]
 8007bd4:	b00b      	add	sp, #44	; 0x2c
 8007bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bda:	bf00      	nop
 8007bdc:	002d0024 	.word	0x002d0024
 8007be0:	001c0015 	.word	0x001c0015
 8007be4:	000f000a 	.word	0x000f000a
 8007be8:	00060003 	.word	0x00060003
 8007bec:	0037003f 	.word	0x0037003f
 8007bf0:	00450049 	.word	0x00450049
 8007bf4:	00490045 	.word	0x00490045
 8007bf8:	003f0037 	.word	0x003f0037
 8007bfc:	00030006 	.word	0x00030006
 8007c00:	000a000f 	.word	0x000a000f
 8007c04:	0015001c 	.word	0x0015001c
 8007c08:	0024002d 	.word	0x0024002d
 8007c0c:	20000000 	.word	0x20000000

08007c10 <D128_GENERIC>:
 8007c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c14:	b093      	sub	sp, #76	; 0x4c
 8007c16:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8007c18:	9005      	str	r0, [sp, #20]
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	9201      	str	r2, [sp, #4]
 8007c1e:	6912      	ldr	r2, [r2, #16]
 8007c20:	920c      	str	r2, [sp, #48]	; 0x30
 8007c22:	4602      	mov	r2, r0
 8007c24:	6940      	ldr	r0, [r0, #20]
 8007c26:	900d      	str	r0, [sp, #52]	; 0x34
 8007c28:	4610      	mov	r0, r2
 8007c2a:	4614      	mov	r4, r2
 8007c2c:	6992      	ldr	r2, [r2, #24]
 8007c2e:	9211      	str	r2, [sp, #68]	; 0x44
 8007c30:	69c2      	ldr	r2, [r0, #28]
 8007c32:	9202      	str	r2, [sp, #8]
 8007c34:	68e2      	ldr	r2, [r4, #12]
 8007c36:	6880      	ldr	r0, [r0, #8]
 8007c38:	9203      	str	r2, [sp, #12]
 8007c3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007c3c:	9004      	str	r0, [sp, #16]
 8007c3e:	920e      	str	r2, [sp, #56]	; 0x38
 8007c40:	910f      	str	r1, [sp, #60]	; 0x3c
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 819b 	beq.w	8007f7e <D128_GENERIC+0x36e>
 8007c48:	6a23      	ldr	r3, [r4, #32]
 8007c4a:	9310      	str	r3, [sp, #64]	; 0x40
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8007ff8 <D128_GENERIC+0x3e8>
 8007c52:	9306      	str	r3, [sp, #24]
 8007c54:	e17a      	b.n	8007f4c <D128_GENERIC+0x33c>
 8007c56:	b2d2      	uxtb	r2, r2
 8007c58:	9d05      	ldr	r5, [sp, #20]
 8007c5a:	b214      	sxth	r4, r2
 8007c5c:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8007c60:	4250      	negs	r0, r2
 8007c62:	eb05 010a 	add.w	r1, r5, sl
 8007c66:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c6a:	eb01 0800 	add.w	r8, r1, r0
 8007c6e:	eb0b 0c04 	add.w	ip, fp, r4
 8007c72:	eb08 070c 	add.w	r7, r8, ip
 8007c76:	183b      	adds	r3, r7, r0
 8007c78:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8007c7c:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8007c80:	eb0e 0604 	add.w	r6, lr, r4
 8007c84:	9307      	str	r3, [sp, #28]
 8007c86:	1833      	adds	r3, r6, r0
 8007c88:	9305      	str	r3, [sp, #20]
 8007c8a:	462b      	mov	r3, r5
 8007c8c:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8007c90:	f8cd a020 	str.w	sl, [sp, #32]
 8007c94:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8007c98:	f813 c002 	ldrb.w	ip, [r3, r2]
 8007c9c:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8007ca0:	5c3a      	ldrb	r2, [r7, r0]
 8007ca2:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8007ca6:	781f      	ldrb	r7, [r3, #0]
 8007ca8:	9b07      	ldr	r3, [sp, #28]
 8007caa:	9d05      	ldr	r5, [sp, #20]
 8007cac:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8007cb0:	5c09      	ldrb	r1, [r1, r0]
 8007cb2:	9709      	str	r7, [sp, #36]	; 0x24
 8007cb4:	9307      	str	r3, [sp, #28]
 8007cb6:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8007cba:	5c33      	ldrb	r3, [r6, r0]
 8007cbc:	0412      	lsls	r2, r2, #16
 8007cbe:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8007cc2:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8007cc6:	9d08      	ldr	r5, [sp, #32]
 8007cc8:	eb06 0a04 	add.w	sl, r6, r4
 8007ccc:	0409      	lsls	r1, r1, #16
 8007cce:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8007cd2:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8007cd6:	5d36      	ldrb	r6, [r6, r4]
 8007cd8:	9c05      	ldr	r4, [sp, #20]
 8007cda:	042d      	lsls	r5, r5, #16
 8007cdc:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8007ce0:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8007ce4:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8007ce8:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8007cec:	eb0a 0c00 	add.w	ip, sl, r0
 8007cf0:	041b      	lsls	r3, r3, #16
 8007cf2:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8007cf6:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8007cfa:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8007cfe:	9d07      	ldr	r5, [sp, #28]
 8007d00:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8007d04:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8007d08:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007d0a:	4458      	add	r0, fp
 8007d0c:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8007d10:	9005      	str	r0, [sp, #20]
 8007d12:	4439      	add	r1, r7
 8007d14:	442a      	add	r2, r5
 8007d16:	44b2      	add	sl, r6
 8007d18:	1918      	adds	r0, r3, r4
 8007d1a:	b2cb      	uxtb	r3, r1
 8007d1c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8007d20:	9e02      	ldr	r6, [sp, #8]
 8007d22:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007d26:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8007d2a:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8007d2e:	441e      	add	r6, r3
 8007d30:	0e09      	lsrs	r1, r1, #24
 8007d32:	4633      	mov	r3, r6
 8007d34:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8007d38:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8007d3c:	b2d4      	uxtb	r4, r2
 8007d3e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8007d42:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8007d46:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8007d4a:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8007d4e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007d52:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8007d56:	0e12      	lsrs	r2, r2, #24
 8007d58:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8007d5c:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8007d60:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8007d64:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8007d68:	9702      	str	r7, [sp, #8]
 8007d6a:	b2c2      	uxtb	r2, r0
 8007d6c:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8007d70:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8007d74:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8007d78:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8007d7c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8007d80:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8007d84:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8007d88:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8007d8c:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8007d90:	0e00      	lsrs	r0, r0, #24
 8007d92:	fa5f f68a 	uxtb.w	r6, sl
 8007d96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d9c:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8007da0:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8007da4:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8007da8:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8007dac:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007db0:	950a      	str	r5, [sp, #40]	; 0x28
 8007db2:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8007db6:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8007dba:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8007dbe:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007dc2:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8007dc6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007dca:	920b      	str	r2, [sp, #44]	; 0x2c
 8007dcc:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8007dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dd2:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8007dd6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007dda:	9307      	str	r3, [sp, #28]
 8007ddc:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8007de0:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8007de4:	9b02      	ldr	r3, [sp, #8]
 8007de6:	f8cd c008 	str.w	ip, [sp, #8]
 8007dea:	4694      	mov	ip, r2
 8007dec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dee:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8007df2:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8007df6:	9a02      	ldr	r2, [sp, #8]
 8007df8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007dfc:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8007e00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007e04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e06:	f8cd a020 	str.w	sl, [sp, #32]
 8007e0a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007e0e:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8007e12:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007e16:	9b07      	ldr	r3, [sp, #28]
 8007e18:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007e1c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8007e20:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8007e24:	9a08      	ldr	r2, [sp, #32]
 8007e26:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e2e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8007e32:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007e36:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8007e3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007e3e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8007e42:	0a96      	lsrs	r6, r2, #10
 8007e44:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007e48:	9602      	str	r6, [sp, #8]
 8007e4a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8007e4e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8007e52:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8007e56:	4e53      	ldr	r6, [pc, #332]	; (8007fa4 <D128_GENERIC+0x394>)
 8007e58:	9f03      	ldr	r7, [sp, #12]
 8007e5a:	fb2c 7606 	smlad	r6, ip, r6, r7
 8007e5e:	4f52      	ldr	r7, [pc, #328]	; (8007fa8 <D128_GENERIC+0x398>)
 8007e60:	fb2a 6607 	smlad	r6, sl, r7, r6
 8007e64:	4f51      	ldr	r7, [pc, #324]	; (8007fac <D128_GENERIC+0x39c>)
 8007e66:	fb21 6607 	smlad	r6, r1, r7, r6
 8007e6a:	4f51      	ldr	r7, [pc, #324]	; (8007fb0 <D128_GENERIC+0x3a0>)
 8007e6c:	fb24 6607 	smlad	r6, r4, r7, r6
 8007e70:	4f50      	ldr	r7, [pc, #320]	; (8007fb4 <D128_GENERIC+0x3a4>)
 8007e72:	fb28 6607 	smlad	r6, r8, r7, r6
 8007e76:	4f50      	ldr	r7, [pc, #320]	; (8007fb8 <D128_GENERIC+0x3a8>)
 8007e78:	fb20 6607 	smlad	r6, r0, r7, r6
 8007e7c:	4f4f      	ldr	r7, [pc, #316]	; (8007fbc <D128_GENERIC+0x3ac>)
 8007e7e:	fb23 6607 	smlad	r6, r3, r7, r6
 8007e82:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8007e86:	fb25 6607 	smlad	r6, r5, r7, r6
 8007e8a:	4f4d      	ldr	r7, [pc, #308]	; (8007fc0 <D128_GENERIC+0x3b0>)
 8007e8c:	9a04      	ldr	r2, [sp, #16]
 8007e8e:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8007e92:	4a4c      	ldr	r2, [pc, #304]	; (8007fc4 <D128_GENERIC+0x3b4>)
 8007e94:	fb2a ee02 	smlad	lr, sl, r2, lr
 8007e98:	4f4b      	ldr	r7, [pc, #300]	; (8007fc8 <D128_GENERIC+0x3b8>)
 8007e9a:	fb21 ee07 	smlad	lr, r1, r7, lr
 8007e9e:	4f4b      	ldr	r7, [pc, #300]	; (8007fcc <D128_GENERIC+0x3bc>)
 8007ea0:	fb24 ee07 	smlad	lr, r4, r7, lr
 8007ea4:	4f4a      	ldr	r7, [pc, #296]	; (8007fd0 <D128_GENERIC+0x3c0>)
 8007ea6:	fb28 ee07 	smlad	lr, r8, r7, lr
 8007eaa:	4f4a      	ldr	r7, [pc, #296]	; (8007fd4 <D128_GENERIC+0x3c4>)
 8007eac:	fb20 ee07 	smlad	lr, r0, r7, lr
 8007eb0:	4f49      	ldr	r7, [pc, #292]	; (8007fd8 <D128_GENERIC+0x3c8>)
 8007eb2:	fb23 e707 	smlad	r7, r3, r7, lr
 8007eb6:	f8df e144 	ldr.w	lr, [pc, #324]	; 8007ffc <D128_GENERIC+0x3ec>
 8007eba:	fb25 720e 	smlad	r2, r5, lr, r7
 8007ebe:	f04f 0b01 	mov.w	fp, #1
 8007ec2:	9203      	str	r2, [sp, #12]
 8007ec4:	fb2c fb0b 	smuad	fp, ip, fp
 8007ec8:	4f44      	ldr	r7, [pc, #272]	; (8007fdc <D128_GENERIC+0x3cc>)
 8007eca:	fb2a ba07 	smlad	sl, sl, r7, fp
 8007ece:	4f44      	ldr	r7, [pc, #272]	; (8007fe0 <D128_GENERIC+0x3d0>)
 8007ed0:	fb21 aa07 	smlad	sl, r1, r7, sl
 8007ed4:	4f43      	ldr	r7, [pc, #268]	; (8007fe4 <D128_GENERIC+0x3d4>)
 8007ed6:	fb24 aa07 	smlad	sl, r4, r7, sl
 8007eda:	4f43      	ldr	r7, [pc, #268]	; (8007fe8 <D128_GENERIC+0x3d8>)
 8007edc:	fb28 a707 	smlad	r7, r8, r7, sl
 8007ee0:	4a42      	ldr	r2, [pc, #264]	; (8007fec <D128_GENERIC+0x3dc>)
 8007ee2:	fb20 7702 	smlad	r7, r0, r2, r7
 8007ee6:	4a42      	ldr	r2, [pc, #264]	; (8007ff0 <D128_GENERIC+0x3e0>)
 8007ee8:	fb23 7702 	smlad	r7, r3, r2, r7
 8007eec:	4b41      	ldr	r3, [pc, #260]	; (8007ff4 <D128_GENERIC+0x3e4>)
 8007eee:	fb25 7303 	smlad	r3, r5, r3, r7
 8007ef2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007ef4:	9304      	str	r3, [sp, #16]
 8007ef6:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8007efa:	b185      	cbz	r5, 8007f1e <D128_GENERIC+0x30e>
 8007efc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007efe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f00:	960d      	str	r6, [sp, #52]	; 0x34
 8007f02:	4432      	add	r2, r6
 8007f04:	1a52      	subs	r2, r2, r1
 8007f06:	17d1      	asrs	r1, r2, #31
 8007f08:	fba2 2305 	umull	r2, r3, r2, r5
 8007f0c:	fb05 3301 	mla	r3, r5, r1, r3
 8007f10:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8007f14:	f143 0300 	adc.w	r3, r3, #0
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	930c      	str	r3, [sp, #48]	; 0x30
 8007f1c:	461e      	mov	r6, r3
 8007f1e:	9801      	ldr	r0, [sp, #4]
 8007f20:	9c06      	ldr	r4, [sp, #24]
 8007f22:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8007f24:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007f26:	01f6      	lsls	r6, r6, #7
 8007f28:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	fbc5 2306 	smlal	r2, r3, r5, r6
 8007f32:	fb04 f101 	mul.w	r1, r4, r1
 8007f36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f38:	109b      	asrs	r3, r3, #2
 8007f3a:	f303 030f 	ssat	r3, #16, r3
 8007f3e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8007f42:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8007f44:	1c62      	adds	r2, r4, #1
 8007f46:	4293      	cmp	r3, r2
 8007f48:	9206      	str	r2, [sp, #24]
 8007f4a:	dd18      	ble.n	8007f7e <D128_GENERIC+0x36e>
 8007f4c:	9b01      	ldr	r3, [sp, #4]
 8007f4e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007f50:	2a01      	cmp	r2, #1
 8007f52:	f47f ae80 	bne.w	8007c56 <D128_GENERIC+0x46>
 8007f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f58:	9d05      	ldr	r5, [sp, #20]
 8007f5a:	069b      	lsls	r3, r3, #26
 8007f5c:	6829      	ldr	r1, [r5, #0]
 8007f5e:	686a      	ldr	r2, [r5, #4]
 8007f60:	68a8      	ldr	r0, [r5, #8]
 8007f62:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8007f66:	f105 0410 	add.w	r4, r5, #16
 8007f6a:	d506      	bpl.n	8007f7a <D128_GENERIC+0x36a>
 8007f6c:	ba49      	rev16	r1, r1
 8007f6e:	ba52      	rev16	r2, r2
 8007f70:	ba40      	rev16	r0, r0
 8007f72:	fa9a fa9a 	rev16.w	sl, sl
 8007f76:	9405      	str	r4, [sp, #20]
 8007f78:	e6cf      	b.n	8007d1a <D128_GENERIC+0x10a>
 8007f7a:	9405      	str	r4, [sp, #20]
 8007f7c:	e6cd      	b.n	8007d1a <D128_GENERIC+0x10a>
 8007f7e:	9a01      	ldr	r2, [sp, #4]
 8007f80:	9904      	ldr	r1, [sp, #16]
 8007f82:	6091      	str	r1, [r2, #8]
 8007f84:	9903      	ldr	r1, [sp, #12]
 8007f86:	60d1      	str	r1, [r2, #12]
 8007f88:	9b02      	ldr	r3, [sp, #8]
 8007f8a:	61d3      	str	r3, [r2, #28]
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	4613      	mov	r3, r2
 8007f90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f92:	610a      	str	r2, [r1, #16]
 8007f94:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f96:	6159      	str	r1, [r3, #20]
 8007f98:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007f9a:	6199      	str	r1, [r3, #24]
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	b013      	add	sp, #76	; 0x4c
 8007fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa4:	00780069 	.word	0x00780069
 8007fa8:	005b004e 	.word	0x005b004e
 8007fac:	00420037 	.word	0x00420037
 8007fb0:	002d0024 	.word	0x002d0024
 8007fb4:	001c0015 	.word	0x001c0015
 8007fb8:	000f000a 	.word	0x000f000a
 8007fbc:	00060003 	.word	0x00060003
 8007fc0:	00880096 	.word	0x00880096
 8007fc4:	00a200ac 	.word	0x00a200ac
 8007fc8:	00b400ba 	.word	0x00b400ba
 8007fcc:	00be00c0 	.word	0x00be00c0
 8007fd0:	00c000be 	.word	0x00c000be
 8007fd4:	00ba00b4 	.word	0x00ba00b4
 8007fd8:	00ac00a2 	.word	0x00ac00a2
 8007fdc:	00030006 	.word	0x00030006
 8007fe0:	000a000f 	.word	0x000a000f
 8007fe4:	0015001c 	.word	0x0015001c
 8007fe8:	0024002d 	.word	0x0024002d
 8007fec:	00370042 	.word	0x00370042
 8007ff0:	004e005b 	.word	0x004e005b
 8007ff4:	00690078 	.word	0x00690078
 8007ff8:	20000000 	.word	0x20000000
 8007ffc:	00960088 	.word	0x00960088

08008000 <D16_1CH_HTONS_VOL_HP>:
 8008000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	4691      	mov	r9, r2
 8008006:	b083      	sub	sp, #12
 8008008:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800800a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800800e:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8008012:	9300      	str	r3, [sp, #0]
 8008014:	4680      	mov	r8, r0
 8008016:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800801a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800801e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008022:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8008026:	9401      	str	r4, [sp, #4]
 8008028:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800802c:	f8d9 e020 	ldr.w	lr, [r9, #32]
 8008030:	2a00      	cmp	r2, #0
 8008032:	d04e      	beq.n	80080d2 <D16_1CH_HTONS_VOL_HP+0xd2>
 8008034:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 80080e0 <D16_1CH_HTONS_VOL_HP+0xe0>
 8008038:	1e8c      	subs	r4, r1, #2
 800803a:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800803e:	f858 2b02 	ldr.w	r2, [r8], #2
 8008042:	ba52      	rev16	r2, r2
 8008044:	b2d6      	uxtb	r6, r2
 8008046:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800804a:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800804e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8008052:	4413      	add	r3, r2
 8008054:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8008058:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800805c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008064:	0a93      	lsrs	r3, r2, #10
 8008066:	4a1c      	ldr	r2, [pc, #112]	; (80080d8 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8008068:	fb21 5202 	smlad	r2, r1, r2, r5
 800806c:	4d1b      	ldr	r5, [pc, #108]	; (80080dc <D16_1CH_HTONS_VOL_HP+0xdc>)
 800806e:	fb21 f505 	smuad	r5, r1, r5
 8008072:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8008076:	4410      	add	r0, r2
 8008078:	1bc0      	subs	r0, r0, r7
 800807a:	17c7      	asrs	r7, r0, #31
 800807c:	fba0 010e 	umull	r0, r1, r0, lr
 8008080:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8008084:	fb0e 1107 	mla	r1, lr, r7, r1
 8008088:	f141 0100 	adc.w	r1, r1, #0
 800808c:	0448      	lsls	r0, r1, #17
 800808e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008092:	2700      	movs	r7, #0
 8008094:	fbc0 670a 	smlal	r6, r7, r0, sl
 8008098:	45d8      	cmp	r8, fp
 800809a:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800809e:	ea4f 01a7 	mov.w	r1, r7, asr #2
 80080a2:	4617      	mov	r7, r2
 80080a4:	f301 010f 	ssat	r1, #16, r1
 80080a8:	f824 1f02 	strh.w	r1, [r4, #2]!
 80080ac:	d1c7      	bne.n	800803e <D16_1CH_HTONS_VOL_HP+0x3e>
 80080ae:	9901      	ldr	r1, [sp, #4]
 80080b0:	f8c9 301c 	str.w	r3, [r9, #28]
 80080b4:	9b00      	ldr	r3, [sp, #0]
 80080b6:	f8c9 0010 	str.w	r0, [r9, #16]
 80080ba:	2000      	movs	r0, #0
 80080bc:	f8c9 5008 	str.w	r5, [r9, #8]
 80080c0:	f8c9 100c 	str.w	r1, [r9, #12]
 80080c4:	f8c9 2014 	str.w	r2, [r9, #20]
 80080c8:	f8c9 3018 	str.w	r3, [r9, #24]
 80080cc:	b003      	add	sp, #12
 80080ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d2:	463a      	mov	r2, r7
 80080d4:	4621      	mov	r1, r4
 80080d6:	e7eb      	b.n	80080b0 <D16_1CH_HTONS_VOL_HP+0xb0>
 80080d8:	00030001 	.word	0x00030001
 80080dc:	00010003 	.word	0x00010003
 80080e0:	20000000 	.word	0x20000000

080080e4 <D24_1CH_HTONS_VOL_HP>:
 80080e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e8:	b089      	sub	sp, #36	; 0x24
 80080ea:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80080ec:	6996      	ldr	r6, [r2, #24]
 80080ee:	9304      	str	r3, [sp, #16]
 80080f0:	6b17      	ldr	r7, [r2, #48]	; 0x30
 80080f2:	9207      	str	r2, [sp, #28]
 80080f4:	6915      	ldr	r5, [r2, #16]
 80080f6:	6954      	ldr	r4, [r2, #20]
 80080f8:	9606      	str	r6, [sp, #24]
 80080fa:	6893      	ldr	r3, [r2, #8]
 80080fc:	69d6      	ldr	r6, [r2, #28]
 80080fe:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8008102:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8008106:	9a04      	ldr	r2, [sp, #16]
 8008108:	9705      	str	r7, [sp, #20]
 800810a:	2a00      	cmp	r2, #0
 800810c:	d07e      	beq.n	800820c <D24_1CH_HTONS_VOL_HP+0x128>
 800810e:	f1a1 0b02 	sub.w	fp, r1, #2
 8008112:	2700      	movs	r7, #0
 8008114:	46a8      	mov	r8, r5
 8008116:	f8cd b004 	str.w	fp, [sp, #4]
 800811a:	4655      	mov	r5, sl
 800811c:	46e3      	mov	fp, ip
 800811e:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8008218 <D24_1CH_HTONS_VOL_HP+0x134>
 8008122:	46ba      	mov	sl, r7
 8008124:	469c      	mov	ip, r3
 8008126:	e055      	b.n	80081d4 <D24_1CH_HTONS_VOL_HP+0xf0>
 8008128:	7802      	ldrb	r2, [r0, #0]
 800812a:	78c3      	ldrb	r3, [r0, #3]
 800812c:	7841      	ldrb	r1, [r0, #1]
 800812e:	0212      	lsls	r2, r2, #8
 8008130:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8008134:	440b      	add	r3, r1
 8008136:	3002      	adds	r0, #2
 8008138:	b2d9      	uxtb	r1, r3
 800813a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800813e:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 8008142:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8008146:	0c1b      	lsrs	r3, r3, #16
 8008148:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800814c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8008150:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8008154:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8008158:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800815c:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8008160:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8008164:	4a2a      	ldr	r2, [pc, #168]	; (8008210 <D24_1CH_HTONS_VOL_HP+0x12c>)
 8008166:	fb23 b102 	smlad	r1, r3, r2, fp
 800816a:	4a2a      	ldr	r2, [pc, #168]	; (8008214 <D24_1CH_HTONS_VOL_HP+0x130>)
 800816c:	fb23 cb02 	smlad	fp, r3, r2, ip
 8008170:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8008174:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8008178:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800817c:	2201      	movs	r2, #1
 800817e:	fb23 f702 	smuad	r7, r3, r2
 8008182:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 8008186:	eb01 0208 	add.w	r2, r1, r8
 800818a:	1b12      	subs	r2, r2, r4
 800818c:	17d4      	asrs	r4, r2, #31
 800818e:	fba2 2305 	umull	r2, r3, r2, r5
 8008192:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8008196:	fb05 3304 	mla	r3, r5, r4, r3
 800819a:	f143 0300 	adc.w	r3, r3, #0
 800819e:	9c05      	ldr	r4, [sp, #20]
 80081a0:	03da      	lsls	r2, r3, #15
 80081a2:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80081a6:	f04f 0900 	mov.w	r9, #0
 80081aa:	fbc4 8902 	smlal	r8, r9, r4, r2
 80081ae:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80081b2:	9a01      	ldr	r2, [sp, #4]
 80081b4:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80081b8:	9b03      	ldr	r3, [sp, #12]
 80081ba:	109b      	asrs	r3, r3, #2
 80081bc:	f303 030f 	ssat	r3, #16, r3
 80081c0:	f822 3f02 	strh.w	r3, [r2, #2]!
 80081c4:	9b04      	ldr	r3, [sp, #16]
 80081c6:	9201      	str	r2, [sp, #4]
 80081c8:	f10a 0a01 	add.w	sl, sl, #1
 80081cc:	459a      	cmp	sl, r3
 80081ce:	44bc      	add	ip, r7
 80081d0:	460c      	mov	r4, r1
 80081d2:	d00b      	beq.n	80081ec <D24_1CH_HTONS_VOL_HP+0x108>
 80081d4:	f01a 0f01 	tst.w	sl, #1
 80081d8:	d0a6      	beq.n	8008128 <D24_1CH_HTONS_VOL_HP+0x44>
 80081da:	78c2      	ldrb	r2, [r0, #3]
 80081dc:	7883      	ldrb	r3, [r0, #2]
 80081de:	f810 1b04 	ldrb.w	r1, [r0], #4
 80081e2:	0212      	lsls	r2, r2, #8
 80081e4:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 80081e8:	440b      	add	r3, r1
 80081ea:	e7a5      	b.n	8008138 <D24_1CH_HTONS_VOL_HP+0x54>
 80081ec:	4663      	mov	r3, ip
 80081ee:	4645      	mov	r5, r8
 80081f0:	46dc      	mov	ip, fp
 80081f2:	9807      	ldr	r0, [sp, #28]
 80081f4:	6141      	str	r1, [r0, #20]
 80081f6:	9906      	ldr	r1, [sp, #24]
 80081f8:	6083      	str	r3, [r0, #8]
 80081fa:	f8c0 c00c 	str.w	ip, [r0, #12]
 80081fe:	61c6      	str	r6, [r0, #28]
 8008200:	6105      	str	r5, [r0, #16]
 8008202:	6181      	str	r1, [r0, #24]
 8008204:	2000      	movs	r0, #0
 8008206:	b009      	add	sp, #36	; 0x24
 8008208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820c:	4621      	mov	r1, r4
 800820e:	e7f0      	b.n	80081f2 <D24_1CH_HTONS_VOL_HP+0x10e>
 8008210:	00030001 	.word	0x00030001
 8008214:	00060007 	.word	0x00060007
 8008218:	20000000 	.word	0x20000000

0800821c <D32_1CH_HTONS_VOL_HP>:
 800821c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008220:	4692      	mov	sl, r2
 8008222:	b087      	sub	sp, #28
 8008224:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8008226:	f8da 3018 	ldr.w	r3, [sl, #24]
 800822a:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800822e:	9304      	str	r3, [sp, #16]
 8008230:	f8da 4010 	ldr.w	r4, [sl, #16]
 8008234:	f8da 8014 	ldr.w	r8, [sl, #20]
 8008238:	f8da 601c 	ldr.w	r6, [sl, #28]
 800823c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008240:	f8da e00c 	ldr.w	lr, [sl, #12]
 8008244:	9501      	str	r5, [sp, #4]
 8008246:	f8da c020 	ldr.w	ip, [sl, #32]
 800824a:	2a00      	cmp	r2, #0
 800824c:	d07b      	beq.n	8008346 <D32_1CH_HTONS_VOL_HP+0x12a>
 800824e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008252:	4f3e      	ldr	r7, [pc, #248]	; (800834c <D32_1CH_HTONS_VOL_HP+0x130>)
 8008254:	f8cd c00c 	str.w	ip, [sp, #12]
 8008258:	9202      	str	r2, [sp, #8]
 800825a:	460d      	mov	r5, r1
 800825c:	46a1      	mov	r9, r4
 800825e:	4684      	mov	ip, r0
 8008260:	f8cd a014 	str.w	sl, [sp, #20]
 8008264:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008268:	ba49      	rev16	r1, r1
 800826a:	b2c8      	uxtb	r0, r1
 800826c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8008270:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8008274:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8008278:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800827c:	0e09      	lsrs	r1, r1, #24
 800827e:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8008282:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8008286:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800828a:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800828e:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 8008292:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8008296:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800829a:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800829e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80082a2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80082a6:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80082aa:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 80082ae:	4a28      	ldr	r2, [pc, #160]	; (8008350 <D32_1CH_HTONS_VOL_HP+0x134>)
 80082b0:	fb20 e202 	smlad	r2, r0, r2, lr
 80082b4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80082b8:	fb2a 2101 	smlad	r1, sl, r1, r2
 80082bc:	4a25      	ldr	r2, [pc, #148]	; (8008354 <D32_1CH_HTONS_VOL_HP+0x138>)
 80082be:	fb20 3302 	smlad	r3, r0, r2, r3
 80082c2:	4a25      	ldr	r2, [pc, #148]	; (8008358 <D32_1CH_HTONS_VOL_HP+0x13c>)
 80082c4:	fb2a 3e02 	smlad	lr, sl, r2, r3
 80082c8:	2301      	movs	r3, #1
 80082ca:	fb20 f003 	smuad	r0, r0, r3
 80082ce:	4b23      	ldr	r3, [pc, #140]	; (800835c <D32_1CH_HTONS_VOL_HP+0x140>)
 80082d0:	fb2a 0303 	smlad	r3, sl, r3, r0
 80082d4:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 80082d8:	9c03      	ldr	r4, [sp, #12]
 80082da:	eb02 0009 	add.w	r0, r2, r9
 80082de:	eba0 0008 	sub.w	r0, r0, r8
 80082e2:	ea4f 7be0 	mov.w	fp, r0, asr #31
 80082e6:	fba0 0104 	umull	r0, r1, r0, r4
 80082ea:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80082ee:	fb04 110b 	mla	r1, r4, fp, r1
 80082f2:	f141 0100 	adc.w	r1, r1, #0
 80082f6:	9c01      	ldr	r4, [sp, #4]
 80082f8:	0388      	lsls	r0, r1, #14
 80082fa:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80082fe:	f04f 0900 	mov.w	r9, #0
 8008302:	fbc0 8904 	smlal	r8, r9, r0, r4
 8008306:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800830a:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800830e:	f300 000f 	ssat	r0, #16, r0
 8008312:	9902      	ldr	r1, [sp, #8]
 8008314:	f825 0b02 	strh.w	r0, [r5], #2
 8008318:	428d      	cmp	r5, r1
 800831a:	4690      	mov	r8, r2
 800831c:	d1a2      	bne.n	8008264 <D32_1CH_HTONS_VOL_HP+0x48>
 800831e:	f8dd a014 	ldr.w	sl, [sp, #20]
 8008322:	464c      	mov	r4, r9
 8008324:	f8ca 3008 	str.w	r3, [sl, #8]
 8008328:	9b04      	ldr	r3, [sp, #16]
 800832a:	f8ca e00c 	str.w	lr, [sl, #12]
 800832e:	2000      	movs	r0, #0
 8008330:	f8ca 601c 	str.w	r6, [sl, #28]
 8008334:	f8ca 4010 	str.w	r4, [sl, #16]
 8008338:	f8ca 2014 	str.w	r2, [sl, #20]
 800833c:	f8ca 3018 	str.w	r3, [sl, #24]
 8008340:	b007      	add	sp, #28
 8008342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008346:	4642      	mov	r2, r8
 8008348:	e7ec      	b.n	8008324 <D32_1CH_HTONS_VOL_HP+0x108>
 800834a:	bf00      	nop
 800834c:	20000000 	.word	0x20000000
 8008350:	00060003 	.word	0x00060003
 8008354:	000a000c 	.word	0x000a000c
 8008358:	000c000a 	.word	0x000c000a
 800835c:	00030006 	.word	0x00030006

08008360 <D48_1CH_HTONS_VOL_HP>:
 8008360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008364:	4613      	mov	r3, r2
 8008366:	461c      	mov	r4, r3
 8008368:	b087      	sub	sp, #28
 800836a:	4625      	mov	r5, r4
 800836c:	4626      	mov	r6, r4
 800836e:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8008370:	9205      	str	r2, [sp, #20]
 8008372:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8008374:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8008378:	9501      	str	r5, [sp, #4]
 800837a:	4680      	mov	r8, r0
 800837c:	6a35      	ldr	r5, [r6, #32]
 800837e:	6918      	ldr	r0, [r3, #16]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	9304      	str	r3, [sp, #16]
 8008384:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8008388:	68a3      	ldr	r3, [r4, #8]
 800838a:	9502      	str	r5, [sp, #8]
 800838c:	68e4      	ldr	r4, [r4, #12]
 800838e:	2a00      	cmp	r2, #0
 8008390:	f000 808c 	beq.w	80084ac <D48_1CH_HTONS_VOL_HP+0x14c>
 8008394:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008398:	4d45      	ldr	r5, [pc, #276]	; (80084b0 <D48_1CH_HTONS_VOL_HP+0x150>)
 800839a:	9203      	str	r2, [sp, #12]
 800839c:	468c      	mov	ip, r1
 800839e:	e898 0044 	ldmia.w	r8, {r2, r6}
 80083a2:	f108 0806 	add.w	r8, r8, #6
 80083a6:	ba52      	rev16	r2, r2
 80083a8:	ba76      	rev16	r6, r6
 80083aa:	b2d7      	uxtb	r7, r2
 80083ac:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80083b0:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 80083b4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80083b8:	f3c2 4707 	ubfx	r7, r2, #16, #8
 80083bc:	0e12      	lsrs	r2, r2, #24
 80083be:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 80083c2:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 80083c6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80083ca:	fa5f fb86 	uxtb.w	fp, r6
 80083ce:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80083d2:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 80083d6:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 80083da:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 80083de:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 80083e2:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80083e6:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80083ea:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 80083ee:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80083f2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80083f6:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 80083fa:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80083fe:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008402:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008406:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800840a:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800840e:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 8008412:	4a28      	ldr	r2, [pc, #160]	; (80084b4 <D48_1CH_HTONS_VOL_HP+0x154>)
 8008414:	fb2a 4202 	smlad	r2, sl, r2, r4
 8008418:	4927      	ldr	r1, [pc, #156]	; (80084b8 <D48_1CH_HTONS_VOL_HP+0x158>)
 800841a:	fb27 2201 	smlad	r2, r7, r1, r2
 800841e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008422:	fb26 2201 	smlad	r2, r6, r1, r2
 8008426:	4925      	ldr	r1, [pc, #148]	; (80084bc <D48_1CH_HTONS_VOL_HP+0x15c>)
 8008428:	fb2a 3401 	smlad	r4, sl, r1, r3
 800842c:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8008430:	fb27 4403 	smlad	r4, r7, r3, r4
 8008434:	4b22      	ldr	r3, [pc, #136]	; (80084c0 <D48_1CH_HTONS_VOL_HP+0x160>)
 8008436:	fb26 4403 	smlad	r4, r6, r3, r4
 800843a:	2101      	movs	r1, #1
 800843c:	fb2a fa01 	smuad	sl, sl, r1
 8008440:	4b20      	ldr	r3, [pc, #128]	; (80084c4 <D48_1CH_HTONS_VOL_HP+0x164>)
 8008442:	fb27 a703 	smlad	r7, r7, r3, sl
 8008446:	4b20      	ldr	r3, [pc, #128]	; (80084c8 <D48_1CH_HTONS_VOL_HP+0x168>)
 8008448:	fb26 7303 	smlad	r3, r6, r3, r7
 800844c:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 8008450:	9e02      	ldr	r6, [sp, #8]
 8008452:	9f01      	ldr	r7, [sp, #4]
 8008454:	4410      	add	r0, r2
 8008456:	eba0 0009 	sub.w	r0, r0, r9
 800845a:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800845e:	fba0 0106 	umull	r0, r1, r0, r6
 8008462:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8008466:	fb06 110a 	mla	r1, r6, sl, r1
 800846a:	f141 0100 	adc.w	r1, r1, #0
 800846e:	0308      	lsls	r0, r1, #12
 8008470:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8008474:	f04f 0a00 	mov.w	sl, #0
 8008478:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800847c:	4657      	mov	r7, sl
 800847e:	10b8      	asrs	r0, r7, #2
 8008480:	f300 000f 	ssat	r0, #16, r0
 8008484:	f82c 0b02 	strh.w	r0, [ip], #2
 8008488:	0048      	lsls	r0, r1, #1
 800848a:	9903      	ldr	r1, [sp, #12]
 800848c:	458c      	cmp	ip, r1
 800848e:	4691      	mov	r9, r2
 8008490:	d185      	bne.n	800839e <D48_1CH_HTONS_VOL_HP+0x3e>
 8008492:	9d05      	ldr	r5, [sp, #20]
 8008494:	616a      	str	r2, [r5, #20]
 8008496:	9a04      	ldr	r2, [sp, #16]
 8008498:	6128      	str	r0, [r5, #16]
 800849a:	2000      	movs	r0, #0
 800849c:	60ab      	str	r3, [r5, #8]
 800849e:	60ec      	str	r4, [r5, #12]
 80084a0:	f8c5 e01c 	str.w	lr, [r5, #28]
 80084a4:	61aa      	str	r2, [r5, #24]
 80084a6:	b007      	add	sp, #28
 80084a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ac:	464a      	mov	r2, r9
 80084ae:	e7f0      	b.n	8008492 <D48_1CH_HTONS_VOL_HP+0x132>
 80084b0:	20000000 	.word	0x20000000
 80084b4:	000f000a 	.word	0x000f000a
 80084b8:	00060003 	.word	0x00060003
 80084bc:	00150019 	.word	0x00150019
 80084c0:	00190015 	.word	0x00190015
 80084c4:	00030006 	.word	0x00030006
 80084c8:	000a000f 	.word	0x000a000f

080084cc <D64_1CH_HTONS_VOL_HP>:
 80084cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d0:	b089      	sub	sp, #36	; 0x24
 80084d2:	4614      	mov	r4, r2
 80084d4:	9207      	str	r2, [sp, #28]
 80084d6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80084d8:	f8d2 c010 	ldr.w	ip, [r2, #16]
 80084dc:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80084e0:	6992      	ldr	r2, [r2, #24]
 80084e2:	9206      	str	r2, [sp, #24]
 80084e4:	68e2      	ldr	r2, [r4, #12]
 80084e6:	9201      	str	r2, [sp, #4]
 80084e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80084ea:	9203      	str	r2, [sp, #12]
 80084ec:	6a22      	ldr	r2, [r4, #32]
 80084ee:	69e5      	ldr	r5, [r4, #28]
 80084f0:	68a6      	ldr	r6, [r4, #8]
 80084f2:	9204      	str	r2, [sp, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 80b0 	beq.w	800865a <D64_1CH_HTONS_VOL_HP+0x18e>
 80084fa:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80084fe:	4f58      	ldr	r7, [pc, #352]	; (8008660 <D64_1CH_HTONS_VOL_HP+0x194>)
 8008500:	9305      	str	r3, [sp, #20]
 8008502:	9102      	str	r1, [sp, #8]
 8008504:	f850 2b08 	ldr.w	r2, [r0], #8
 8008508:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800850c:	ba52      	rev16	r2, r2
 800850e:	fa93 f993 	rev16.w	r9, r3
 8008512:	b2d4      	uxtb	r4, r2
 8008514:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8008518:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800851c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8008520:	9901      	ldr	r1, [sp, #4]
 8008522:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8008526:	0e12      	lsrs	r2, r2, #24
 8008528:	44ab      	add	fp, r5
 800852a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800852e:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 8008532:	fa5f f289 	uxtb.w	r2, r9
 8008536:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800853a:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800853e:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 8008542:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8008546:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800854a:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800854e:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 8008552:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8008556:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800855a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800855e:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 8008562:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8008566:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800856a:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800856e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008572:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008576:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800857a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800857e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008582:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8008586:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800858a:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800858e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008592:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8008596:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800859a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800859e:	ea4f 2599 	mov.w	r5, r9, lsr #10
 80085a2:	4b30      	ldr	r3, [pc, #192]	; (8008664 <D64_1CH_HTONS_VOL_HP+0x198>)
 80085a4:	fb2b 1303 	smlad	r3, fp, r3, r1
 80085a8:	492f      	ldr	r1, [pc, #188]	; (8008668 <D64_1CH_HTONS_VOL_HP+0x19c>)
 80085aa:	fb24 3301 	smlad	r3, r4, r1, r3
 80085ae:	492f      	ldr	r1, [pc, #188]	; (800866c <D64_1CH_HTONS_VOL_HP+0x1a0>)
 80085b0:	fb22 3301 	smlad	r3, r2, r1, r3
 80085b4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80085b8:	fb2e 390a 	smlad	r9, lr, sl, r3
 80085bc:	4b2c      	ldr	r3, [pc, #176]	; (8008670 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 80085be:	fb2b 6603 	smlad	r6, fp, r3, r6
 80085c2:	fb2e 6613 	smladx	r6, lr, r3, r6
 80085c6:	4b2b      	ldr	r3, [pc, #172]	; (8008674 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 80085c8:	fb24 6603 	smlad	r6, r4, r3, r6
 80085cc:	fb22 6313 	smladx	r3, r2, r3, r6
 80085d0:	f04f 0a01 	mov.w	sl, #1
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	fb2b fb0a 	smuad	fp, fp, sl
 80085da:	4b27      	ldr	r3, [pc, #156]	; (8008678 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 80085dc:	fb24 ba03 	smlad	sl, r4, r3, fp
 80085e0:	4b26      	ldr	r3, [pc, #152]	; (800867c <D64_1CH_HTONS_VOL_HP+0x1b0>)
 80085e2:	fb22 a203 	smlad	r2, r2, r3, sl
 80085e6:	4b26      	ldr	r3, [pc, #152]	; (8008680 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 80085e8:	fb2e 2603 	smlad	r6, lr, r3, r2
 80085ec:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 80085f0:	eb0a 020c 	add.w	r2, sl, ip
 80085f4:	9c04      	ldr	r4, [sp, #16]
 80085f6:	9903      	ldr	r1, [sp, #12]
 80085f8:	eba2 0208 	sub.w	r2, r2, r8
 80085fc:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8008600:	fba2 2304 	umull	r2, r3, r2, r4
 8008604:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8008608:	fb04 3309 	mla	r3, r4, r9, r3
 800860c:	f143 0300 	adc.w	r3, r3, #0
 8008610:	02da      	lsls	r2, r3, #11
 8008612:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8008616:	f04f 0900 	mov.w	r9, #0
 800861a:	fbc1 8902 	smlal	r8, r9, r1, r2
 800861e:	9902      	ldr	r1, [sp, #8]
 8008620:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8008624:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008628:	f302 020f 	ssat	r2, #16, r2
 800862c:	9b05      	ldr	r3, [sp, #20]
 800862e:	f821 2b02 	strh.w	r2, [r1], #2
 8008632:	4299      	cmp	r1, r3
 8008634:	9102      	str	r1, [sp, #8]
 8008636:	46d0      	mov	r8, sl
 8008638:	f47f af64 	bne.w	8008504 <D64_1CH_HTONS_VOL_HP+0x38>
 800863c:	9a07      	ldr	r2, [sp, #28]
 800863e:	9901      	ldr	r1, [sp, #4]
 8008640:	60d1      	str	r1, [r2, #12]
 8008642:	9906      	ldr	r1, [sp, #24]
 8008644:	6096      	str	r6, [r2, #8]
 8008646:	2000      	movs	r0, #0
 8008648:	61d5      	str	r5, [r2, #28]
 800864a:	f8c2 c010 	str.w	ip, [r2, #16]
 800864e:	f8c2 a014 	str.w	sl, [r2, #20]
 8008652:	6191      	str	r1, [r2, #24]
 8008654:	b009      	add	sp, #36	; 0x24
 8008656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865a:	46c2      	mov	sl, r8
 800865c:	4622      	mov	r2, r4
 800865e:	e7ee      	b.n	800863e <D64_1CH_HTONS_VOL_HP+0x172>
 8008660:	20000000 	.word	0x20000000
 8008664:	001c0015 	.word	0x001c0015
 8008668:	000f000a 	.word	0x000f000a
 800866c:	00060003 	.word	0x00060003
 8008670:	0024002a 	.word	0x0024002a
 8008674:	002e0030 	.word	0x002e0030
 8008678:	00030006 	.word	0x00030006
 800867c:	000a000f 	.word	0x000a000f
 8008680:	0015001c 	.word	0x0015001c

08008684 <D80_1CH_HTONS_VOL_HP>:
 8008684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	4613      	mov	r3, r2
 800868a:	b089      	sub	sp, #36	; 0x24
 800868c:	4686      	mov	lr, r0
 800868e:	6918      	ldr	r0, [r3, #16]
 8008690:	9000      	str	r0, [sp, #0]
 8008692:	4618      	mov	r0, r3
 8008694:	461c      	mov	r4, r3
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	9302      	str	r3, [sp, #8]
 800869a:	6983      	ldr	r3, [r0, #24]
 800869c:	9306      	str	r3, [sp, #24]
 800869e:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80086a2:	69c3      	ldr	r3, [r0, #28]
 80086a4:	68c0      	ldr	r0, [r0, #12]
 80086a6:	9207      	str	r2, [sp, #28]
 80086a8:	9001      	str	r0, [sp, #4]
 80086aa:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80086ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80086ae:	9003      	str	r0, [sp, #12]
 80086b0:	6a20      	ldr	r0, [r4, #32]
 80086b2:	9004      	str	r0, [sp, #16]
 80086b4:	2a00      	cmp	r2, #0
 80086b6:	f000 80d2 	beq.w	800885e <D80_1CH_HTONS_VOL_HP+0x1da>
 80086ba:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80086be:	4869      	ldr	r0, [pc, #420]	; (8008864 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 80086c0:	9205      	str	r2, [sp, #20]
 80086c2:	461c      	mov	r4, r3
 80086c4:	f8de 5000 	ldr.w	r5, [lr]
 80086c8:	f8de 2004 	ldr.w	r2, [lr, #4]
 80086cc:	f8de 3008 	ldr.w	r3, [lr, #8]
 80086d0:	f10e 0e0a 	add.w	lr, lr, #10
 80086d4:	ba6d      	rev16	r5, r5
 80086d6:	ba52      	rev16	r2, r2
 80086d8:	fa93 fb93 	rev16.w	fp, r3
 80086dc:	b2ee      	uxtb	r6, r5
 80086de:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80086e2:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80086e6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80086ea:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80086ee:	eb04 0a07 	add.w	sl, r4, r7
 80086f2:	0e2d      	lsrs	r5, r5, #24
 80086f4:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 80086f8:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 80086fc:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 8008700:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8008704:	b2d5      	uxtb	r5, r2
 8008706:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800870a:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800870e:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8008712:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8008716:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800871a:	0e12      	lsrs	r2, r2, #24
 800871c:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 8008720:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8008724:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8008728:	fa5f f48b 	uxtb.w	r4, fp
 800872c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8008730:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8008734:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8008738:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800873c:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8008740:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8008744:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8008748:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800874c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008750:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008754:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008758:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800875c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008760:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008764:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8008768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800876c:	f3cb 0609 	ubfx	r6, fp, #0, #10
 8008770:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008774:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008778:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800877c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8008780:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8008784:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8008788:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800878c:	4d36      	ldr	r5, [pc, #216]	; (8008868 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800878e:	9f01      	ldr	r7, [sp, #4]
 8008790:	fb23 7505 	smlad	r5, r3, r5, r7
 8008794:	4f35      	ldr	r7, [pc, #212]	; (800886c <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8008796:	fb29 5507 	smlad	r5, r9, r7, r5
 800879a:	4f35      	ldr	r7, [pc, #212]	; (8008870 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800879c:	fb28 5507 	smlad	r5, r8, r7, r5
 80087a0:	4f34      	ldr	r7, [pc, #208]	; (8008874 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80087a2:	fb22 5507 	smlad	r5, r2, r7, r5
 80087a6:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80087aa:	fb26 5b0a 	smlad	fp, r6, sl, r5
 80087ae:	4d32      	ldr	r5, [pc, #200]	; (8008878 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 80087b0:	fb23 cc05 	smlad	ip, r3, r5, ip
 80087b4:	4d31      	ldr	r5, [pc, #196]	; (800887c <D80_1CH_HTONS_VOL_HP+0x1f8>)
 80087b6:	fb29 cc05 	smlad	ip, r9, r5, ip
 80087ba:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 80087be:	fb28 c505 	smlad	r5, r8, r5, ip
 80087c2:	4f2f      	ldr	r7, [pc, #188]	; (8008880 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 80087c4:	fb22 5507 	smlad	r5, r2, r7, r5
 80087c8:	4f2e      	ldr	r7, [pc, #184]	; (8008884 <D80_1CH_HTONS_VOL_HP+0x200>)
 80087ca:	fb26 5507 	smlad	r5, r6, r7, r5
 80087ce:	f04f 0a01 	mov.w	sl, #1
 80087d2:	9501      	str	r5, [sp, #4]
 80087d4:	fb23 fa0a 	smuad	sl, r3, sl
 80087d8:	4b2b      	ldr	r3, [pc, #172]	; (8008888 <D80_1CH_HTONS_VOL_HP+0x204>)
 80087da:	fb29 a903 	smlad	r9, r9, r3, sl
 80087de:	4d2b      	ldr	r5, [pc, #172]	; (800888c <D80_1CH_HTONS_VOL_HP+0x208>)
 80087e0:	fb28 9805 	smlad	r8, r8, r5, r9
 80087e4:	4d2a      	ldr	r5, [pc, #168]	; (8008890 <D80_1CH_HTONS_VOL_HP+0x20c>)
 80087e6:	fb22 8205 	smlad	r2, r2, r5, r8
 80087ea:	4b2a      	ldr	r3, [pc, #168]	; (8008894 <D80_1CH_HTONS_VOL_HP+0x210>)
 80087ec:	fb26 2c03 	smlad	ip, r6, r3, r2
 80087f0:	9b00      	ldr	r3, [sp, #0]
 80087f2:	9d04      	ldr	r5, [sp, #16]
 80087f4:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 80087f8:	4453      	add	r3, sl
 80087fa:	461a      	mov	r2, r3
 80087fc:	9b02      	ldr	r3, [sp, #8]
 80087fe:	f8cd a008 	str.w	sl, [sp, #8]
 8008802:	1ad2      	subs	r2, r2, r3
 8008804:	17d7      	asrs	r7, r2, #31
 8008806:	fba2 2305 	umull	r2, r3, r2, r5
 800880a:	fb05 3307 	mla	r3, r5, r7, r3
 800880e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8008812:	f143 0300 	adc.w	r3, r3, #0
 8008816:	9d03      	ldr	r5, [sp, #12]
 8008818:	029a      	lsls	r2, r3, #10
 800881a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800881e:	2700      	movs	r7, #0
 8008820:	005b      	lsls	r3, r3, #1
 8008822:	fbc5 6702 	smlal	r6, r7, r5, r2
 8008826:	10ba      	asrs	r2, r7, #2
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	f302 020f 	ssat	r2, #16, r2
 800882e:	9b05      	ldr	r3, [sp, #20]
 8008830:	f821 2b02 	strh.w	r2, [r1], #2
 8008834:	4299      	cmp	r1, r3
 8008836:	f47f af45 	bne.w	80086c4 <D80_1CH_HTONS_VOL_HP+0x40>
 800883a:	4623      	mov	r3, r4
 800883c:	9907      	ldr	r1, [sp, #28]
 800883e:	9801      	ldr	r0, [sp, #4]
 8008840:	60c8      	str	r0, [r1, #12]
 8008842:	9a00      	ldr	r2, [sp, #0]
 8008844:	f8c1 c008 	str.w	ip, [r1, #8]
 8008848:	4608      	mov	r0, r1
 800884a:	61cb      	str	r3, [r1, #28]
 800884c:	610a      	str	r2, [r1, #16]
 800884e:	f8c1 a014 	str.w	sl, [r1, #20]
 8008852:	9906      	ldr	r1, [sp, #24]
 8008854:	6181      	str	r1, [r0, #24]
 8008856:	2000      	movs	r0, #0
 8008858:	b009      	add	sp, #36	; 0x24
 800885a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800885e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8008862:	e7eb      	b.n	800883c <D80_1CH_HTONS_VOL_HP+0x1b8>
 8008864:	20000000 	.word	0x20000000
 8008868:	002d0024 	.word	0x002d0024
 800886c:	001c0015 	.word	0x001c0015
 8008870:	000f000a 	.word	0x000f000a
 8008874:	00060003 	.word	0x00060003
 8008878:	0037003f 	.word	0x0037003f
 800887c:	00450049 	.word	0x00450049
 8008880:	00490045 	.word	0x00490045
 8008884:	003f0037 	.word	0x003f0037
 8008888:	00030006 	.word	0x00030006
 800888c:	000a000f 	.word	0x000a000f
 8008890:	0015001c 	.word	0x0015001c
 8008894:	0024002d 	.word	0x0024002d

08008898 <D128_1CH_HTONS_VOL_HP>:
 8008898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889c:	b093      	sub	sp, #76	; 0x4c
 800889e:	4614      	mov	r4, r2
 80088a0:	9211      	str	r2, [sp, #68]	; 0x44
 80088a2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80088a4:	6912      	ldr	r2, [r2, #16]
 80088a6:	9203      	str	r2, [sp, #12]
 80088a8:	4622      	mov	r2, r4
 80088aa:	4615      	mov	r5, r2
 80088ac:	6964      	ldr	r4, [r4, #20]
 80088ae:	9406      	str	r4, [sp, #24]
 80088b0:	4614      	mov	r4, r2
 80088b2:	6992      	ldr	r2, [r2, #24]
 80088b4:	9210      	str	r2, [sp, #64]	; 0x40
 80088b6:	68ea      	ldr	r2, [r5, #12]
 80088b8:	9204      	str	r2, [sp, #16]
 80088ba:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80088bc:	69e6      	ldr	r6, [r4, #28]
 80088be:	920d      	str	r2, [sp, #52]	; 0x34
 80088c0:	68a4      	ldr	r4, [r4, #8]
 80088c2:	6a2a      	ldr	r2, [r5, #32]
 80088c4:	9405      	str	r4, [sp, #20]
 80088c6:	920e      	str	r2, [sp, #56]	; 0x38
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 8145 	beq.w	8008b58 <D128_1CH_HTONS_VOL_HP+0x2c0>
 80088ce:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80088d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80088d4:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8008bb4 <D128_1CH_HTONS_VOL_HP+0x31c>
 80088d8:	9107      	str	r1, [sp, #28]
 80088da:	f100 0310 	add.w	r3, r0, #16
 80088de:	4699      	mov	r9, r3
 80088e0:	f1a9 0110 	sub.w	r1, r9, #16
 80088e4:	c90e      	ldmia	r1, {r1, r2, r3}
 80088e6:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80088ea:	ba49      	rev16	r1, r1
 80088ec:	ba52      	rev16	r2, r2
 80088ee:	ba5b      	rev16	r3, r3
 80088f0:	fa90 fa90 	rev16.w	sl, r0
 80088f4:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80088f8:	b2cc      	uxtb	r4, r1
 80088fa:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 80088fe:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8008902:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8008906:	0e09      	lsrs	r1, r1, #24
 8008908:	4426      	add	r6, r4
 800890a:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800890e:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8008912:	b2d0      	uxtb	r0, r2
 8008914:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8008918:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800891c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008920:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8008924:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8008928:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800892c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8008930:	0e12      	lsrs	r2, r2, #24
 8008932:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8008936:	9701      	str	r7, [sp, #4]
 8008938:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800893c:	4627      	mov	r7, r4
 800893e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8008942:	9702      	str	r7, [sp, #8]
 8008944:	b2da      	uxtb	r2, r3
 8008946:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800894a:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800894e:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8008952:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8008956:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800895a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800895e:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8008962:	0e1b      	lsrs	r3, r3, #24
 8008964:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8008968:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800896c:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8008970:	fa5f f38a 	uxtb.w	r3, sl
 8008974:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008978:	960a      	str	r6, [sp, #40]	; 0x28
 800897a:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800897e:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8008982:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008986:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800898a:	950b      	str	r5, [sp, #44]	; 0x2c
 800898c:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8008990:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8008994:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8008998:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800899c:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 80089a0:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80089a4:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80089a8:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80089ac:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 80089b0:	9308      	str	r3, [sp, #32]
 80089b2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80089b6:	9b01      	ldr	r3, [sp, #4]
 80089b8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80089bc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80089c0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80089c4:	9b02      	ldr	r3, [sp, #8]
 80089c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089ca:	9302      	str	r3, [sp, #8]
 80089cc:	9b08      	ldr	r3, [sp, #32]
 80089ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089d2:	9308      	str	r3, [sp, #32]
 80089d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089d6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80089da:	950c      	str	r5, [sp, #48]	; 0x30
 80089dc:	461d      	mov	r5, r3
 80089de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089e0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80089e4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80089e8:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80089ec:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80089f0:	9301      	str	r3, [sp, #4]
 80089f2:	9b02      	ldr	r3, [sp, #8]
 80089f4:	9202      	str	r2, [sp, #8]
 80089f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80089fa:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80089fe:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008a02:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008a06:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008a0a:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8008a0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008a12:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8008a16:	9b08      	ldr	r3, [sp, #32]
 8008a18:	9f01      	ldr	r7, [sp, #4]
 8008a1a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008a1e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008a22:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008a26:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008a2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008a2e:	46be      	mov	lr, r7
 8008a30:	0a96      	lsrs	r6, r2, #10
 8008a32:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8008a36:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8008a3a:	4f49      	ldr	r7, [pc, #292]	; (8008b60 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8008a3c:	9a04      	ldr	r2, [sp, #16]
 8008a3e:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8008a42:	4a48      	ldr	r2, [pc, #288]	; (8008b64 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8008a44:	fb2a ee02 	smlad	lr, sl, r2, lr
 8008a48:	4a47      	ldr	r2, [pc, #284]	; (8008b68 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8008a4a:	fb21 ee02 	smlad	lr, r1, r2, lr
 8008a4e:	4a47      	ldr	r2, [pc, #284]	; (8008b6c <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8008a50:	fb24 ee02 	smlad	lr, r4, r2, lr
 8008a54:	4a46      	ldr	r2, [pc, #280]	; (8008b70 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8008a56:	9f02      	ldr	r7, [sp, #8]
 8008a58:	fb27 ee02 	smlad	lr, r7, r2, lr
 8008a5c:	4a45      	ldr	r2, [pc, #276]	; (8008b74 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8008a5e:	fb20 ee02 	smlad	lr, r0, r2, lr
 8008a62:	4a45      	ldr	r2, [pc, #276]	; (8008b78 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8008a64:	fb23 e702 	smlad	r7, r3, r2, lr
 8008a68:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 8008a6c:	fb25 7e0e 	smlad	lr, r5, lr, r7
 8008a70:	9f01      	ldr	r7, [sp, #4]
 8008a72:	4a42      	ldr	r2, [pc, #264]	; (8008b7c <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8008a74:	46bc      	mov	ip, r7
 8008a76:	9f05      	ldr	r7, [sp, #20]
 8008a78:	fb2c 7c02 	smlad	ip, ip, r2, r7
 8008a7c:	4a40      	ldr	r2, [pc, #256]	; (8008b80 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8008a7e:	fb2a cc02 	smlad	ip, sl, r2, ip
 8008a82:	4f40      	ldr	r7, [pc, #256]	; (8008b84 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8008a84:	fb21 cc07 	smlad	ip, r1, r7, ip
 8008a88:	4f3f      	ldr	r7, [pc, #252]	; (8008b88 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8008a8a:	fb24 cc07 	smlad	ip, r4, r7, ip
 8008a8e:	4f3f      	ldr	r7, [pc, #252]	; (8008b8c <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8008a90:	9a02      	ldr	r2, [sp, #8]
 8008a92:	fb22 cc07 	smlad	ip, r2, r7, ip
 8008a96:	4f3e      	ldr	r7, [pc, #248]	; (8008b90 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8008a98:	fb20 cc07 	smlad	ip, r0, r7, ip
 8008a9c:	4f3d      	ldr	r7, [pc, #244]	; (8008b94 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8008a9e:	fb23 c707 	smlad	r7, r3, r7, ip
 8008aa2:	f8df c114 	ldr.w	ip, [pc, #276]	; 8008bb8 <D128_1CH_HTONS_VOL_HP+0x320>
 8008aa6:	fb25 720c 	smlad	r2, r5, ip, r7
 8008aaa:	f04f 0b01 	mov.w	fp, #1
 8008aae:	9204      	str	r2, [sp, #16]
 8008ab0:	9f01      	ldr	r7, [sp, #4]
 8008ab2:	fb27 fb0b 	smuad	fp, r7, fp
 8008ab6:	4f38      	ldr	r7, [pc, #224]	; (8008b98 <D128_1CH_HTONS_VOL_HP+0x300>)
 8008ab8:	fb2a ba07 	smlad	sl, sl, r7, fp
 8008abc:	4f37      	ldr	r7, [pc, #220]	; (8008b9c <D128_1CH_HTONS_VOL_HP+0x304>)
 8008abe:	fb21 aa07 	smlad	sl, r1, r7, sl
 8008ac2:	4f37      	ldr	r7, [pc, #220]	; (8008ba0 <D128_1CH_HTONS_VOL_HP+0x308>)
 8008ac4:	fb24 aa07 	smlad	sl, r4, r7, sl
 8008ac8:	4f36      	ldr	r7, [pc, #216]	; (8008ba4 <D128_1CH_HTONS_VOL_HP+0x30c>)
 8008aca:	9a02      	ldr	r2, [sp, #8]
 8008acc:	fb22 a707 	smlad	r7, r2, r7, sl
 8008ad0:	4a35      	ldr	r2, [pc, #212]	; (8008ba8 <D128_1CH_HTONS_VOL_HP+0x310>)
 8008ad2:	fb20 7702 	smlad	r7, r0, r2, r7
 8008ad6:	4a35      	ldr	r2, [pc, #212]	; (8008bac <D128_1CH_HTONS_VOL_HP+0x314>)
 8008ad8:	fb23 7702 	smlad	r7, r3, r2, r7
 8008adc:	4b34      	ldr	r3, [pc, #208]	; (8008bb0 <D128_1CH_HTONS_VOL_HP+0x318>)
 8008ade:	fb25 7303 	smlad	r3, r5, r3, r7
 8008ae2:	9305      	str	r3, [sp, #20]
 8008ae4:	9b03      	ldr	r3, [sp, #12]
 8008ae6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008ae8:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8008aec:	4473      	add	r3, lr
 8008aee:	461a      	mov	r2, r3
 8008af0:	9b06      	ldr	r3, [sp, #24]
 8008af2:	f8cd e018 	str.w	lr, [sp, #24]
 8008af6:	1ad2      	subs	r2, r2, r3
 8008af8:	17d1      	asrs	r1, r2, #31
 8008afa:	fba2 2304 	umull	r2, r3, r2, r4
 8008afe:	fb04 3301 	mla	r3, r4, r1, r3
 8008b02:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8008b06:	f143 0300 	adc.w	r3, r3, #0
 8008b0a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008b0c:	021a      	lsls	r2, r3, #8
 8008b0e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008b12:	2100      	movs	r1, #0
 8008b14:	fbc4 0102 	smlal	r0, r1, r4, r2
 8008b18:	108a      	asrs	r2, r1, #2
 8008b1a:	9907      	ldr	r1, [sp, #28]
 8008b1c:	f302 020f 	ssat	r2, #16, r2
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	f821 2b02 	strh.w	r2, [r1], #2
 8008b26:	9303      	str	r3, [sp, #12]
 8008b28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b2a:	9107      	str	r1, [sp, #28]
 8008b2c:	4299      	cmp	r1, r3
 8008b2e:	f109 0910 	add.w	r9, r9, #16
 8008b32:	f47f aed5 	bne.w	80088e0 <D128_1CH_HTONS_VOL_HP+0x48>
 8008b36:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008b38:	9905      	ldr	r1, [sp, #20]
 8008b3a:	6091      	str	r1, [r2, #8]
 8008b3c:	9904      	ldr	r1, [sp, #16]
 8008b3e:	60d1      	str	r1, [r2, #12]
 8008b40:	4613      	mov	r3, r2
 8008b42:	61d6      	str	r6, [r2, #28]
 8008b44:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008b46:	9a03      	ldr	r2, [sp, #12]
 8008b48:	611a      	str	r2, [r3, #16]
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	f8c3 e014 	str.w	lr, [r3, #20]
 8008b50:	6199      	str	r1, [r3, #24]
 8008b52:	b013      	add	sp, #76	; 0x4c
 8008b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b58:	f8dd e018 	ldr.w	lr, [sp, #24]
 8008b5c:	e7eb      	b.n	8008b36 <D128_1CH_HTONS_VOL_HP+0x29e>
 8008b5e:	bf00      	nop
 8008b60:	00780069 	.word	0x00780069
 8008b64:	005b004e 	.word	0x005b004e
 8008b68:	00420037 	.word	0x00420037
 8008b6c:	002d0024 	.word	0x002d0024
 8008b70:	001c0015 	.word	0x001c0015
 8008b74:	000f000a 	.word	0x000f000a
 8008b78:	00060003 	.word	0x00060003
 8008b7c:	00880096 	.word	0x00880096
 8008b80:	00a200ac 	.word	0x00a200ac
 8008b84:	00b400ba 	.word	0x00b400ba
 8008b88:	00be00c0 	.word	0x00be00c0
 8008b8c:	00c000be 	.word	0x00c000be
 8008b90:	00ba00b4 	.word	0x00ba00b4
 8008b94:	00ac00a2 	.word	0x00ac00a2
 8008b98:	00030006 	.word	0x00030006
 8008b9c:	000a000f 	.word	0x000a000f
 8008ba0:	0015001c 	.word	0x0015001c
 8008ba4:	0024002d 	.word	0x0024002d
 8008ba8:	00370042 	.word	0x00370042
 8008bac:	004e005b 	.word	0x004e005b
 8008bb0:	00690078 	.word	0x00690078
 8008bb4:	20000000 	.word	0x20000000
 8008bb8:	00960088 	.word	0x00960088

08008bbc <PDM_Filter_Init>:
 8008bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bbe:	2240      	movs	r2, #64	; 0x40
 8008bc0:	4604      	mov	r4, r0
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	300c      	adds	r0, #12
 8008bc6:	f000 f9f9 	bl	8008fbc <memset>
 8008bca:	493b      	ldr	r1, [pc, #236]	; (8008cb8 <PDM_Filter_Init+0xfc>)
 8008bcc:	483b      	ldr	r0, [pc, #236]	; (8008cbc <PDM_Filter_Init+0x100>)
 8008bce:	f000 f98d 	bl	8008eec <CRC_Lock>
 8008bd2:	8822      	ldrh	r2, [r4, #0]
 8008bd4:	8963      	ldrh	r3, [r4, #10]
 8008bd6:	4938      	ldr	r1, [pc, #224]	; (8008cb8 <PDM_Filter_Init+0xfc>)
 8008bd8:	8925      	ldrh	r5, [r4, #8]
 8008bda:	86a3      	strh	r3, [r4, #52]	; 0x34
 8008bdc:	2801      	cmp	r0, #1
 8008bde:	f04f 0300 	mov.w	r3, #0
 8008be2:	bf18      	it	ne
 8008be4:	2100      	movne	r1, #0
 8008be6:	2a01      	cmp	r2, #1
 8008be8:	6461      	str	r1, [r4, #68]	; 0x44
 8008bea:	86e5      	strh	r5, [r4, #54]	; 0x36
 8008bec:	61a3      	str	r3, [r4, #24]
 8008bee:	6123      	str	r3, [r4, #16]
 8008bf0:	6163      	str	r3, [r4, #20]
 8008bf2:	60e3      	str	r3, [r4, #12]
 8008bf4:	6263      	str	r3, [r4, #36]	; 0x24
 8008bf6:	61e3      	str	r3, [r4, #28]
 8008bf8:	6223      	str	r3, [r4, #32]
 8008bfa:	6423      	str	r3, [r4, #64]	; 0x40
 8008bfc:	d918      	bls.n	8008c30 <PDM_Filter_Init+0x74>
 8008bfe:	2003      	movs	r0, #3
 8008c00:	2302      	movs	r3, #2
 8008c02:	8862      	ldrh	r2, [r4, #2]
 8008c04:	2a01      	cmp	r2, #1
 8008c06:	d91d      	bls.n	8008c44 <PDM_Filter_Init+0x88>
 8008c08:	2140      	movs	r1, #64	; 0x40
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008c0e:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8008c12:	6862      	ldr	r2, [r4, #4]
 8008c14:	bf04      	itt	eq
 8008c16:	6421      	streq	r1, [r4, #64]	; 0x40
 8008c18:	460b      	moveq	r3, r1
 8008c1a:	b11a      	cbz	r2, 8008c24 <PDM_Filter_Init+0x68>
 8008c1c:	f043 0310 	orr.w	r3, r3, #16
 8008c20:	6423      	str	r3, [r4, #64]	; 0x40
 8008c22:	62e2      	str	r2, [r4, #44]	; 0x2c
 8008c24:	2200      	movs	r2, #0
 8008c26:	8722      	strh	r2, [r4, #56]	; 0x38
 8008c28:	b908      	cbnz	r0, 8008c2e <PDM_Filter_Init+0x72>
 8008c2a:	3380      	adds	r3, #128	; 0x80
 8008c2c:	6423      	str	r3, [r4, #64]	; 0x40
 8008c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c30:	4d23      	ldr	r5, [pc, #140]	; (8008cc0 <PDM_Filter_Init+0x104>)
 8008c32:	d010      	beq.n	8008c56 <PDM_Filter_Init+0x9a>
 8008c34:	782a      	ldrb	r2, [r5, #0]
 8008c36:	2a01      	cmp	r2, #1
 8008c38:	d027      	beq.n	8008c8a <PDM_Filter_Init+0xce>
 8008c3a:	8862      	ldrh	r2, [r4, #2]
 8008c3c:	2a01      	cmp	r2, #1
 8008c3e:	f04f 0001 	mov.w	r0, #1
 8008c42:	d8e1      	bhi.n	8008c08 <PDM_Filter_Init+0x4c>
 8008c44:	d001      	beq.n	8008c4a <PDM_Filter_Init+0x8e>
 8008c46:	4618      	mov	r0, r3
 8008c48:	e7de      	b.n	8008c08 <PDM_Filter_Init+0x4c>
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	6422      	str	r2, [r4, #64]	; 0x40
 8008c50:	4613      	mov	r3, r2
 8008c52:	2160      	movs	r1, #96	; 0x60
 8008c54:	e7da      	b.n	8008c0c <PDM_Filter_Init+0x50>
 8008c56:	7829      	ldrb	r1, [r5, #0]
 8008c58:	2900      	cmp	r1, #0
 8008c5a:	d1ee      	bne.n	8008c3a <PDM_Filter_Init+0x7e>
 8008c5c:	4919      	ldr	r1, [pc, #100]	; (8008cc4 <PDM_Filter_Init+0x108>)
 8008c5e:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8008ccc <PDM_Filter_Init+0x110>
 8008c62:	4f19      	ldr	r7, [pc, #100]	; (8008cc8 <PDM_Filter_Init+0x10c>)
 8008c64:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8008c68:	684a      	ldr	r2, [r1, #4]
 8008c6a:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8008c6e:	ea02 0007 	and.w	r0, r2, r7
 8008c72:	4303      	orrs	r3, r0
 8008c74:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8008c78:	4413      	add	r3, r2
 8008c7a:	f841 3f04 	str.w	r3, [r1, #4]!
 8008c7e:	428e      	cmp	r6, r1
 8008c80:	d1f2      	bne.n	8008c68 <PDM_Filter_Init+0xac>
 8008c82:	2001      	movs	r0, #1
 8008c84:	7028      	strb	r0, [r5, #0]
 8008c86:	2300      	movs	r3, #0
 8008c88:	e7bb      	b.n	8008c02 <PDM_Filter_Init+0x46>
 8008c8a:	490e      	ldr	r1, [pc, #56]	; (8008cc4 <PDM_Filter_Init+0x108>)
 8008c8c:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8008ccc <PDM_Filter_Init+0x110>
 8008c90:	4f0d      	ldr	r7, [pc, #52]	; (8008cc8 <PDM_Filter_Init+0x10c>)
 8008c92:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8008c96:	684a      	ldr	r2, [r1, #4]
 8008c98:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8008c9c:	ea02 0007 	and.w	r0, r2, r7
 8008ca0:	4303      	orrs	r3, r0
 8008ca2:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f841 3f04 	str.w	r3, [r1, #4]!
 8008cac:	428e      	cmp	r6, r1
 8008cae:	d1f2      	bne.n	8008c96 <PDM_Filter_Init+0xda>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	702b      	strb	r3, [r5, #0]
 8008cb4:	e7c1      	b.n	8008c3a <PDM_Filter_Init+0x7e>
 8008cb6:	bf00      	nop
 8008cb8:	b5e8b5cd 	.word	0xb5e8b5cd
 8008cbc:	f407a5c2 	.word	0xf407a5c2
 8008cc0:	20000600 	.word	0x20000600
 8008cc4:	1ffffffc 	.word	0x1ffffffc
 8008cc8:	000ffc00 	.word	0x000ffc00
 8008ccc:	3ff00000 	.word	0x3ff00000

08008cd0 <PDM_Filter_setConfig>:
 8008cd0:	4b66      	ldr	r3, [pc, #408]	; (8008e6c <PDM_Filter_setConfig+0x19c>)
 8008cd2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d001      	beq.n	8008cdc <PDM_Filter_setConfig+0xc>
 8008cd8:	2004      	movs	r0, #4
 8008cda:	4770      	bx	lr
 8008cdc:	b530      	push	{r4, r5, lr}
 8008cde:	880a      	ldrh	r2, [r1, #0]
 8008ce0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008ce2:	ed2d 8b04 	vpush	{d8-d9}
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	460d      	mov	r5, r1
 8008cea:	1e51      	subs	r1, r2, #1
 8008cec:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8008cf0:	2906      	cmp	r1, #6
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	6420      	str	r0, [r4, #64]	; 0x40
 8008cf6:	d91a      	bls.n	8008d2e <PDM_Filter_setConfig+0x5e>
 8008cf8:	2008      	movs	r0, #8
 8008cfa:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8008cfe:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8008d02:	4299      	cmp	r1, r3
 8008d04:	d07e      	beq.n	8008e04 <PDM_Filter_setConfig+0x134>
 8008d06:	f113 0f0c 	cmn.w	r3, #12
 8008d0a:	da2a      	bge.n	8008d62 <PDM_Filter_setConfig+0x92>
 8008d0c:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8008d10:	3040      	adds	r0, #64	; 0x40
 8008d12:	80ab      	strh	r3, [r5, #4]
 8008d14:	8622      	strh	r2, [r4, #48]	; 0x30
 8008d16:	886b      	ldrh	r3, [r5, #2]
 8008d18:	8663      	strh	r3, [r4, #50]	; 0x32
 8008d1a:	b920      	cbnz	r0, 8008d26 <PDM_Filter_setConfig+0x56>
 8008d1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d22:	6423      	str	r3, [r4, #64]	; 0x40
 8008d24:	2000      	movs	r0, #0
 8008d26:	b003      	add	sp, #12
 8008d28:	ecbd 8b04 	vpop	{d8-d9}
 8008d2c:	bd30      	pop	{r4, r5, pc}
 8008d2e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8008d30:	4291      	cmp	r1, r2
 8008d32:	d06c      	beq.n	8008e0e <PDM_Filter_setConfig+0x13e>
 8008d34:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8008d38:	f023 0301 	bic.w	r3, r3, #1
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8008d42:	6423      	str	r3, [r4, #64]	; 0x40
 8008d44:	2970      	cmp	r1, #112	; 0x70
 8008d46:	f003 030f 	and.w	r3, r3, #15
 8008d4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d4e:	d066      	beq.n	8008e1e <PDM_Filter_setConfig+0x14e>
 8008d50:	2b06      	cmp	r3, #6
 8008d52:	f200 8089 	bhi.w	8008e68 <PDM_Filter_setConfig+0x198>
 8008d56:	e8df f003 	tbb	[pc, r3]
 8008d5a:	4f52      	.short	0x4f52
 8008d5c:	3d43494c 	.word	0x3d43494c
 8008d60:	46          	.byte	0x46
 8008d61:	00          	.byte	0x00
 8008d62:	2b33      	cmp	r3, #51	; 0x33
 8008d64:	dc32      	bgt.n	8008dcc <PDM_Filter_setConfig+0xfc>
 8008d66:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008d68:	f002 020f 	and.w	r2, r2, #15
 8008d6c:	3a01      	subs	r2, #1
 8008d6e:	2a06      	cmp	r2, #6
 8008d70:	d872      	bhi.n	8008e58 <PDM_Filter_setConfig+0x188>
 8008d72:	493f      	ldr	r1, [pc, #252]	; (8008e70 <PDM_Filter_setConfig+0x1a0>)
 8008d74:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8008d78:	ed92 9a00 	vldr	s18, [r2]
 8008d7c:	ed92 8a07 	vldr	s16, [r2, #28]
 8008d80:	9001      	str	r0, [sp, #4]
 8008d82:	ee07 3a90 	vmov	s15, r3
 8008d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d8a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8008d8e:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8008d92:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8008d96:	f002 fe27 	bl	800b9e8 <powf>
 8008d9a:	eddf 0a36 	vldr	s1, [pc, #216]	; 8008e74 <PDM_Filter_setConfig+0x1a4>
 8008d9e:	eef0 8a40 	vmov.f32	s17, s0
 8008da2:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8008da6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8008daa:	f002 fe1d 	bl	800b9e8 <powf>
 8008dae:	ee28 8a28 	vmul.f32	s16, s16, s17
 8008db2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008db6:	f002 fdf1 	bl	800b99c <roundf>
 8008dba:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8008dbe:	88ab      	ldrh	r3, [r5, #4]
 8008dc0:	882a      	ldrh	r2, [r5, #0]
 8008dc2:	9801      	ldr	r0, [sp, #4]
 8008dc4:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8008dc8:	8723      	strh	r3, [r4, #56]	; 0x38
 8008dca:	e7a3      	b.n	8008d14 <PDM_Filter_setConfig+0x44>
 8008dcc:	2333      	movs	r3, #51	; 0x33
 8008dce:	3040      	adds	r0, #64	; 0x40
 8008dd0:	80ab      	strh	r3, [r5, #4]
 8008dd2:	e79f      	b.n	8008d14 <PDM_Filter_setConfig+0x44>
 8008dd4:	4b28      	ldr	r3, [pc, #160]	; (8008e78 <PDM_Filter_setConfig+0x1a8>)
 8008dd6:	64a3      	str	r3, [r4, #72]	; 0x48
 8008dd8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8008ddc:	2000      	movs	r0, #0
 8008dde:	e792      	b.n	8008d06 <PDM_Filter_setConfig+0x36>
 8008de0:	4b26      	ldr	r3, [pc, #152]	; (8008e7c <PDM_Filter_setConfig+0x1ac>)
 8008de2:	64a3      	str	r3, [r4, #72]	; 0x48
 8008de4:	e7f8      	b.n	8008dd8 <PDM_Filter_setConfig+0x108>
 8008de6:	4b26      	ldr	r3, [pc, #152]	; (8008e80 <PDM_Filter_setConfig+0x1b0>)
 8008de8:	64a3      	str	r3, [r4, #72]	; 0x48
 8008dea:	e7f5      	b.n	8008dd8 <PDM_Filter_setConfig+0x108>
 8008dec:	4b25      	ldr	r3, [pc, #148]	; (8008e84 <PDM_Filter_setConfig+0x1b4>)
 8008dee:	64a3      	str	r3, [r4, #72]	; 0x48
 8008df0:	e7f2      	b.n	8008dd8 <PDM_Filter_setConfig+0x108>
 8008df2:	4b25      	ldr	r3, [pc, #148]	; (8008e88 <PDM_Filter_setConfig+0x1b8>)
 8008df4:	64a3      	str	r3, [r4, #72]	; 0x48
 8008df6:	e7ef      	b.n	8008dd8 <PDM_Filter_setConfig+0x108>
 8008df8:	4b24      	ldr	r3, [pc, #144]	; (8008e8c <PDM_Filter_setConfig+0x1bc>)
 8008dfa:	64a3      	str	r3, [r4, #72]	; 0x48
 8008dfc:	e7ec      	b.n	8008dd8 <PDM_Filter_setConfig+0x108>
 8008dfe:	4b24      	ldr	r3, [pc, #144]	; (8008e90 <PDM_Filter_setConfig+0x1c0>)
 8008e00:	64a3      	str	r3, [r4, #72]	; 0x48
 8008e02:	e7e9      	b.n	8008dd8 <PDM_Filter_setConfig+0x108>
 8008e04:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8008e06:	4291      	cmp	r1, r2
 8008e08:	f47f af7d 	bne.w	8008d06 <PDM_Filter_setConfig+0x36>
 8008e0c:	e783      	b.n	8008d16 <PDM_Filter_setConfig+0x46>
 8008e0e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8008e12:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8008e16:	4299      	cmp	r1, r3
 8008e18:	d023      	beq.n	8008e62 <PDM_Filter_setConfig+0x192>
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	e773      	b.n	8008d06 <PDM_Filter_setConfig+0x36>
 8008e1e:	2b06      	cmp	r3, #6
 8008e20:	d822      	bhi.n	8008e68 <PDM_Filter_setConfig+0x198>
 8008e22:	e8df f003 	tbb	[pc, r3]
 8008e26:	1316      	.short	0x1316
 8008e28:	070a0d10 	.word	0x070a0d10
 8008e2c:	04          	.byte	0x04
 8008e2d:	00          	.byte	0x00
 8008e2e:	4b19      	ldr	r3, [pc, #100]	; (8008e94 <PDM_Filter_setConfig+0x1c4>)
 8008e30:	64a3      	str	r3, [r4, #72]	; 0x48
 8008e32:	e7d1      	b.n	8008dd8 <PDM_Filter_setConfig+0x108>
 8008e34:	4b18      	ldr	r3, [pc, #96]	; (8008e98 <PDM_Filter_setConfig+0x1c8>)
 8008e36:	64a3      	str	r3, [r4, #72]	; 0x48
 8008e38:	e7ce      	b.n	8008dd8 <PDM_Filter_setConfig+0x108>
 8008e3a:	4b18      	ldr	r3, [pc, #96]	; (8008e9c <PDM_Filter_setConfig+0x1cc>)
 8008e3c:	64a3      	str	r3, [r4, #72]	; 0x48
 8008e3e:	e7cb      	b.n	8008dd8 <PDM_Filter_setConfig+0x108>
 8008e40:	4b17      	ldr	r3, [pc, #92]	; (8008ea0 <PDM_Filter_setConfig+0x1d0>)
 8008e42:	64a3      	str	r3, [r4, #72]	; 0x48
 8008e44:	e7c8      	b.n	8008dd8 <PDM_Filter_setConfig+0x108>
 8008e46:	4b17      	ldr	r3, [pc, #92]	; (8008ea4 <PDM_Filter_setConfig+0x1d4>)
 8008e48:	64a3      	str	r3, [r4, #72]	; 0x48
 8008e4a:	e7c5      	b.n	8008dd8 <PDM_Filter_setConfig+0x108>
 8008e4c:	4b16      	ldr	r3, [pc, #88]	; (8008ea8 <PDM_Filter_setConfig+0x1d8>)
 8008e4e:	64a3      	str	r3, [r4, #72]	; 0x48
 8008e50:	e7c2      	b.n	8008dd8 <PDM_Filter_setConfig+0x108>
 8008e52:	4b16      	ldr	r3, [pc, #88]	; (8008eac <PDM_Filter_setConfig+0x1dc>)
 8008e54:	64a3      	str	r3, [r4, #72]	; 0x48
 8008e56:	e7bf      	b.n	8008dd8 <PDM_Filter_setConfig+0x108>
 8008e58:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8008eb0 <PDM_Filter_setConfig+0x1e0>
 8008e5c:	eeb0 9a48 	vmov.f32	s18, s16
 8008e60:	e78e      	b.n	8008d80 <PDM_Filter_setConfig+0xb0>
 8008e62:	886b      	ldrh	r3, [r5, #2]
 8008e64:	8663      	strh	r3, [r4, #50]	; 0x32
 8008e66:	e759      	b.n	8008d1c <PDM_Filter_setConfig+0x4c>
 8008e68:	2000      	movs	r0, #0
 8008e6a:	e746      	b.n	8008cfa <PDM_Filter_setConfig+0x2a>
 8008e6c:	b5e8b5cd 	.word	0xb5e8b5cd
 8008e70:	0800c2e0 	.word	0x0800c2e0
 8008e74:	42000000 	.word	0x42000000
 8008e78:	0800723d 	.word	0x0800723d
 8008e7c:	0800711d 	.word	0x0800711d
 8008e80:	080073cd 	.word	0x080073cd
 8008e84:	08007c11 	.word	0x08007c11
 8008e88:	08007971 	.word	0x08007971
 8008e8c:	08007751 	.word	0x08007751
 8008e90:	08007565 	.word	0x08007565
 8008e94:	0800821d 	.word	0x0800821d
 8008e98:	080080e5 	.word	0x080080e5
 8008e9c:	08008001 	.word	0x08008001
 8008ea0:	08008899 	.word	0x08008899
 8008ea4:	08008685 	.word	0x08008685
 8008ea8:	080084cd 	.word	0x080084cd
 8008eac:	08008361 	.word	0x08008361
 8008eb0:	00000000 	.word	0x00000000

08008eb4 <PDM_Filter>:
 8008eb4:	b410      	push	{r4}
 8008eb6:	4b0c      	ldr	r3, [pc, #48]	; (8008ee8 <PDM_Filter+0x34>)
 8008eb8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8008eba:	429c      	cmp	r4, r3
 8008ebc:	d003      	beq.n	8008ec6 <PDM_Filter+0x12>
 8008ebe:	2004      	movs	r0, #4
 8008ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008ec8:	05dc      	lsls	r4, r3, #23
 8008eca:	d407      	bmi.n	8008edc <PDM_Filter+0x28>
 8008ecc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008ed0:	bf14      	ite	ne
 8008ed2:	2020      	movne	r0, #32
 8008ed4:	2030      	moveq	r0, #48	; 0x30
 8008ed6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8008ede:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ee2:	320c      	adds	r2, #12
 8008ee4:	4718      	bx	r3
 8008ee6:	bf00      	nop
 8008ee8:	b5e8b5cd 	.word	0xb5e8b5cd

08008eec <CRC_Lock>:
 8008eec:	4a17      	ldr	r2, [pc, #92]	; (8008f4c <CRC_Lock+0x60>)
 8008eee:	6813      	ldr	r3, [r2, #0]
 8008ef0:	b410      	push	{r4}
 8008ef2:	f023 0301 	bic.w	r3, r3, #1
 8008ef6:	4c16      	ldr	r4, [pc, #88]	; (8008f50 <CRC_Lock+0x64>)
 8008ef8:	6013      	str	r3, [r2, #0]
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	b933      	cbnz	r3, 8008f0c <CRC_Lock+0x20>
 8008efe:	4b15      	ldr	r3, [pc, #84]	; (8008f54 <CRC_Lock+0x68>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f06:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008f0a:	d00f      	beq.n	8008f2c <CRC_Lock+0x40>
 8008f0c:	4a12      	ldr	r2, [pc, #72]	; (8008f58 <CRC_Lock+0x6c>)
 8008f0e:	2301      	movs	r3, #1
 8008f10:	6013      	str	r3, [r2, #0]
 8008f12:	6813      	ldr	r3, [r2, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1fc      	bne.n	8008f12 <CRC_Lock+0x26>
 8008f18:	4b10      	ldr	r3, [pc, #64]	; (8008f5c <CRC_Lock+0x70>)
 8008f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f1e:	6018      	str	r0, [r3, #0]
 8008f20:	6818      	ldr	r0, [r3, #0]
 8008f22:	1a08      	subs	r0, r1, r0
 8008f24:	fab0 f080 	clz	r0, r0
 8008f28:	0940      	lsrs	r0, r0, #5
 8008f2a:	4770      	bx	lr
 8008f2c:	4a0c      	ldr	r2, [pc, #48]	; (8008f60 <CRC_Lock+0x74>)
 8008f2e:	2301      	movs	r3, #1
 8008f30:	6013      	str	r3, [r2, #0]
 8008f32:	6813      	ldr	r3, [r2, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1fc      	bne.n	8008f32 <CRC_Lock+0x46>
 8008f38:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <CRC_Lock+0x78>)
 8008f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f3e:	6018      	str	r0, [r3, #0]
 8008f40:	6818      	ldr	r0, [r3, #0]
 8008f42:	1a40      	subs	r0, r0, r1
 8008f44:	fab0 f080 	clz	r0, r0
 8008f48:	0940      	lsrs	r0, r0, #5
 8008f4a:	4770      	bx	lr
 8008f4c:	e0002000 	.word	0xe0002000
 8008f50:	e0042000 	.word	0xe0042000
 8008f54:	5c001000 	.word	0x5c001000
 8008f58:	40023008 	.word	0x40023008
 8008f5c:	40023000 	.word	0x40023000
 8008f60:	58024c08 	.word	0x58024c08
 8008f64:	58024c00 	.word	0x58024c00

08008f68 <__errno>:
 8008f68:	4b01      	ldr	r3, [pc, #4]	; (8008f70 <__errno+0x8>)
 8008f6a:	6818      	ldr	r0, [r3, #0]
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	20000410 	.word	0x20000410

08008f74 <__libc_init_array>:
 8008f74:	b570      	push	{r4, r5, r6, lr}
 8008f76:	4d0d      	ldr	r5, [pc, #52]	; (8008fac <__libc_init_array+0x38>)
 8008f78:	4c0d      	ldr	r4, [pc, #52]	; (8008fb0 <__libc_init_array+0x3c>)
 8008f7a:	1b64      	subs	r4, r4, r5
 8008f7c:	10a4      	asrs	r4, r4, #2
 8008f7e:	2600      	movs	r6, #0
 8008f80:	42a6      	cmp	r6, r4
 8008f82:	d109      	bne.n	8008f98 <__libc_init_array+0x24>
 8008f84:	4d0b      	ldr	r5, [pc, #44]	; (8008fb4 <__libc_init_array+0x40>)
 8008f86:	4c0c      	ldr	r4, [pc, #48]	; (8008fb8 <__libc_init_array+0x44>)
 8008f88:	f003 f998 	bl	800c2bc <_init>
 8008f8c:	1b64      	subs	r4, r4, r5
 8008f8e:	10a4      	asrs	r4, r4, #2
 8008f90:	2600      	movs	r6, #0
 8008f92:	42a6      	cmp	r6, r4
 8008f94:	d105      	bne.n	8008fa2 <__libc_init_array+0x2e>
 8008f96:	bd70      	pop	{r4, r5, r6, pc}
 8008f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f9c:	4798      	blx	r3
 8008f9e:	3601      	adds	r6, #1
 8008fa0:	e7ee      	b.n	8008f80 <__libc_init_array+0xc>
 8008fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fa6:	4798      	blx	r3
 8008fa8:	3601      	adds	r6, #1
 8008faa:	e7f2      	b.n	8008f92 <__libc_init_array+0x1e>
 8008fac:	0800f574 	.word	0x0800f574
 8008fb0:	0800f574 	.word	0x0800f574
 8008fb4:	0800f574 	.word	0x0800f574
 8008fb8:	0800f578 	.word	0x0800f578

08008fbc <memset>:
 8008fbc:	4402      	add	r2, r0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d100      	bne.n	8008fc6 <memset+0xa>
 8008fc4:	4770      	bx	lr
 8008fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8008fca:	e7f9      	b.n	8008fc0 <memset+0x4>

08008fcc <__cvt>:
 8008fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd0:	ec55 4b10 	vmov	r4, r5, d0
 8008fd4:	2d00      	cmp	r5, #0
 8008fd6:	460e      	mov	r6, r1
 8008fd8:	4619      	mov	r1, r3
 8008fda:	462b      	mov	r3, r5
 8008fdc:	bfbb      	ittet	lt
 8008fde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008fe2:	461d      	movlt	r5, r3
 8008fe4:	2300      	movge	r3, #0
 8008fe6:	232d      	movlt	r3, #45	; 0x2d
 8008fe8:	700b      	strb	r3, [r1, #0]
 8008fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ff0:	4691      	mov	r9, r2
 8008ff2:	f023 0820 	bic.w	r8, r3, #32
 8008ff6:	bfbc      	itt	lt
 8008ff8:	4622      	movlt	r2, r4
 8008ffa:	4614      	movlt	r4, r2
 8008ffc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009000:	d005      	beq.n	800900e <__cvt+0x42>
 8009002:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009006:	d100      	bne.n	800900a <__cvt+0x3e>
 8009008:	3601      	adds	r6, #1
 800900a:	2102      	movs	r1, #2
 800900c:	e000      	b.n	8009010 <__cvt+0x44>
 800900e:	2103      	movs	r1, #3
 8009010:	ab03      	add	r3, sp, #12
 8009012:	9301      	str	r3, [sp, #4]
 8009014:	ab02      	add	r3, sp, #8
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	ec45 4b10 	vmov	d0, r4, r5
 800901c:	4653      	mov	r3, sl
 800901e:	4632      	mov	r2, r6
 8009020:	f000 fce2 	bl	80099e8 <_dtoa_r>
 8009024:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009028:	4607      	mov	r7, r0
 800902a:	d102      	bne.n	8009032 <__cvt+0x66>
 800902c:	f019 0f01 	tst.w	r9, #1
 8009030:	d022      	beq.n	8009078 <__cvt+0xac>
 8009032:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009036:	eb07 0906 	add.w	r9, r7, r6
 800903a:	d110      	bne.n	800905e <__cvt+0x92>
 800903c:	783b      	ldrb	r3, [r7, #0]
 800903e:	2b30      	cmp	r3, #48	; 0x30
 8009040:	d10a      	bne.n	8009058 <__cvt+0x8c>
 8009042:	2200      	movs	r2, #0
 8009044:	2300      	movs	r3, #0
 8009046:	4620      	mov	r0, r4
 8009048:	4629      	mov	r1, r5
 800904a:	f7f7 fd9d 	bl	8000b88 <__aeabi_dcmpeq>
 800904e:	b918      	cbnz	r0, 8009058 <__cvt+0x8c>
 8009050:	f1c6 0601 	rsb	r6, r6, #1
 8009054:	f8ca 6000 	str.w	r6, [sl]
 8009058:	f8da 3000 	ldr.w	r3, [sl]
 800905c:	4499      	add	r9, r3
 800905e:	2200      	movs	r2, #0
 8009060:	2300      	movs	r3, #0
 8009062:	4620      	mov	r0, r4
 8009064:	4629      	mov	r1, r5
 8009066:	f7f7 fd8f 	bl	8000b88 <__aeabi_dcmpeq>
 800906a:	b108      	cbz	r0, 8009070 <__cvt+0xa4>
 800906c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009070:	2230      	movs	r2, #48	; 0x30
 8009072:	9b03      	ldr	r3, [sp, #12]
 8009074:	454b      	cmp	r3, r9
 8009076:	d307      	bcc.n	8009088 <__cvt+0xbc>
 8009078:	9b03      	ldr	r3, [sp, #12]
 800907a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800907c:	1bdb      	subs	r3, r3, r7
 800907e:	4638      	mov	r0, r7
 8009080:	6013      	str	r3, [r2, #0]
 8009082:	b004      	add	sp, #16
 8009084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009088:	1c59      	adds	r1, r3, #1
 800908a:	9103      	str	r1, [sp, #12]
 800908c:	701a      	strb	r2, [r3, #0]
 800908e:	e7f0      	b.n	8009072 <__cvt+0xa6>

08009090 <__exponent>:
 8009090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009092:	4603      	mov	r3, r0
 8009094:	2900      	cmp	r1, #0
 8009096:	bfb8      	it	lt
 8009098:	4249      	neglt	r1, r1
 800909a:	f803 2b02 	strb.w	r2, [r3], #2
 800909e:	bfb4      	ite	lt
 80090a0:	222d      	movlt	r2, #45	; 0x2d
 80090a2:	222b      	movge	r2, #43	; 0x2b
 80090a4:	2909      	cmp	r1, #9
 80090a6:	7042      	strb	r2, [r0, #1]
 80090a8:	dd2a      	ble.n	8009100 <__exponent+0x70>
 80090aa:	f10d 0407 	add.w	r4, sp, #7
 80090ae:	46a4      	mov	ip, r4
 80090b0:	270a      	movs	r7, #10
 80090b2:	46a6      	mov	lr, r4
 80090b4:	460a      	mov	r2, r1
 80090b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80090ba:	fb07 1516 	mls	r5, r7, r6, r1
 80090be:	3530      	adds	r5, #48	; 0x30
 80090c0:	2a63      	cmp	r2, #99	; 0x63
 80090c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80090c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80090ca:	4631      	mov	r1, r6
 80090cc:	dcf1      	bgt.n	80090b2 <__exponent+0x22>
 80090ce:	3130      	adds	r1, #48	; 0x30
 80090d0:	f1ae 0502 	sub.w	r5, lr, #2
 80090d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80090d8:	1c44      	adds	r4, r0, #1
 80090da:	4629      	mov	r1, r5
 80090dc:	4561      	cmp	r1, ip
 80090de:	d30a      	bcc.n	80090f6 <__exponent+0x66>
 80090e0:	f10d 0209 	add.w	r2, sp, #9
 80090e4:	eba2 020e 	sub.w	r2, r2, lr
 80090e8:	4565      	cmp	r5, ip
 80090ea:	bf88      	it	hi
 80090ec:	2200      	movhi	r2, #0
 80090ee:	4413      	add	r3, r2
 80090f0:	1a18      	subs	r0, r3, r0
 80090f2:	b003      	add	sp, #12
 80090f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80090fe:	e7ed      	b.n	80090dc <__exponent+0x4c>
 8009100:	2330      	movs	r3, #48	; 0x30
 8009102:	3130      	adds	r1, #48	; 0x30
 8009104:	7083      	strb	r3, [r0, #2]
 8009106:	70c1      	strb	r1, [r0, #3]
 8009108:	1d03      	adds	r3, r0, #4
 800910a:	e7f1      	b.n	80090f0 <__exponent+0x60>

0800910c <_printf_float>:
 800910c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009110:	ed2d 8b02 	vpush	{d8}
 8009114:	b08d      	sub	sp, #52	; 0x34
 8009116:	460c      	mov	r4, r1
 8009118:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800911c:	4616      	mov	r6, r2
 800911e:	461f      	mov	r7, r3
 8009120:	4605      	mov	r5, r0
 8009122:	f001 fb43 	bl	800a7ac <_localeconv_r>
 8009126:	f8d0 a000 	ldr.w	sl, [r0]
 800912a:	4650      	mov	r0, sl
 800912c:	f7f7 f8b0 	bl	8000290 <strlen>
 8009130:	2300      	movs	r3, #0
 8009132:	930a      	str	r3, [sp, #40]	; 0x28
 8009134:	6823      	ldr	r3, [r4, #0]
 8009136:	9305      	str	r3, [sp, #20]
 8009138:	f8d8 3000 	ldr.w	r3, [r8]
 800913c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009140:	3307      	adds	r3, #7
 8009142:	f023 0307 	bic.w	r3, r3, #7
 8009146:	f103 0208 	add.w	r2, r3, #8
 800914a:	f8c8 2000 	str.w	r2, [r8]
 800914e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009152:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009156:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800915a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800915e:	9307      	str	r3, [sp, #28]
 8009160:	f8cd 8018 	str.w	r8, [sp, #24]
 8009164:	ee08 0a10 	vmov	s16, r0
 8009168:	4b9f      	ldr	r3, [pc, #636]	; (80093e8 <_printf_float+0x2dc>)
 800916a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800916e:	f04f 32ff 	mov.w	r2, #4294967295
 8009172:	f7f7 fd3b 	bl	8000bec <__aeabi_dcmpun>
 8009176:	bb88      	cbnz	r0, 80091dc <_printf_float+0xd0>
 8009178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800917c:	4b9a      	ldr	r3, [pc, #616]	; (80093e8 <_printf_float+0x2dc>)
 800917e:	f04f 32ff 	mov.w	r2, #4294967295
 8009182:	f7f7 fd15 	bl	8000bb0 <__aeabi_dcmple>
 8009186:	bb48      	cbnz	r0, 80091dc <_printf_float+0xd0>
 8009188:	2200      	movs	r2, #0
 800918a:	2300      	movs	r3, #0
 800918c:	4640      	mov	r0, r8
 800918e:	4649      	mov	r1, r9
 8009190:	f7f7 fd04 	bl	8000b9c <__aeabi_dcmplt>
 8009194:	b110      	cbz	r0, 800919c <_printf_float+0x90>
 8009196:	232d      	movs	r3, #45	; 0x2d
 8009198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800919c:	4b93      	ldr	r3, [pc, #588]	; (80093ec <_printf_float+0x2e0>)
 800919e:	4894      	ldr	r0, [pc, #592]	; (80093f0 <_printf_float+0x2e4>)
 80091a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80091a4:	bf94      	ite	ls
 80091a6:	4698      	movls	r8, r3
 80091a8:	4680      	movhi	r8, r0
 80091aa:	2303      	movs	r3, #3
 80091ac:	6123      	str	r3, [r4, #16]
 80091ae:	9b05      	ldr	r3, [sp, #20]
 80091b0:	f023 0204 	bic.w	r2, r3, #4
 80091b4:	6022      	str	r2, [r4, #0]
 80091b6:	f04f 0900 	mov.w	r9, #0
 80091ba:	9700      	str	r7, [sp, #0]
 80091bc:	4633      	mov	r3, r6
 80091be:	aa0b      	add	r2, sp, #44	; 0x2c
 80091c0:	4621      	mov	r1, r4
 80091c2:	4628      	mov	r0, r5
 80091c4:	f000 f9d8 	bl	8009578 <_printf_common>
 80091c8:	3001      	adds	r0, #1
 80091ca:	f040 8090 	bne.w	80092ee <_printf_float+0x1e2>
 80091ce:	f04f 30ff 	mov.w	r0, #4294967295
 80091d2:	b00d      	add	sp, #52	; 0x34
 80091d4:	ecbd 8b02 	vpop	{d8}
 80091d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091dc:	4642      	mov	r2, r8
 80091de:	464b      	mov	r3, r9
 80091e0:	4640      	mov	r0, r8
 80091e2:	4649      	mov	r1, r9
 80091e4:	f7f7 fd02 	bl	8000bec <__aeabi_dcmpun>
 80091e8:	b140      	cbz	r0, 80091fc <_printf_float+0xf0>
 80091ea:	464b      	mov	r3, r9
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	bfbc      	itt	lt
 80091f0:	232d      	movlt	r3, #45	; 0x2d
 80091f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80091f6:	487f      	ldr	r0, [pc, #508]	; (80093f4 <_printf_float+0x2e8>)
 80091f8:	4b7f      	ldr	r3, [pc, #508]	; (80093f8 <_printf_float+0x2ec>)
 80091fa:	e7d1      	b.n	80091a0 <_printf_float+0x94>
 80091fc:	6863      	ldr	r3, [r4, #4]
 80091fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009202:	9206      	str	r2, [sp, #24]
 8009204:	1c5a      	adds	r2, r3, #1
 8009206:	d13f      	bne.n	8009288 <_printf_float+0x17c>
 8009208:	2306      	movs	r3, #6
 800920a:	6063      	str	r3, [r4, #4]
 800920c:	9b05      	ldr	r3, [sp, #20]
 800920e:	6861      	ldr	r1, [r4, #4]
 8009210:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009214:	2300      	movs	r3, #0
 8009216:	9303      	str	r3, [sp, #12]
 8009218:	ab0a      	add	r3, sp, #40	; 0x28
 800921a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800921e:	ab09      	add	r3, sp, #36	; 0x24
 8009220:	ec49 8b10 	vmov	d0, r8, r9
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	6022      	str	r2, [r4, #0]
 8009228:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800922c:	4628      	mov	r0, r5
 800922e:	f7ff fecd 	bl	8008fcc <__cvt>
 8009232:	9b06      	ldr	r3, [sp, #24]
 8009234:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009236:	2b47      	cmp	r3, #71	; 0x47
 8009238:	4680      	mov	r8, r0
 800923a:	d108      	bne.n	800924e <_printf_float+0x142>
 800923c:	1cc8      	adds	r0, r1, #3
 800923e:	db02      	blt.n	8009246 <_printf_float+0x13a>
 8009240:	6863      	ldr	r3, [r4, #4]
 8009242:	4299      	cmp	r1, r3
 8009244:	dd41      	ble.n	80092ca <_printf_float+0x1be>
 8009246:	f1ab 0b02 	sub.w	fp, fp, #2
 800924a:	fa5f fb8b 	uxtb.w	fp, fp
 800924e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009252:	d820      	bhi.n	8009296 <_printf_float+0x18a>
 8009254:	3901      	subs	r1, #1
 8009256:	465a      	mov	r2, fp
 8009258:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800925c:	9109      	str	r1, [sp, #36]	; 0x24
 800925e:	f7ff ff17 	bl	8009090 <__exponent>
 8009262:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009264:	1813      	adds	r3, r2, r0
 8009266:	2a01      	cmp	r2, #1
 8009268:	4681      	mov	r9, r0
 800926a:	6123      	str	r3, [r4, #16]
 800926c:	dc02      	bgt.n	8009274 <_printf_float+0x168>
 800926e:	6822      	ldr	r2, [r4, #0]
 8009270:	07d2      	lsls	r2, r2, #31
 8009272:	d501      	bpl.n	8009278 <_printf_float+0x16c>
 8009274:	3301      	adds	r3, #1
 8009276:	6123      	str	r3, [r4, #16]
 8009278:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800927c:	2b00      	cmp	r3, #0
 800927e:	d09c      	beq.n	80091ba <_printf_float+0xae>
 8009280:	232d      	movs	r3, #45	; 0x2d
 8009282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009286:	e798      	b.n	80091ba <_printf_float+0xae>
 8009288:	9a06      	ldr	r2, [sp, #24]
 800928a:	2a47      	cmp	r2, #71	; 0x47
 800928c:	d1be      	bne.n	800920c <_printf_float+0x100>
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1bc      	bne.n	800920c <_printf_float+0x100>
 8009292:	2301      	movs	r3, #1
 8009294:	e7b9      	b.n	800920a <_printf_float+0xfe>
 8009296:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800929a:	d118      	bne.n	80092ce <_printf_float+0x1c2>
 800929c:	2900      	cmp	r1, #0
 800929e:	6863      	ldr	r3, [r4, #4]
 80092a0:	dd0b      	ble.n	80092ba <_printf_float+0x1ae>
 80092a2:	6121      	str	r1, [r4, #16]
 80092a4:	b913      	cbnz	r3, 80092ac <_printf_float+0x1a0>
 80092a6:	6822      	ldr	r2, [r4, #0]
 80092a8:	07d0      	lsls	r0, r2, #31
 80092aa:	d502      	bpl.n	80092b2 <_printf_float+0x1a6>
 80092ac:	3301      	adds	r3, #1
 80092ae:	440b      	add	r3, r1
 80092b0:	6123      	str	r3, [r4, #16]
 80092b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80092b4:	f04f 0900 	mov.w	r9, #0
 80092b8:	e7de      	b.n	8009278 <_printf_float+0x16c>
 80092ba:	b913      	cbnz	r3, 80092c2 <_printf_float+0x1b6>
 80092bc:	6822      	ldr	r2, [r4, #0]
 80092be:	07d2      	lsls	r2, r2, #31
 80092c0:	d501      	bpl.n	80092c6 <_printf_float+0x1ba>
 80092c2:	3302      	adds	r3, #2
 80092c4:	e7f4      	b.n	80092b0 <_printf_float+0x1a4>
 80092c6:	2301      	movs	r3, #1
 80092c8:	e7f2      	b.n	80092b0 <_printf_float+0x1a4>
 80092ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80092ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092d0:	4299      	cmp	r1, r3
 80092d2:	db05      	blt.n	80092e0 <_printf_float+0x1d4>
 80092d4:	6823      	ldr	r3, [r4, #0]
 80092d6:	6121      	str	r1, [r4, #16]
 80092d8:	07d8      	lsls	r0, r3, #31
 80092da:	d5ea      	bpl.n	80092b2 <_printf_float+0x1a6>
 80092dc:	1c4b      	adds	r3, r1, #1
 80092de:	e7e7      	b.n	80092b0 <_printf_float+0x1a4>
 80092e0:	2900      	cmp	r1, #0
 80092e2:	bfd4      	ite	le
 80092e4:	f1c1 0202 	rsble	r2, r1, #2
 80092e8:	2201      	movgt	r2, #1
 80092ea:	4413      	add	r3, r2
 80092ec:	e7e0      	b.n	80092b0 <_printf_float+0x1a4>
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	055a      	lsls	r2, r3, #21
 80092f2:	d407      	bmi.n	8009304 <_printf_float+0x1f8>
 80092f4:	6923      	ldr	r3, [r4, #16]
 80092f6:	4642      	mov	r2, r8
 80092f8:	4631      	mov	r1, r6
 80092fa:	4628      	mov	r0, r5
 80092fc:	47b8      	blx	r7
 80092fe:	3001      	adds	r0, #1
 8009300:	d12c      	bne.n	800935c <_printf_float+0x250>
 8009302:	e764      	b.n	80091ce <_printf_float+0xc2>
 8009304:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009308:	f240 80e0 	bls.w	80094cc <_printf_float+0x3c0>
 800930c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009310:	2200      	movs	r2, #0
 8009312:	2300      	movs	r3, #0
 8009314:	f7f7 fc38 	bl	8000b88 <__aeabi_dcmpeq>
 8009318:	2800      	cmp	r0, #0
 800931a:	d034      	beq.n	8009386 <_printf_float+0x27a>
 800931c:	4a37      	ldr	r2, [pc, #220]	; (80093fc <_printf_float+0x2f0>)
 800931e:	2301      	movs	r3, #1
 8009320:	4631      	mov	r1, r6
 8009322:	4628      	mov	r0, r5
 8009324:	47b8      	blx	r7
 8009326:	3001      	adds	r0, #1
 8009328:	f43f af51 	beq.w	80091ce <_printf_float+0xc2>
 800932c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009330:	429a      	cmp	r2, r3
 8009332:	db02      	blt.n	800933a <_printf_float+0x22e>
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	07d8      	lsls	r0, r3, #31
 8009338:	d510      	bpl.n	800935c <_printf_float+0x250>
 800933a:	ee18 3a10 	vmov	r3, s16
 800933e:	4652      	mov	r2, sl
 8009340:	4631      	mov	r1, r6
 8009342:	4628      	mov	r0, r5
 8009344:	47b8      	blx	r7
 8009346:	3001      	adds	r0, #1
 8009348:	f43f af41 	beq.w	80091ce <_printf_float+0xc2>
 800934c:	f04f 0800 	mov.w	r8, #0
 8009350:	f104 091a 	add.w	r9, r4, #26
 8009354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009356:	3b01      	subs	r3, #1
 8009358:	4543      	cmp	r3, r8
 800935a:	dc09      	bgt.n	8009370 <_printf_float+0x264>
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	079b      	lsls	r3, r3, #30
 8009360:	f100 8105 	bmi.w	800956e <_printf_float+0x462>
 8009364:	68e0      	ldr	r0, [r4, #12]
 8009366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009368:	4298      	cmp	r0, r3
 800936a:	bfb8      	it	lt
 800936c:	4618      	movlt	r0, r3
 800936e:	e730      	b.n	80091d2 <_printf_float+0xc6>
 8009370:	2301      	movs	r3, #1
 8009372:	464a      	mov	r2, r9
 8009374:	4631      	mov	r1, r6
 8009376:	4628      	mov	r0, r5
 8009378:	47b8      	blx	r7
 800937a:	3001      	adds	r0, #1
 800937c:	f43f af27 	beq.w	80091ce <_printf_float+0xc2>
 8009380:	f108 0801 	add.w	r8, r8, #1
 8009384:	e7e6      	b.n	8009354 <_printf_float+0x248>
 8009386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009388:	2b00      	cmp	r3, #0
 800938a:	dc39      	bgt.n	8009400 <_printf_float+0x2f4>
 800938c:	4a1b      	ldr	r2, [pc, #108]	; (80093fc <_printf_float+0x2f0>)
 800938e:	2301      	movs	r3, #1
 8009390:	4631      	mov	r1, r6
 8009392:	4628      	mov	r0, r5
 8009394:	47b8      	blx	r7
 8009396:	3001      	adds	r0, #1
 8009398:	f43f af19 	beq.w	80091ce <_printf_float+0xc2>
 800939c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093a0:	4313      	orrs	r3, r2
 80093a2:	d102      	bne.n	80093aa <_printf_float+0x29e>
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	07d9      	lsls	r1, r3, #31
 80093a8:	d5d8      	bpl.n	800935c <_printf_float+0x250>
 80093aa:	ee18 3a10 	vmov	r3, s16
 80093ae:	4652      	mov	r2, sl
 80093b0:	4631      	mov	r1, r6
 80093b2:	4628      	mov	r0, r5
 80093b4:	47b8      	blx	r7
 80093b6:	3001      	adds	r0, #1
 80093b8:	f43f af09 	beq.w	80091ce <_printf_float+0xc2>
 80093bc:	f04f 0900 	mov.w	r9, #0
 80093c0:	f104 0a1a 	add.w	sl, r4, #26
 80093c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c6:	425b      	negs	r3, r3
 80093c8:	454b      	cmp	r3, r9
 80093ca:	dc01      	bgt.n	80093d0 <_printf_float+0x2c4>
 80093cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ce:	e792      	b.n	80092f6 <_printf_float+0x1ea>
 80093d0:	2301      	movs	r3, #1
 80093d2:	4652      	mov	r2, sl
 80093d4:	4631      	mov	r1, r6
 80093d6:	4628      	mov	r0, r5
 80093d8:	47b8      	blx	r7
 80093da:	3001      	adds	r0, #1
 80093dc:	f43f aef7 	beq.w	80091ce <_printf_float+0xc2>
 80093e0:	f109 0901 	add.w	r9, r9, #1
 80093e4:	e7ee      	b.n	80093c4 <_printf_float+0x2b8>
 80093e6:	bf00      	nop
 80093e8:	7fefffff 	.word	0x7fefffff
 80093ec:	0800f16c 	.word	0x0800f16c
 80093f0:	0800f170 	.word	0x0800f170
 80093f4:	0800f178 	.word	0x0800f178
 80093f8:	0800f174 	.word	0x0800f174
 80093fc:	0800f17c 	.word	0x0800f17c
 8009400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009402:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009404:	429a      	cmp	r2, r3
 8009406:	bfa8      	it	ge
 8009408:	461a      	movge	r2, r3
 800940a:	2a00      	cmp	r2, #0
 800940c:	4691      	mov	r9, r2
 800940e:	dc37      	bgt.n	8009480 <_printf_float+0x374>
 8009410:	f04f 0b00 	mov.w	fp, #0
 8009414:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009418:	f104 021a 	add.w	r2, r4, #26
 800941c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800941e:	9305      	str	r3, [sp, #20]
 8009420:	eba3 0309 	sub.w	r3, r3, r9
 8009424:	455b      	cmp	r3, fp
 8009426:	dc33      	bgt.n	8009490 <_printf_float+0x384>
 8009428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800942c:	429a      	cmp	r2, r3
 800942e:	db3b      	blt.n	80094a8 <_printf_float+0x39c>
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	07da      	lsls	r2, r3, #31
 8009434:	d438      	bmi.n	80094a8 <_printf_float+0x39c>
 8009436:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009438:	9b05      	ldr	r3, [sp, #20]
 800943a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	eba2 0901 	sub.w	r9, r2, r1
 8009442:	4599      	cmp	r9, r3
 8009444:	bfa8      	it	ge
 8009446:	4699      	movge	r9, r3
 8009448:	f1b9 0f00 	cmp.w	r9, #0
 800944c:	dc35      	bgt.n	80094ba <_printf_float+0x3ae>
 800944e:	f04f 0800 	mov.w	r8, #0
 8009452:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009456:	f104 0a1a 	add.w	sl, r4, #26
 800945a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800945e:	1a9b      	subs	r3, r3, r2
 8009460:	eba3 0309 	sub.w	r3, r3, r9
 8009464:	4543      	cmp	r3, r8
 8009466:	f77f af79 	ble.w	800935c <_printf_float+0x250>
 800946a:	2301      	movs	r3, #1
 800946c:	4652      	mov	r2, sl
 800946e:	4631      	mov	r1, r6
 8009470:	4628      	mov	r0, r5
 8009472:	47b8      	blx	r7
 8009474:	3001      	adds	r0, #1
 8009476:	f43f aeaa 	beq.w	80091ce <_printf_float+0xc2>
 800947a:	f108 0801 	add.w	r8, r8, #1
 800947e:	e7ec      	b.n	800945a <_printf_float+0x34e>
 8009480:	4613      	mov	r3, r2
 8009482:	4631      	mov	r1, r6
 8009484:	4642      	mov	r2, r8
 8009486:	4628      	mov	r0, r5
 8009488:	47b8      	blx	r7
 800948a:	3001      	adds	r0, #1
 800948c:	d1c0      	bne.n	8009410 <_printf_float+0x304>
 800948e:	e69e      	b.n	80091ce <_printf_float+0xc2>
 8009490:	2301      	movs	r3, #1
 8009492:	4631      	mov	r1, r6
 8009494:	4628      	mov	r0, r5
 8009496:	9205      	str	r2, [sp, #20]
 8009498:	47b8      	blx	r7
 800949a:	3001      	adds	r0, #1
 800949c:	f43f ae97 	beq.w	80091ce <_printf_float+0xc2>
 80094a0:	9a05      	ldr	r2, [sp, #20]
 80094a2:	f10b 0b01 	add.w	fp, fp, #1
 80094a6:	e7b9      	b.n	800941c <_printf_float+0x310>
 80094a8:	ee18 3a10 	vmov	r3, s16
 80094ac:	4652      	mov	r2, sl
 80094ae:	4631      	mov	r1, r6
 80094b0:	4628      	mov	r0, r5
 80094b2:	47b8      	blx	r7
 80094b4:	3001      	adds	r0, #1
 80094b6:	d1be      	bne.n	8009436 <_printf_float+0x32a>
 80094b8:	e689      	b.n	80091ce <_printf_float+0xc2>
 80094ba:	9a05      	ldr	r2, [sp, #20]
 80094bc:	464b      	mov	r3, r9
 80094be:	4442      	add	r2, r8
 80094c0:	4631      	mov	r1, r6
 80094c2:	4628      	mov	r0, r5
 80094c4:	47b8      	blx	r7
 80094c6:	3001      	adds	r0, #1
 80094c8:	d1c1      	bne.n	800944e <_printf_float+0x342>
 80094ca:	e680      	b.n	80091ce <_printf_float+0xc2>
 80094cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094ce:	2a01      	cmp	r2, #1
 80094d0:	dc01      	bgt.n	80094d6 <_printf_float+0x3ca>
 80094d2:	07db      	lsls	r3, r3, #31
 80094d4:	d538      	bpl.n	8009548 <_printf_float+0x43c>
 80094d6:	2301      	movs	r3, #1
 80094d8:	4642      	mov	r2, r8
 80094da:	4631      	mov	r1, r6
 80094dc:	4628      	mov	r0, r5
 80094de:	47b8      	blx	r7
 80094e0:	3001      	adds	r0, #1
 80094e2:	f43f ae74 	beq.w	80091ce <_printf_float+0xc2>
 80094e6:	ee18 3a10 	vmov	r3, s16
 80094ea:	4652      	mov	r2, sl
 80094ec:	4631      	mov	r1, r6
 80094ee:	4628      	mov	r0, r5
 80094f0:	47b8      	blx	r7
 80094f2:	3001      	adds	r0, #1
 80094f4:	f43f ae6b 	beq.w	80091ce <_printf_float+0xc2>
 80094f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094fc:	2200      	movs	r2, #0
 80094fe:	2300      	movs	r3, #0
 8009500:	f7f7 fb42 	bl	8000b88 <__aeabi_dcmpeq>
 8009504:	b9d8      	cbnz	r0, 800953e <_printf_float+0x432>
 8009506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009508:	f108 0201 	add.w	r2, r8, #1
 800950c:	3b01      	subs	r3, #1
 800950e:	4631      	mov	r1, r6
 8009510:	4628      	mov	r0, r5
 8009512:	47b8      	blx	r7
 8009514:	3001      	adds	r0, #1
 8009516:	d10e      	bne.n	8009536 <_printf_float+0x42a>
 8009518:	e659      	b.n	80091ce <_printf_float+0xc2>
 800951a:	2301      	movs	r3, #1
 800951c:	4652      	mov	r2, sl
 800951e:	4631      	mov	r1, r6
 8009520:	4628      	mov	r0, r5
 8009522:	47b8      	blx	r7
 8009524:	3001      	adds	r0, #1
 8009526:	f43f ae52 	beq.w	80091ce <_printf_float+0xc2>
 800952a:	f108 0801 	add.w	r8, r8, #1
 800952e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009530:	3b01      	subs	r3, #1
 8009532:	4543      	cmp	r3, r8
 8009534:	dcf1      	bgt.n	800951a <_printf_float+0x40e>
 8009536:	464b      	mov	r3, r9
 8009538:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800953c:	e6dc      	b.n	80092f8 <_printf_float+0x1ec>
 800953e:	f04f 0800 	mov.w	r8, #0
 8009542:	f104 0a1a 	add.w	sl, r4, #26
 8009546:	e7f2      	b.n	800952e <_printf_float+0x422>
 8009548:	2301      	movs	r3, #1
 800954a:	4642      	mov	r2, r8
 800954c:	e7df      	b.n	800950e <_printf_float+0x402>
 800954e:	2301      	movs	r3, #1
 8009550:	464a      	mov	r2, r9
 8009552:	4631      	mov	r1, r6
 8009554:	4628      	mov	r0, r5
 8009556:	47b8      	blx	r7
 8009558:	3001      	adds	r0, #1
 800955a:	f43f ae38 	beq.w	80091ce <_printf_float+0xc2>
 800955e:	f108 0801 	add.w	r8, r8, #1
 8009562:	68e3      	ldr	r3, [r4, #12]
 8009564:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009566:	1a5b      	subs	r3, r3, r1
 8009568:	4543      	cmp	r3, r8
 800956a:	dcf0      	bgt.n	800954e <_printf_float+0x442>
 800956c:	e6fa      	b.n	8009364 <_printf_float+0x258>
 800956e:	f04f 0800 	mov.w	r8, #0
 8009572:	f104 0919 	add.w	r9, r4, #25
 8009576:	e7f4      	b.n	8009562 <_printf_float+0x456>

08009578 <_printf_common>:
 8009578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800957c:	4616      	mov	r6, r2
 800957e:	4699      	mov	r9, r3
 8009580:	688a      	ldr	r2, [r1, #8]
 8009582:	690b      	ldr	r3, [r1, #16]
 8009584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009588:	4293      	cmp	r3, r2
 800958a:	bfb8      	it	lt
 800958c:	4613      	movlt	r3, r2
 800958e:	6033      	str	r3, [r6, #0]
 8009590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009594:	4607      	mov	r7, r0
 8009596:	460c      	mov	r4, r1
 8009598:	b10a      	cbz	r2, 800959e <_printf_common+0x26>
 800959a:	3301      	adds	r3, #1
 800959c:	6033      	str	r3, [r6, #0]
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	0699      	lsls	r1, r3, #26
 80095a2:	bf42      	ittt	mi
 80095a4:	6833      	ldrmi	r3, [r6, #0]
 80095a6:	3302      	addmi	r3, #2
 80095a8:	6033      	strmi	r3, [r6, #0]
 80095aa:	6825      	ldr	r5, [r4, #0]
 80095ac:	f015 0506 	ands.w	r5, r5, #6
 80095b0:	d106      	bne.n	80095c0 <_printf_common+0x48>
 80095b2:	f104 0a19 	add.w	sl, r4, #25
 80095b6:	68e3      	ldr	r3, [r4, #12]
 80095b8:	6832      	ldr	r2, [r6, #0]
 80095ba:	1a9b      	subs	r3, r3, r2
 80095bc:	42ab      	cmp	r3, r5
 80095be:	dc26      	bgt.n	800960e <_printf_common+0x96>
 80095c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095c4:	1e13      	subs	r3, r2, #0
 80095c6:	6822      	ldr	r2, [r4, #0]
 80095c8:	bf18      	it	ne
 80095ca:	2301      	movne	r3, #1
 80095cc:	0692      	lsls	r2, r2, #26
 80095ce:	d42b      	bmi.n	8009628 <_printf_common+0xb0>
 80095d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095d4:	4649      	mov	r1, r9
 80095d6:	4638      	mov	r0, r7
 80095d8:	47c0      	blx	r8
 80095da:	3001      	adds	r0, #1
 80095dc:	d01e      	beq.n	800961c <_printf_common+0xa4>
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	68e5      	ldr	r5, [r4, #12]
 80095e2:	6832      	ldr	r2, [r6, #0]
 80095e4:	f003 0306 	and.w	r3, r3, #6
 80095e8:	2b04      	cmp	r3, #4
 80095ea:	bf08      	it	eq
 80095ec:	1aad      	subeq	r5, r5, r2
 80095ee:	68a3      	ldr	r3, [r4, #8]
 80095f0:	6922      	ldr	r2, [r4, #16]
 80095f2:	bf0c      	ite	eq
 80095f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095f8:	2500      	movne	r5, #0
 80095fa:	4293      	cmp	r3, r2
 80095fc:	bfc4      	itt	gt
 80095fe:	1a9b      	subgt	r3, r3, r2
 8009600:	18ed      	addgt	r5, r5, r3
 8009602:	2600      	movs	r6, #0
 8009604:	341a      	adds	r4, #26
 8009606:	42b5      	cmp	r5, r6
 8009608:	d11a      	bne.n	8009640 <_printf_common+0xc8>
 800960a:	2000      	movs	r0, #0
 800960c:	e008      	b.n	8009620 <_printf_common+0xa8>
 800960e:	2301      	movs	r3, #1
 8009610:	4652      	mov	r2, sl
 8009612:	4649      	mov	r1, r9
 8009614:	4638      	mov	r0, r7
 8009616:	47c0      	blx	r8
 8009618:	3001      	adds	r0, #1
 800961a:	d103      	bne.n	8009624 <_printf_common+0xac>
 800961c:	f04f 30ff 	mov.w	r0, #4294967295
 8009620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009624:	3501      	adds	r5, #1
 8009626:	e7c6      	b.n	80095b6 <_printf_common+0x3e>
 8009628:	18e1      	adds	r1, r4, r3
 800962a:	1c5a      	adds	r2, r3, #1
 800962c:	2030      	movs	r0, #48	; 0x30
 800962e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009632:	4422      	add	r2, r4
 8009634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800963c:	3302      	adds	r3, #2
 800963e:	e7c7      	b.n	80095d0 <_printf_common+0x58>
 8009640:	2301      	movs	r3, #1
 8009642:	4622      	mov	r2, r4
 8009644:	4649      	mov	r1, r9
 8009646:	4638      	mov	r0, r7
 8009648:	47c0      	blx	r8
 800964a:	3001      	adds	r0, #1
 800964c:	d0e6      	beq.n	800961c <_printf_common+0xa4>
 800964e:	3601      	adds	r6, #1
 8009650:	e7d9      	b.n	8009606 <_printf_common+0x8e>
	...

08009654 <_printf_i>:
 8009654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009658:	460c      	mov	r4, r1
 800965a:	4691      	mov	r9, r2
 800965c:	7e27      	ldrb	r7, [r4, #24]
 800965e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009660:	2f78      	cmp	r7, #120	; 0x78
 8009662:	4680      	mov	r8, r0
 8009664:	469a      	mov	sl, r3
 8009666:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800966a:	d807      	bhi.n	800967c <_printf_i+0x28>
 800966c:	2f62      	cmp	r7, #98	; 0x62
 800966e:	d80a      	bhi.n	8009686 <_printf_i+0x32>
 8009670:	2f00      	cmp	r7, #0
 8009672:	f000 80d8 	beq.w	8009826 <_printf_i+0x1d2>
 8009676:	2f58      	cmp	r7, #88	; 0x58
 8009678:	f000 80a3 	beq.w	80097c2 <_printf_i+0x16e>
 800967c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009684:	e03a      	b.n	80096fc <_printf_i+0xa8>
 8009686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800968a:	2b15      	cmp	r3, #21
 800968c:	d8f6      	bhi.n	800967c <_printf_i+0x28>
 800968e:	a001      	add	r0, pc, #4	; (adr r0, 8009694 <_printf_i+0x40>)
 8009690:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009694:	080096ed 	.word	0x080096ed
 8009698:	08009701 	.word	0x08009701
 800969c:	0800967d 	.word	0x0800967d
 80096a0:	0800967d 	.word	0x0800967d
 80096a4:	0800967d 	.word	0x0800967d
 80096a8:	0800967d 	.word	0x0800967d
 80096ac:	08009701 	.word	0x08009701
 80096b0:	0800967d 	.word	0x0800967d
 80096b4:	0800967d 	.word	0x0800967d
 80096b8:	0800967d 	.word	0x0800967d
 80096bc:	0800967d 	.word	0x0800967d
 80096c0:	0800980d 	.word	0x0800980d
 80096c4:	08009731 	.word	0x08009731
 80096c8:	080097ef 	.word	0x080097ef
 80096cc:	0800967d 	.word	0x0800967d
 80096d0:	0800967d 	.word	0x0800967d
 80096d4:	0800982f 	.word	0x0800982f
 80096d8:	0800967d 	.word	0x0800967d
 80096dc:	08009731 	.word	0x08009731
 80096e0:	0800967d 	.word	0x0800967d
 80096e4:	0800967d 	.word	0x0800967d
 80096e8:	080097f7 	.word	0x080097f7
 80096ec:	680b      	ldr	r3, [r1, #0]
 80096ee:	1d1a      	adds	r2, r3, #4
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	600a      	str	r2, [r1, #0]
 80096f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80096f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096fc:	2301      	movs	r3, #1
 80096fe:	e0a3      	b.n	8009848 <_printf_i+0x1f4>
 8009700:	6825      	ldr	r5, [r4, #0]
 8009702:	6808      	ldr	r0, [r1, #0]
 8009704:	062e      	lsls	r6, r5, #24
 8009706:	f100 0304 	add.w	r3, r0, #4
 800970a:	d50a      	bpl.n	8009722 <_printf_i+0xce>
 800970c:	6805      	ldr	r5, [r0, #0]
 800970e:	600b      	str	r3, [r1, #0]
 8009710:	2d00      	cmp	r5, #0
 8009712:	da03      	bge.n	800971c <_printf_i+0xc8>
 8009714:	232d      	movs	r3, #45	; 0x2d
 8009716:	426d      	negs	r5, r5
 8009718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800971c:	485e      	ldr	r0, [pc, #376]	; (8009898 <_printf_i+0x244>)
 800971e:	230a      	movs	r3, #10
 8009720:	e019      	b.n	8009756 <_printf_i+0x102>
 8009722:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009726:	6805      	ldr	r5, [r0, #0]
 8009728:	600b      	str	r3, [r1, #0]
 800972a:	bf18      	it	ne
 800972c:	b22d      	sxthne	r5, r5
 800972e:	e7ef      	b.n	8009710 <_printf_i+0xbc>
 8009730:	680b      	ldr	r3, [r1, #0]
 8009732:	6825      	ldr	r5, [r4, #0]
 8009734:	1d18      	adds	r0, r3, #4
 8009736:	6008      	str	r0, [r1, #0]
 8009738:	0628      	lsls	r0, r5, #24
 800973a:	d501      	bpl.n	8009740 <_printf_i+0xec>
 800973c:	681d      	ldr	r5, [r3, #0]
 800973e:	e002      	b.n	8009746 <_printf_i+0xf2>
 8009740:	0669      	lsls	r1, r5, #25
 8009742:	d5fb      	bpl.n	800973c <_printf_i+0xe8>
 8009744:	881d      	ldrh	r5, [r3, #0]
 8009746:	4854      	ldr	r0, [pc, #336]	; (8009898 <_printf_i+0x244>)
 8009748:	2f6f      	cmp	r7, #111	; 0x6f
 800974a:	bf0c      	ite	eq
 800974c:	2308      	moveq	r3, #8
 800974e:	230a      	movne	r3, #10
 8009750:	2100      	movs	r1, #0
 8009752:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009756:	6866      	ldr	r6, [r4, #4]
 8009758:	60a6      	str	r6, [r4, #8]
 800975a:	2e00      	cmp	r6, #0
 800975c:	bfa2      	ittt	ge
 800975e:	6821      	ldrge	r1, [r4, #0]
 8009760:	f021 0104 	bicge.w	r1, r1, #4
 8009764:	6021      	strge	r1, [r4, #0]
 8009766:	b90d      	cbnz	r5, 800976c <_printf_i+0x118>
 8009768:	2e00      	cmp	r6, #0
 800976a:	d04d      	beq.n	8009808 <_printf_i+0x1b4>
 800976c:	4616      	mov	r6, r2
 800976e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009772:	fb03 5711 	mls	r7, r3, r1, r5
 8009776:	5dc7      	ldrb	r7, [r0, r7]
 8009778:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800977c:	462f      	mov	r7, r5
 800977e:	42bb      	cmp	r3, r7
 8009780:	460d      	mov	r5, r1
 8009782:	d9f4      	bls.n	800976e <_printf_i+0x11a>
 8009784:	2b08      	cmp	r3, #8
 8009786:	d10b      	bne.n	80097a0 <_printf_i+0x14c>
 8009788:	6823      	ldr	r3, [r4, #0]
 800978a:	07df      	lsls	r7, r3, #31
 800978c:	d508      	bpl.n	80097a0 <_printf_i+0x14c>
 800978e:	6923      	ldr	r3, [r4, #16]
 8009790:	6861      	ldr	r1, [r4, #4]
 8009792:	4299      	cmp	r1, r3
 8009794:	bfde      	ittt	le
 8009796:	2330      	movle	r3, #48	; 0x30
 8009798:	f806 3c01 	strble.w	r3, [r6, #-1]
 800979c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80097a0:	1b92      	subs	r2, r2, r6
 80097a2:	6122      	str	r2, [r4, #16]
 80097a4:	f8cd a000 	str.w	sl, [sp]
 80097a8:	464b      	mov	r3, r9
 80097aa:	aa03      	add	r2, sp, #12
 80097ac:	4621      	mov	r1, r4
 80097ae:	4640      	mov	r0, r8
 80097b0:	f7ff fee2 	bl	8009578 <_printf_common>
 80097b4:	3001      	adds	r0, #1
 80097b6:	d14c      	bne.n	8009852 <_printf_i+0x1fe>
 80097b8:	f04f 30ff 	mov.w	r0, #4294967295
 80097bc:	b004      	add	sp, #16
 80097be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097c2:	4835      	ldr	r0, [pc, #212]	; (8009898 <_printf_i+0x244>)
 80097c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80097c8:	6823      	ldr	r3, [r4, #0]
 80097ca:	680e      	ldr	r6, [r1, #0]
 80097cc:	061f      	lsls	r7, r3, #24
 80097ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80097d2:	600e      	str	r6, [r1, #0]
 80097d4:	d514      	bpl.n	8009800 <_printf_i+0x1ac>
 80097d6:	07d9      	lsls	r1, r3, #31
 80097d8:	bf44      	itt	mi
 80097da:	f043 0320 	orrmi.w	r3, r3, #32
 80097de:	6023      	strmi	r3, [r4, #0]
 80097e0:	b91d      	cbnz	r5, 80097ea <_printf_i+0x196>
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	f023 0320 	bic.w	r3, r3, #32
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	2310      	movs	r3, #16
 80097ec:	e7b0      	b.n	8009750 <_printf_i+0xfc>
 80097ee:	6823      	ldr	r3, [r4, #0]
 80097f0:	f043 0320 	orr.w	r3, r3, #32
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	2378      	movs	r3, #120	; 0x78
 80097f8:	4828      	ldr	r0, [pc, #160]	; (800989c <_printf_i+0x248>)
 80097fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097fe:	e7e3      	b.n	80097c8 <_printf_i+0x174>
 8009800:	065e      	lsls	r6, r3, #25
 8009802:	bf48      	it	mi
 8009804:	b2ad      	uxthmi	r5, r5
 8009806:	e7e6      	b.n	80097d6 <_printf_i+0x182>
 8009808:	4616      	mov	r6, r2
 800980a:	e7bb      	b.n	8009784 <_printf_i+0x130>
 800980c:	680b      	ldr	r3, [r1, #0]
 800980e:	6826      	ldr	r6, [r4, #0]
 8009810:	6960      	ldr	r0, [r4, #20]
 8009812:	1d1d      	adds	r5, r3, #4
 8009814:	600d      	str	r5, [r1, #0]
 8009816:	0635      	lsls	r5, r6, #24
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	d501      	bpl.n	8009820 <_printf_i+0x1cc>
 800981c:	6018      	str	r0, [r3, #0]
 800981e:	e002      	b.n	8009826 <_printf_i+0x1d2>
 8009820:	0671      	lsls	r1, r6, #25
 8009822:	d5fb      	bpl.n	800981c <_printf_i+0x1c8>
 8009824:	8018      	strh	r0, [r3, #0]
 8009826:	2300      	movs	r3, #0
 8009828:	6123      	str	r3, [r4, #16]
 800982a:	4616      	mov	r6, r2
 800982c:	e7ba      	b.n	80097a4 <_printf_i+0x150>
 800982e:	680b      	ldr	r3, [r1, #0]
 8009830:	1d1a      	adds	r2, r3, #4
 8009832:	600a      	str	r2, [r1, #0]
 8009834:	681e      	ldr	r6, [r3, #0]
 8009836:	6862      	ldr	r2, [r4, #4]
 8009838:	2100      	movs	r1, #0
 800983a:	4630      	mov	r0, r6
 800983c:	f7f6 fd30 	bl	80002a0 <memchr>
 8009840:	b108      	cbz	r0, 8009846 <_printf_i+0x1f2>
 8009842:	1b80      	subs	r0, r0, r6
 8009844:	6060      	str	r0, [r4, #4]
 8009846:	6863      	ldr	r3, [r4, #4]
 8009848:	6123      	str	r3, [r4, #16]
 800984a:	2300      	movs	r3, #0
 800984c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009850:	e7a8      	b.n	80097a4 <_printf_i+0x150>
 8009852:	6923      	ldr	r3, [r4, #16]
 8009854:	4632      	mov	r2, r6
 8009856:	4649      	mov	r1, r9
 8009858:	4640      	mov	r0, r8
 800985a:	47d0      	blx	sl
 800985c:	3001      	adds	r0, #1
 800985e:	d0ab      	beq.n	80097b8 <_printf_i+0x164>
 8009860:	6823      	ldr	r3, [r4, #0]
 8009862:	079b      	lsls	r3, r3, #30
 8009864:	d413      	bmi.n	800988e <_printf_i+0x23a>
 8009866:	68e0      	ldr	r0, [r4, #12]
 8009868:	9b03      	ldr	r3, [sp, #12]
 800986a:	4298      	cmp	r0, r3
 800986c:	bfb8      	it	lt
 800986e:	4618      	movlt	r0, r3
 8009870:	e7a4      	b.n	80097bc <_printf_i+0x168>
 8009872:	2301      	movs	r3, #1
 8009874:	4632      	mov	r2, r6
 8009876:	4649      	mov	r1, r9
 8009878:	4640      	mov	r0, r8
 800987a:	47d0      	blx	sl
 800987c:	3001      	adds	r0, #1
 800987e:	d09b      	beq.n	80097b8 <_printf_i+0x164>
 8009880:	3501      	adds	r5, #1
 8009882:	68e3      	ldr	r3, [r4, #12]
 8009884:	9903      	ldr	r1, [sp, #12]
 8009886:	1a5b      	subs	r3, r3, r1
 8009888:	42ab      	cmp	r3, r5
 800988a:	dcf2      	bgt.n	8009872 <_printf_i+0x21e>
 800988c:	e7eb      	b.n	8009866 <_printf_i+0x212>
 800988e:	2500      	movs	r5, #0
 8009890:	f104 0619 	add.w	r6, r4, #25
 8009894:	e7f5      	b.n	8009882 <_printf_i+0x22e>
 8009896:	bf00      	nop
 8009898:	0800f17e 	.word	0x0800f17e
 800989c:	0800f18f 	.word	0x0800f18f

080098a0 <iprintf>:
 80098a0:	b40f      	push	{r0, r1, r2, r3}
 80098a2:	4b0a      	ldr	r3, [pc, #40]	; (80098cc <iprintf+0x2c>)
 80098a4:	b513      	push	{r0, r1, r4, lr}
 80098a6:	681c      	ldr	r4, [r3, #0]
 80098a8:	b124      	cbz	r4, 80098b4 <iprintf+0x14>
 80098aa:	69a3      	ldr	r3, [r4, #24]
 80098ac:	b913      	cbnz	r3, 80098b4 <iprintf+0x14>
 80098ae:	4620      	mov	r0, r4
 80098b0:	f000 fede 	bl	800a670 <__sinit>
 80098b4:	ab05      	add	r3, sp, #20
 80098b6:	9a04      	ldr	r2, [sp, #16]
 80098b8:	68a1      	ldr	r1, [r4, #8]
 80098ba:	9301      	str	r3, [sp, #4]
 80098bc:	4620      	mov	r0, r4
 80098be:	f001 fbf5 	bl	800b0ac <_vfiprintf_r>
 80098c2:	b002      	add	sp, #8
 80098c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098c8:	b004      	add	sp, #16
 80098ca:	4770      	bx	lr
 80098cc:	20000410 	.word	0x20000410

080098d0 <quorem>:
 80098d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d4:	6903      	ldr	r3, [r0, #16]
 80098d6:	690c      	ldr	r4, [r1, #16]
 80098d8:	42a3      	cmp	r3, r4
 80098da:	4607      	mov	r7, r0
 80098dc:	f2c0 8081 	blt.w	80099e2 <quorem+0x112>
 80098e0:	3c01      	subs	r4, #1
 80098e2:	f101 0814 	add.w	r8, r1, #20
 80098e6:	f100 0514 	add.w	r5, r0, #20
 80098ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098ee:	9301      	str	r3, [sp, #4]
 80098f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098f8:	3301      	adds	r3, #1
 80098fa:	429a      	cmp	r2, r3
 80098fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009900:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009904:	fbb2 f6f3 	udiv	r6, r2, r3
 8009908:	d331      	bcc.n	800996e <quorem+0x9e>
 800990a:	f04f 0e00 	mov.w	lr, #0
 800990e:	4640      	mov	r0, r8
 8009910:	46ac      	mov	ip, r5
 8009912:	46f2      	mov	sl, lr
 8009914:	f850 2b04 	ldr.w	r2, [r0], #4
 8009918:	b293      	uxth	r3, r2
 800991a:	fb06 e303 	mla	r3, r6, r3, lr
 800991e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009922:	b29b      	uxth	r3, r3
 8009924:	ebaa 0303 	sub.w	r3, sl, r3
 8009928:	0c12      	lsrs	r2, r2, #16
 800992a:	f8dc a000 	ldr.w	sl, [ip]
 800992e:	fb06 e202 	mla	r2, r6, r2, lr
 8009932:	fa13 f38a 	uxtah	r3, r3, sl
 8009936:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800993a:	fa1f fa82 	uxth.w	sl, r2
 800993e:	f8dc 2000 	ldr.w	r2, [ip]
 8009942:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009946:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800994a:	b29b      	uxth	r3, r3
 800994c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009950:	4581      	cmp	r9, r0
 8009952:	f84c 3b04 	str.w	r3, [ip], #4
 8009956:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800995a:	d2db      	bcs.n	8009914 <quorem+0x44>
 800995c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009960:	b92b      	cbnz	r3, 800996e <quorem+0x9e>
 8009962:	9b01      	ldr	r3, [sp, #4]
 8009964:	3b04      	subs	r3, #4
 8009966:	429d      	cmp	r5, r3
 8009968:	461a      	mov	r2, r3
 800996a:	d32e      	bcc.n	80099ca <quorem+0xfa>
 800996c:	613c      	str	r4, [r7, #16]
 800996e:	4638      	mov	r0, r7
 8009970:	f001 f9b8 	bl	800ace4 <__mcmp>
 8009974:	2800      	cmp	r0, #0
 8009976:	db24      	blt.n	80099c2 <quorem+0xf2>
 8009978:	3601      	adds	r6, #1
 800997a:	4628      	mov	r0, r5
 800997c:	f04f 0c00 	mov.w	ip, #0
 8009980:	f858 2b04 	ldr.w	r2, [r8], #4
 8009984:	f8d0 e000 	ldr.w	lr, [r0]
 8009988:	b293      	uxth	r3, r2
 800998a:	ebac 0303 	sub.w	r3, ip, r3
 800998e:	0c12      	lsrs	r2, r2, #16
 8009990:	fa13 f38e 	uxtah	r3, r3, lr
 8009994:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009998:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800999c:	b29b      	uxth	r3, r3
 800999e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099a2:	45c1      	cmp	r9, r8
 80099a4:	f840 3b04 	str.w	r3, [r0], #4
 80099a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80099ac:	d2e8      	bcs.n	8009980 <quorem+0xb0>
 80099ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099b6:	b922      	cbnz	r2, 80099c2 <quorem+0xf2>
 80099b8:	3b04      	subs	r3, #4
 80099ba:	429d      	cmp	r5, r3
 80099bc:	461a      	mov	r2, r3
 80099be:	d30a      	bcc.n	80099d6 <quorem+0x106>
 80099c0:	613c      	str	r4, [r7, #16]
 80099c2:	4630      	mov	r0, r6
 80099c4:	b003      	add	sp, #12
 80099c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ca:	6812      	ldr	r2, [r2, #0]
 80099cc:	3b04      	subs	r3, #4
 80099ce:	2a00      	cmp	r2, #0
 80099d0:	d1cc      	bne.n	800996c <quorem+0x9c>
 80099d2:	3c01      	subs	r4, #1
 80099d4:	e7c7      	b.n	8009966 <quorem+0x96>
 80099d6:	6812      	ldr	r2, [r2, #0]
 80099d8:	3b04      	subs	r3, #4
 80099da:	2a00      	cmp	r2, #0
 80099dc:	d1f0      	bne.n	80099c0 <quorem+0xf0>
 80099de:	3c01      	subs	r4, #1
 80099e0:	e7eb      	b.n	80099ba <quorem+0xea>
 80099e2:	2000      	movs	r0, #0
 80099e4:	e7ee      	b.n	80099c4 <quorem+0xf4>
	...

080099e8 <_dtoa_r>:
 80099e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ec:	ed2d 8b02 	vpush	{d8}
 80099f0:	ec57 6b10 	vmov	r6, r7, d0
 80099f4:	b095      	sub	sp, #84	; 0x54
 80099f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80099f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80099fc:	9105      	str	r1, [sp, #20]
 80099fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009a02:	4604      	mov	r4, r0
 8009a04:	9209      	str	r2, [sp, #36]	; 0x24
 8009a06:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a08:	b975      	cbnz	r5, 8009a28 <_dtoa_r+0x40>
 8009a0a:	2010      	movs	r0, #16
 8009a0c:	f000 fed6 	bl	800a7bc <malloc>
 8009a10:	4602      	mov	r2, r0
 8009a12:	6260      	str	r0, [r4, #36]	; 0x24
 8009a14:	b920      	cbnz	r0, 8009a20 <_dtoa_r+0x38>
 8009a16:	4bb2      	ldr	r3, [pc, #712]	; (8009ce0 <_dtoa_r+0x2f8>)
 8009a18:	21ea      	movs	r1, #234	; 0xea
 8009a1a:	48b2      	ldr	r0, [pc, #712]	; (8009ce4 <_dtoa_r+0x2fc>)
 8009a1c:	f001 fd9c 	bl	800b558 <__assert_func>
 8009a20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a24:	6005      	str	r5, [r0, #0]
 8009a26:	60c5      	str	r5, [r0, #12]
 8009a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a2a:	6819      	ldr	r1, [r3, #0]
 8009a2c:	b151      	cbz	r1, 8009a44 <_dtoa_r+0x5c>
 8009a2e:	685a      	ldr	r2, [r3, #4]
 8009a30:	604a      	str	r2, [r1, #4]
 8009a32:	2301      	movs	r3, #1
 8009a34:	4093      	lsls	r3, r2
 8009a36:	608b      	str	r3, [r1, #8]
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f000 ff15 	bl	800a868 <_Bfree>
 8009a3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a40:	2200      	movs	r2, #0
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	1e3b      	subs	r3, r7, #0
 8009a46:	bfb9      	ittee	lt
 8009a48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009a4c:	9303      	strlt	r3, [sp, #12]
 8009a4e:	2300      	movge	r3, #0
 8009a50:	f8c8 3000 	strge.w	r3, [r8]
 8009a54:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009a58:	4ba3      	ldr	r3, [pc, #652]	; (8009ce8 <_dtoa_r+0x300>)
 8009a5a:	bfbc      	itt	lt
 8009a5c:	2201      	movlt	r2, #1
 8009a5e:	f8c8 2000 	strlt.w	r2, [r8]
 8009a62:	ea33 0309 	bics.w	r3, r3, r9
 8009a66:	d11b      	bne.n	8009aa0 <_dtoa_r+0xb8>
 8009a68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a6e:	6013      	str	r3, [r2, #0]
 8009a70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a74:	4333      	orrs	r3, r6
 8009a76:	f000 857a 	beq.w	800a56e <_dtoa_r+0xb86>
 8009a7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a7c:	b963      	cbnz	r3, 8009a98 <_dtoa_r+0xb0>
 8009a7e:	4b9b      	ldr	r3, [pc, #620]	; (8009cec <_dtoa_r+0x304>)
 8009a80:	e024      	b.n	8009acc <_dtoa_r+0xe4>
 8009a82:	4b9b      	ldr	r3, [pc, #620]	; (8009cf0 <_dtoa_r+0x308>)
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	3308      	adds	r3, #8
 8009a88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a8a:	6013      	str	r3, [r2, #0]
 8009a8c:	9800      	ldr	r0, [sp, #0]
 8009a8e:	b015      	add	sp, #84	; 0x54
 8009a90:	ecbd 8b02 	vpop	{d8}
 8009a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a98:	4b94      	ldr	r3, [pc, #592]	; (8009cec <_dtoa_r+0x304>)
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	3303      	adds	r3, #3
 8009a9e:	e7f3      	b.n	8009a88 <_dtoa_r+0xa0>
 8009aa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	ec51 0b17 	vmov	r0, r1, d7
 8009aaa:	2300      	movs	r3, #0
 8009aac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009ab0:	f7f7 f86a 	bl	8000b88 <__aeabi_dcmpeq>
 8009ab4:	4680      	mov	r8, r0
 8009ab6:	b158      	cbz	r0, 8009ad0 <_dtoa_r+0xe8>
 8009ab8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009aba:	2301      	movs	r3, #1
 8009abc:	6013      	str	r3, [r2, #0]
 8009abe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f000 8551 	beq.w	800a568 <_dtoa_r+0xb80>
 8009ac6:	488b      	ldr	r0, [pc, #556]	; (8009cf4 <_dtoa_r+0x30c>)
 8009ac8:	6018      	str	r0, [r3, #0]
 8009aca:	1e43      	subs	r3, r0, #1
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	e7dd      	b.n	8009a8c <_dtoa_r+0xa4>
 8009ad0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009ad4:	aa12      	add	r2, sp, #72	; 0x48
 8009ad6:	a913      	add	r1, sp, #76	; 0x4c
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f001 f9a7 	bl	800ae2c <__d2b>
 8009ade:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ae2:	4683      	mov	fp, r0
 8009ae4:	2d00      	cmp	r5, #0
 8009ae6:	d07c      	beq.n	8009be2 <_dtoa_r+0x1fa>
 8009ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009af2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009af6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009afa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009afe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b02:	4b7d      	ldr	r3, [pc, #500]	; (8009cf8 <_dtoa_r+0x310>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	4630      	mov	r0, r6
 8009b08:	4639      	mov	r1, r7
 8009b0a:	f7f6 fc1d 	bl	8000348 <__aeabi_dsub>
 8009b0e:	a36e      	add	r3, pc, #440	; (adr r3, 8009cc8 <_dtoa_r+0x2e0>)
 8009b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b14:	f7f6 fdd0 	bl	80006b8 <__aeabi_dmul>
 8009b18:	a36d      	add	r3, pc, #436	; (adr r3, 8009cd0 <_dtoa_r+0x2e8>)
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	f7f6 fc15 	bl	800034c <__adddf3>
 8009b22:	4606      	mov	r6, r0
 8009b24:	4628      	mov	r0, r5
 8009b26:	460f      	mov	r7, r1
 8009b28:	f7f6 fd5c 	bl	80005e4 <__aeabi_i2d>
 8009b2c:	a36a      	add	r3, pc, #424	; (adr r3, 8009cd8 <_dtoa_r+0x2f0>)
 8009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b32:	f7f6 fdc1 	bl	80006b8 <__aeabi_dmul>
 8009b36:	4602      	mov	r2, r0
 8009b38:	460b      	mov	r3, r1
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	4639      	mov	r1, r7
 8009b3e:	f7f6 fc05 	bl	800034c <__adddf3>
 8009b42:	4606      	mov	r6, r0
 8009b44:	460f      	mov	r7, r1
 8009b46:	f7f7 f867 	bl	8000c18 <__aeabi_d2iz>
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	4682      	mov	sl, r0
 8009b4e:	2300      	movs	r3, #0
 8009b50:	4630      	mov	r0, r6
 8009b52:	4639      	mov	r1, r7
 8009b54:	f7f7 f822 	bl	8000b9c <__aeabi_dcmplt>
 8009b58:	b148      	cbz	r0, 8009b6e <_dtoa_r+0x186>
 8009b5a:	4650      	mov	r0, sl
 8009b5c:	f7f6 fd42 	bl	80005e4 <__aeabi_i2d>
 8009b60:	4632      	mov	r2, r6
 8009b62:	463b      	mov	r3, r7
 8009b64:	f7f7 f810 	bl	8000b88 <__aeabi_dcmpeq>
 8009b68:	b908      	cbnz	r0, 8009b6e <_dtoa_r+0x186>
 8009b6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b6e:	f1ba 0f16 	cmp.w	sl, #22
 8009b72:	d854      	bhi.n	8009c1e <_dtoa_r+0x236>
 8009b74:	4b61      	ldr	r3, [pc, #388]	; (8009cfc <_dtoa_r+0x314>)
 8009b76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b82:	f7f7 f80b 	bl	8000b9c <__aeabi_dcmplt>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d04b      	beq.n	8009c22 <_dtoa_r+0x23a>
 8009b8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b8e:	2300      	movs	r3, #0
 8009b90:	930e      	str	r3, [sp, #56]	; 0x38
 8009b92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b94:	1b5d      	subs	r5, r3, r5
 8009b96:	1e6b      	subs	r3, r5, #1
 8009b98:	9304      	str	r3, [sp, #16]
 8009b9a:	bf43      	ittte	mi
 8009b9c:	2300      	movmi	r3, #0
 8009b9e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009ba2:	9304      	strmi	r3, [sp, #16]
 8009ba4:	f04f 0800 	movpl.w	r8, #0
 8009ba8:	f1ba 0f00 	cmp.w	sl, #0
 8009bac:	db3b      	blt.n	8009c26 <_dtoa_r+0x23e>
 8009bae:	9b04      	ldr	r3, [sp, #16]
 8009bb0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009bb4:	4453      	add	r3, sl
 8009bb6:	9304      	str	r3, [sp, #16]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	9306      	str	r3, [sp, #24]
 8009bbc:	9b05      	ldr	r3, [sp, #20]
 8009bbe:	2b09      	cmp	r3, #9
 8009bc0:	d869      	bhi.n	8009c96 <_dtoa_r+0x2ae>
 8009bc2:	2b05      	cmp	r3, #5
 8009bc4:	bfc4      	itt	gt
 8009bc6:	3b04      	subgt	r3, #4
 8009bc8:	9305      	strgt	r3, [sp, #20]
 8009bca:	9b05      	ldr	r3, [sp, #20]
 8009bcc:	f1a3 0302 	sub.w	r3, r3, #2
 8009bd0:	bfcc      	ite	gt
 8009bd2:	2500      	movgt	r5, #0
 8009bd4:	2501      	movle	r5, #1
 8009bd6:	2b03      	cmp	r3, #3
 8009bd8:	d869      	bhi.n	8009cae <_dtoa_r+0x2c6>
 8009bda:	e8df f003 	tbb	[pc, r3]
 8009bde:	4e2c      	.short	0x4e2c
 8009be0:	5a4c      	.short	0x5a4c
 8009be2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009be6:	441d      	add	r5, r3
 8009be8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009bec:	2b20      	cmp	r3, #32
 8009bee:	bfc1      	itttt	gt
 8009bf0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009bf4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009bf8:	fa09 f303 	lslgt.w	r3, r9, r3
 8009bfc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c00:	bfda      	itte	le
 8009c02:	f1c3 0320 	rsble	r3, r3, #32
 8009c06:	fa06 f003 	lslle.w	r0, r6, r3
 8009c0a:	4318      	orrgt	r0, r3
 8009c0c:	f7f6 fcda 	bl	80005c4 <__aeabi_ui2d>
 8009c10:	2301      	movs	r3, #1
 8009c12:	4606      	mov	r6, r0
 8009c14:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009c18:	3d01      	subs	r5, #1
 8009c1a:	9310      	str	r3, [sp, #64]	; 0x40
 8009c1c:	e771      	b.n	8009b02 <_dtoa_r+0x11a>
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e7b6      	b.n	8009b90 <_dtoa_r+0x1a8>
 8009c22:	900e      	str	r0, [sp, #56]	; 0x38
 8009c24:	e7b5      	b.n	8009b92 <_dtoa_r+0x1aa>
 8009c26:	f1ca 0300 	rsb	r3, sl, #0
 8009c2a:	9306      	str	r3, [sp, #24]
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	eba8 080a 	sub.w	r8, r8, sl
 8009c32:	930d      	str	r3, [sp, #52]	; 0x34
 8009c34:	e7c2      	b.n	8009bbc <_dtoa_r+0x1d4>
 8009c36:	2300      	movs	r3, #0
 8009c38:	9308      	str	r3, [sp, #32]
 8009c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	dc39      	bgt.n	8009cb4 <_dtoa_r+0x2cc>
 8009c40:	f04f 0901 	mov.w	r9, #1
 8009c44:	f8cd 9004 	str.w	r9, [sp, #4]
 8009c48:	464b      	mov	r3, r9
 8009c4a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009c4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009c50:	2200      	movs	r2, #0
 8009c52:	6042      	str	r2, [r0, #4]
 8009c54:	2204      	movs	r2, #4
 8009c56:	f102 0614 	add.w	r6, r2, #20
 8009c5a:	429e      	cmp	r6, r3
 8009c5c:	6841      	ldr	r1, [r0, #4]
 8009c5e:	d92f      	bls.n	8009cc0 <_dtoa_r+0x2d8>
 8009c60:	4620      	mov	r0, r4
 8009c62:	f000 fdc1 	bl	800a7e8 <_Balloc>
 8009c66:	9000      	str	r0, [sp, #0]
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d14b      	bne.n	8009d04 <_dtoa_r+0x31c>
 8009c6c:	4b24      	ldr	r3, [pc, #144]	; (8009d00 <_dtoa_r+0x318>)
 8009c6e:	4602      	mov	r2, r0
 8009c70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009c74:	e6d1      	b.n	8009a1a <_dtoa_r+0x32>
 8009c76:	2301      	movs	r3, #1
 8009c78:	e7de      	b.n	8009c38 <_dtoa_r+0x250>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	9308      	str	r3, [sp, #32]
 8009c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c80:	eb0a 0903 	add.w	r9, sl, r3
 8009c84:	f109 0301 	add.w	r3, r9, #1
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	9301      	str	r3, [sp, #4]
 8009c8c:	bfb8      	it	lt
 8009c8e:	2301      	movlt	r3, #1
 8009c90:	e7dd      	b.n	8009c4e <_dtoa_r+0x266>
 8009c92:	2301      	movs	r3, #1
 8009c94:	e7f2      	b.n	8009c7c <_dtoa_r+0x294>
 8009c96:	2501      	movs	r5, #1
 8009c98:	2300      	movs	r3, #0
 8009c9a:	9305      	str	r3, [sp, #20]
 8009c9c:	9508      	str	r5, [sp, #32]
 8009c9e:	f04f 39ff 	mov.w	r9, #4294967295
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ca8:	2312      	movs	r3, #18
 8009caa:	9209      	str	r2, [sp, #36]	; 0x24
 8009cac:	e7cf      	b.n	8009c4e <_dtoa_r+0x266>
 8009cae:	2301      	movs	r3, #1
 8009cb0:	9308      	str	r3, [sp, #32]
 8009cb2:	e7f4      	b.n	8009c9e <_dtoa_r+0x2b6>
 8009cb4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009cb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8009cbc:	464b      	mov	r3, r9
 8009cbe:	e7c6      	b.n	8009c4e <_dtoa_r+0x266>
 8009cc0:	3101      	adds	r1, #1
 8009cc2:	6041      	str	r1, [r0, #4]
 8009cc4:	0052      	lsls	r2, r2, #1
 8009cc6:	e7c6      	b.n	8009c56 <_dtoa_r+0x26e>
 8009cc8:	636f4361 	.word	0x636f4361
 8009ccc:	3fd287a7 	.word	0x3fd287a7
 8009cd0:	8b60c8b3 	.word	0x8b60c8b3
 8009cd4:	3fc68a28 	.word	0x3fc68a28
 8009cd8:	509f79fb 	.word	0x509f79fb
 8009cdc:	3fd34413 	.word	0x3fd34413
 8009ce0:	0800f1ad 	.word	0x0800f1ad
 8009ce4:	0800f1c4 	.word	0x0800f1c4
 8009ce8:	7ff00000 	.word	0x7ff00000
 8009cec:	0800f1a9 	.word	0x0800f1a9
 8009cf0:	0800f1a0 	.word	0x0800f1a0
 8009cf4:	0800f17d 	.word	0x0800f17d
 8009cf8:	3ff80000 	.word	0x3ff80000
 8009cfc:	0800f320 	.word	0x0800f320
 8009d00:	0800f223 	.word	0x0800f223
 8009d04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d06:	9a00      	ldr	r2, [sp, #0]
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	9b01      	ldr	r3, [sp, #4]
 8009d0c:	2b0e      	cmp	r3, #14
 8009d0e:	f200 80ad 	bhi.w	8009e6c <_dtoa_r+0x484>
 8009d12:	2d00      	cmp	r5, #0
 8009d14:	f000 80aa 	beq.w	8009e6c <_dtoa_r+0x484>
 8009d18:	f1ba 0f00 	cmp.w	sl, #0
 8009d1c:	dd36      	ble.n	8009d8c <_dtoa_r+0x3a4>
 8009d1e:	4ac3      	ldr	r2, [pc, #780]	; (800a02c <_dtoa_r+0x644>)
 8009d20:	f00a 030f 	and.w	r3, sl, #15
 8009d24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d28:	ed93 7b00 	vldr	d7, [r3]
 8009d2c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009d30:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009d34:	eeb0 8a47 	vmov.f32	s16, s14
 8009d38:	eef0 8a67 	vmov.f32	s17, s15
 8009d3c:	d016      	beq.n	8009d6c <_dtoa_r+0x384>
 8009d3e:	4bbc      	ldr	r3, [pc, #752]	; (800a030 <_dtoa_r+0x648>)
 8009d40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d48:	f7f6 fde0 	bl	800090c <__aeabi_ddiv>
 8009d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d50:	f007 070f 	and.w	r7, r7, #15
 8009d54:	2503      	movs	r5, #3
 8009d56:	4eb6      	ldr	r6, [pc, #728]	; (800a030 <_dtoa_r+0x648>)
 8009d58:	b957      	cbnz	r7, 8009d70 <_dtoa_r+0x388>
 8009d5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d5e:	ec53 2b18 	vmov	r2, r3, d8
 8009d62:	f7f6 fdd3 	bl	800090c <__aeabi_ddiv>
 8009d66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d6a:	e029      	b.n	8009dc0 <_dtoa_r+0x3d8>
 8009d6c:	2502      	movs	r5, #2
 8009d6e:	e7f2      	b.n	8009d56 <_dtoa_r+0x36e>
 8009d70:	07f9      	lsls	r1, r7, #31
 8009d72:	d508      	bpl.n	8009d86 <_dtoa_r+0x39e>
 8009d74:	ec51 0b18 	vmov	r0, r1, d8
 8009d78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d7c:	f7f6 fc9c 	bl	80006b8 <__aeabi_dmul>
 8009d80:	ec41 0b18 	vmov	d8, r0, r1
 8009d84:	3501      	adds	r5, #1
 8009d86:	107f      	asrs	r7, r7, #1
 8009d88:	3608      	adds	r6, #8
 8009d8a:	e7e5      	b.n	8009d58 <_dtoa_r+0x370>
 8009d8c:	f000 80a6 	beq.w	8009edc <_dtoa_r+0x4f4>
 8009d90:	f1ca 0600 	rsb	r6, sl, #0
 8009d94:	4ba5      	ldr	r3, [pc, #660]	; (800a02c <_dtoa_r+0x644>)
 8009d96:	4fa6      	ldr	r7, [pc, #664]	; (800a030 <_dtoa_r+0x648>)
 8009d98:	f006 020f 	and.w	r2, r6, #15
 8009d9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009da8:	f7f6 fc86 	bl	80006b8 <__aeabi_dmul>
 8009dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009db0:	1136      	asrs	r6, r6, #4
 8009db2:	2300      	movs	r3, #0
 8009db4:	2502      	movs	r5, #2
 8009db6:	2e00      	cmp	r6, #0
 8009db8:	f040 8085 	bne.w	8009ec6 <_dtoa_r+0x4de>
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1d2      	bne.n	8009d66 <_dtoa_r+0x37e>
 8009dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f000 808c 	beq.w	8009ee0 <_dtoa_r+0x4f8>
 8009dc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009dcc:	4b99      	ldr	r3, [pc, #612]	; (800a034 <_dtoa_r+0x64c>)
 8009dce:	2200      	movs	r2, #0
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	f7f6 fee2 	bl	8000b9c <__aeabi_dcmplt>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	f000 8081 	beq.w	8009ee0 <_dtoa_r+0x4f8>
 8009dde:	9b01      	ldr	r3, [sp, #4]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d07d      	beq.n	8009ee0 <_dtoa_r+0x4f8>
 8009de4:	f1b9 0f00 	cmp.w	r9, #0
 8009de8:	dd3c      	ble.n	8009e64 <_dtoa_r+0x47c>
 8009dea:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009dee:	9307      	str	r3, [sp, #28]
 8009df0:	2200      	movs	r2, #0
 8009df2:	4b91      	ldr	r3, [pc, #580]	; (800a038 <_dtoa_r+0x650>)
 8009df4:	4630      	mov	r0, r6
 8009df6:	4639      	mov	r1, r7
 8009df8:	f7f6 fc5e 	bl	80006b8 <__aeabi_dmul>
 8009dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e00:	3501      	adds	r5, #1
 8009e02:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009e06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	f7f6 fbea 	bl	80005e4 <__aeabi_i2d>
 8009e10:	4632      	mov	r2, r6
 8009e12:	463b      	mov	r3, r7
 8009e14:	f7f6 fc50 	bl	80006b8 <__aeabi_dmul>
 8009e18:	4b88      	ldr	r3, [pc, #544]	; (800a03c <_dtoa_r+0x654>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f7f6 fa96 	bl	800034c <__adddf3>
 8009e20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e28:	9303      	str	r3, [sp, #12]
 8009e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d15c      	bne.n	8009eea <_dtoa_r+0x502>
 8009e30:	4b83      	ldr	r3, [pc, #524]	; (800a040 <_dtoa_r+0x658>)
 8009e32:	2200      	movs	r2, #0
 8009e34:	4630      	mov	r0, r6
 8009e36:	4639      	mov	r1, r7
 8009e38:	f7f6 fa86 	bl	8000348 <__aeabi_dsub>
 8009e3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e40:	4606      	mov	r6, r0
 8009e42:	460f      	mov	r7, r1
 8009e44:	f7f6 fec8 	bl	8000bd8 <__aeabi_dcmpgt>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	f040 8296 	bne.w	800a37a <_dtoa_r+0x992>
 8009e4e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009e52:	4630      	mov	r0, r6
 8009e54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e58:	4639      	mov	r1, r7
 8009e5a:	f7f6 fe9f 	bl	8000b9c <__aeabi_dcmplt>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	f040 8288 	bne.w	800a374 <_dtoa_r+0x98c>
 8009e64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f2c0 8158 	blt.w	800a124 <_dtoa_r+0x73c>
 8009e74:	f1ba 0f0e 	cmp.w	sl, #14
 8009e78:	f300 8154 	bgt.w	800a124 <_dtoa_r+0x73c>
 8009e7c:	4b6b      	ldr	r3, [pc, #428]	; (800a02c <_dtoa_r+0x644>)
 8009e7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009e82:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f280 80e3 	bge.w	800a054 <_dtoa_r+0x66c>
 8009e8e:	9b01      	ldr	r3, [sp, #4]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f300 80df 	bgt.w	800a054 <_dtoa_r+0x66c>
 8009e96:	f040 826d 	bne.w	800a374 <_dtoa_r+0x98c>
 8009e9a:	4b69      	ldr	r3, [pc, #420]	; (800a040 <_dtoa_r+0x658>)
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	4649      	mov	r1, r9
 8009ea2:	f7f6 fc09 	bl	80006b8 <__aeabi_dmul>
 8009ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009eaa:	f7f6 fe8b 	bl	8000bc4 <__aeabi_dcmpge>
 8009eae:	9e01      	ldr	r6, [sp, #4]
 8009eb0:	4637      	mov	r7, r6
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	f040 8243 	bne.w	800a33e <_dtoa_r+0x956>
 8009eb8:	9d00      	ldr	r5, [sp, #0]
 8009eba:	2331      	movs	r3, #49	; 0x31
 8009ebc:	f805 3b01 	strb.w	r3, [r5], #1
 8009ec0:	f10a 0a01 	add.w	sl, sl, #1
 8009ec4:	e23f      	b.n	800a346 <_dtoa_r+0x95e>
 8009ec6:	07f2      	lsls	r2, r6, #31
 8009ec8:	d505      	bpl.n	8009ed6 <_dtoa_r+0x4ee>
 8009eca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ece:	f7f6 fbf3 	bl	80006b8 <__aeabi_dmul>
 8009ed2:	3501      	adds	r5, #1
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	1076      	asrs	r6, r6, #1
 8009ed8:	3708      	adds	r7, #8
 8009eda:	e76c      	b.n	8009db6 <_dtoa_r+0x3ce>
 8009edc:	2502      	movs	r5, #2
 8009ede:	e76f      	b.n	8009dc0 <_dtoa_r+0x3d8>
 8009ee0:	9b01      	ldr	r3, [sp, #4]
 8009ee2:	f8cd a01c 	str.w	sl, [sp, #28]
 8009ee6:	930c      	str	r3, [sp, #48]	; 0x30
 8009ee8:	e78d      	b.n	8009e06 <_dtoa_r+0x41e>
 8009eea:	9900      	ldr	r1, [sp, #0]
 8009eec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009eee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ef0:	4b4e      	ldr	r3, [pc, #312]	; (800a02c <_dtoa_r+0x644>)
 8009ef2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ef6:	4401      	add	r1, r0
 8009ef8:	9102      	str	r1, [sp, #8]
 8009efa:	9908      	ldr	r1, [sp, #32]
 8009efc:	eeb0 8a47 	vmov.f32	s16, s14
 8009f00:	eef0 8a67 	vmov.f32	s17, s15
 8009f04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f0c:	2900      	cmp	r1, #0
 8009f0e:	d045      	beq.n	8009f9c <_dtoa_r+0x5b4>
 8009f10:	494c      	ldr	r1, [pc, #304]	; (800a044 <_dtoa_r+0x65c>)
 8009f12:	2000      	movs	r0, #0
 8009f14:	f7f6 fcfa 	bl	800090c <__aeabi_ddiv>
 8009f18:	ec53 2b18 	vmov	r2, r3, d8
 8009f1c:	f7f6 fa14 	bl	8000348 <__aeabi_dsub>
 8009f20:	9d00      	ldr	r5, [sp, #0]
 8009f22:	ec41 0b18 	vmov	d8, r0, r1
 8009f26:	4639      	mov	r1, r7
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f7f6 fe75 	bl	8000c18 <__aeabi_d2iz>
 8009f2e:	900c      	str	r0, [sp, #48]	; 0x30
 8009f30:	f7f6 fb58 	bl	80005e4 <__aeabi_i2d>
 8009f34:	4602      	mov	r2, r0
 8009f36:	460b      	mov	r3, r1
 8009f38:	4630      	mov	r0, r6
 8009f3a:	4639      	mov	r1, r7
 8009f3c:	f7f6 fa04 	bl	8000348 <__aeabi_dsub>
 8009f40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f42:	3330      	adds	r3, #48	; 0x30
 8009f44:	f805 3b01 	strb.w	r3, [r5], #1
 8009f48:	ec53 2b18 	vmov	r2, r3, d8
 8009f4c:	4606      	mov	r6, r0
 8009f4e:	460f      	mov	r7, r1
 8009f50:	f7f6 fe24 	bl	8000b9c <__aeabi_dcmplt>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	d165      	bne.n	800a024 <_dtoa_r+0x63c>
 8009f58:	4632      	mov	r2, r6
 8009f5a:	463b      	mov	r3, r7
 8009f5c:	4935      	ldr	r1, [pc, #212]	; (800a034 <_dtoa_r+0x64c>)
 8009f5e:	2000      	movs	r0, #0
 8009f60:	f7f6 f9f2 	bl	8000348 <__aeabi_dsub>
 8009f64:	ec53 2b18 	vmov	r2, r3, d8
 8009f68:	f7f6 fe18 	bl	8000b9c <__aeabi_dcmplt>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	f040 80b9 	bne.w	800a0e4 <_dtoa_r+0x6fc>
 8009f72:	9b02      	ldr	r3, [sp, #8]
 8009f74:	429d      	cmp	r5, r3
 8009f76:	f43f af75 	beq.w	8009e64 <_dtoa_r+0x47c>
 8009f7a:	4b2f      	ldr	r3, [pc, #188]	; (800a038 <_dtoa_r+0x650>)
 8009f7c:	ec51 0b18 	vmov	r0, r1, d8
 8009f80:	2200      	movs	r2, #0
 8009f82:	f7f6 fb99 	bl	80006b8 <__aeabi_dmul>
 8009f86:	4b2c      	ldr	r3, [pc, #176]	; (800a038 <_dtoa_r+0x650>)
 8009f88:	ec41 0b18 	vmov	d8, r0, r1
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	4630      	mov	r0, r6
 8009f90:	4639      	mov	r1, r7
 8009f92:	f7f6 fb91 	bl	80006b8 <__aeabi_dmul>
 8009f96:	4606      	mov	r6, r0
 8009f98:	460f      	mov	r7, r1
 8009f9a:	e7c4      	b.n	8009f26 <_dtoa_r+0x53e>
 8009f9c:	ec51 0b17 	vmov	r0, r1, d7
 8009fa0:	f7f6 fb8a 	bl	80006b8 <__aeabi_dmul>
 8009fa4:	9b02      	ldr	r3, [sp, #8]
 8009fa6:	9d00      	ldr	r5, [sp, #0]
 8009fa8:	930c      	str	r3, [sp, #48]	; 0x30
 8009faa:	ec41 0b18 	vmov	d8, r0, r1
 8009fae:	4639      	mov	r1, r7
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f7f6 fe31 	bl	8000c18 <__aeabi_d2iz>
 8009fb6:	9011      	str	r0, [sp, #68]	; 0x44
 8009fb8:	f7f6 fb14 	bl	80005e4 <__aeabi_i2d>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	4639      	mov	r1, r7
 8009fc4:	f7f6 f9c0 	bl	8000348 <__aeabi_dsub>
 8009fc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009fca:	3330      	adds	r3, #48	; 0x30
 8009fcc:	f805 3b01 	strb.w	r3, [r5], #1
 8009fd0:	9b02      	ldr	r3, [sp, #8]
 8009fd2:	429d      	cmp	r5, r3
 8009fd4:	4606      	mov	r6, r0
 8009fd6:	460f      	mov	r7, r1
 8009fd8:	f04f 0200 	mov.w	r2, #0
 8009fdc:	d134      	bne.n	800a048 <_dtoa_r+0x660>
 8009fde:	4b19      	ldr	r3, [pc, #100]	; (800a044 <_dtoa_r+0x65c>)
 8009fe0:	ec51 0b18 	vmov	r0, r1, d8
 8009fe4:	f7f6 f9b2 	bl	800034c <__adddf3>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	4630      	mov	r0, r6
 8009fee:	4639      	mov	r1, r7
 8009ff0:	f7f6 fdf2 	bl	8000bd8 <__aeabi_dcmpgt>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d175      	bne.n	800a0e4 <_dtoa_r+0x6fc>
 8009ff8:	ec53 2b18 	vmov	r2, r3, d8
 8009ffc:	4911      	ldr	r1, [pc, #68]	; (800a044 <_dtoa_r+0x65c>)
 8009ffe:	2000      	movs	r0, #0
 800a000:	f7f6 f9a2 	bl	8000348 <__aeabi_dsub>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	4630      	mov	r0, r6
 800a00a:	4639      	mov	r1, r7
 800a00c:	f7f6 fdc6 	bl	8000b9c <__aeabi_dcmplt>
 800a010:	2800      	cmp	r0, #0
 800a012:	f43f af27 	beq.w	8009e64 <_dtoa_r+0x47c>
 800a016:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a018:	1e6b      	subs	r3, r5, #1
 800a01a:	930c      	str	r3, [sp, #48]	; 0x30
 800a01c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a020:	2b30      	cmp	r3, #48	; 0x30
 800a022:	d0f8      	beq.n	800a016 <_dtoa_r+0x62e>
 800a024:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a028:	e04a      	b.n	800a0c0 <_dtoa_r+0x6d8>
 800a02a:	bf00      	nop
 800a02c:	0800f320 	.word	0x0800f320
 800a030:	0800f2f8 	.word	0x0800f2f8
 800a034:	3ff00000 	.word	0x3ff00000
 800a038:	40240000 	.word	0x40240000
 800a03c:	401c0000 	.word	0x401c0000
 800a040:	40140000 	.word	0x40140000
 800a044:	3fe00000 	.word	0x3fe00000
 800a048:	4baf      	ldr	r3, [pc, #700]	; (800a308 <_dtoa_r+0x920>)
 800a04a:	f7f6 fb35 	bl	80006b8 <__aeabi_dmul>
 800a04e:	4606      	mov	r6, r0
 800a050:	460f      	mov	r7, r1
 800a052:	e7ac      	b.n	8009fae <_dtoa_r+0x5c6>
 800a054:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a058:	9d00      	ldr	r5, [sp, #0]
 800a05a:	4642      	mov	r2, r8
 800a05c:	464b      	mov	r3, r9
 800a05e:	4630      	mov	r0, r6
 800a060:	4639      	mov	r1, r7
 800a062:	f7f6 fc53 	bl	800090c <__aeabi_ddiv>
 800a066:	f7f6 fdd7 	bl	8000c18 <__aeabi_d2iz>
 800a06a:	9002      	str	r0, [sp, #8]
 800a06c:	f7f6 faba 	bl	80005e4 <__aeabi_i2d>
 800a070:	4642      	mov	r2, r8
 800a072:	464b      	mov	r3, r9
 800a074:	f7f6 fb20 	bl	80006b8 <__aeabi_dmul>
 800a078:	4602      	mov	r2, r0
 800a07a:	460b      	mov	r3, r1
 800a07c:	4630      	mov	r0, r6
 800a07e:	4639      	mov	r1, r7
 800a080:	f7f6 f962 	bl	8000348 <__aeabi_dsub>
 800a084:	9e02      	ldr	r6, [sp, #8]
 800a086:	9f01      	ldr	r7, [sp, #4]
 800a088:	3630      	adds	r6, #48	; 0x30
 800a08a:	f805 6b01 	strb.w	r6, [r5], #1
 800a08e:	9e00      	ldr	r6, [sp, #0]
 800a090:	1bae      	subs	r6, r5, r6
 800a092:	42b7      	cmp	r7, r6
 800a094:	4602      	mov	r2, r0
 800a096:	460b      	mov	r3, r1
 800a098:	d137      	bne.n	800a10a <_dtoa_r+0x722>
 800a09a:	f7f6 f957 	bl	800034c <__adddf3>
 800a09e:	4642      	mov	r2, r8
 800a0a0:	464b      	mov	r3, r9
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	460f      	mov	r7, r1
 800a0a6:	f7f6 fd97 	bl	8000bd8 <__aeabi_dcmpgt>
 800a0aa:	b9c8      	cbnz	r0, 800a0e0 <_dtoa_r+0x6f8>
 800a0ac:	4642      	mov	r2, r8
 800a0ae:	464b      	mov	r3, r9
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	f7f6 fd68 	bl	8000b88 <__aeabi_dcmpeq>
 800a0b8:	b110      	cbz	r0, 800a0c0 <_dtoa_r+0x6d8>
 800a0ba:	9b02      	ldr	r3, [sp, #8]
 800a0bc:	07d9      	lsls	r1, r3, #31
 800a0be:	d40f      	bmi.n	800a0e0 <_dtoa_r+0x6f8>
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	4659      	mov	r1, fp
 800a0c4:	f000 fbd0 	bl	800a868 <_Bfree>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	702b      	strb	r3, [r5, #0]
 800a0cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0ce:	f10a 0001 	add.w	r0, sl, #1
 800a0d2:	6018      	str	r0, [r3, #0]
 800a0d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f43f acd8 	beq.w	8009a8c <_dtoa_r+0xa4>
 800a0dc:	601d      	str	r5, [r3, #0]
 800a0de:	e4d5      	b.n	8009a8c <_dtoa_r+0xa4>
 800a0e0:	f8cd a01c 	str.w	sl, [sp, #28]
 800a0e4:	462b      	mov	r3, r5
 800a0e6:	461d      	mov	r5, r3
 800a0e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0ec:	2a39      	cmp	r2, #57	; 0x39
 800a0ee:	d108      	bne.n	800a102 <_dtoa_r+0x71a>
 800a0f0:	9a00      	ldr	r2, [sp, #0]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d1f7      	bne.n	800a0e6 <_dtoa_r+0x6fe>
 800a0f6:	9a07      	ldr	r2, [sp, #28]
 800a0f8:	9900      	ldr	r1, [sp, #0]
 800a0fa:	3201      	adds	r2, #1
 800a0fc:	9207      	str	r2, [sp, #28]
 800a0fe:	2230      	movs	r2, #48	; 0x30
 800a100:	700a      	strb	r2, [r1, #0]
 800a102:	781a      	ldrb	r2, [r3, #0]
 800a104:	3201      	adds	r2, #1
 800a106:	701a      	strb	r2, [r3, #0]
 800a108:	e78c      	b.n	800a024 <_dtoa_r+0x63c>
 800a10a:	4b7f      	ldr	r3, [pc, #508]	; (800a308 <_dtoa_r+0x920>)
 800a10c:	2200      	movs	r2, #0
 800a10e:	f7f6 fad3 	bl	80006b8 <__aeabi_dmul>
 800a112:	2200      	movs	r2, #0
 800a114:	2300      	movs	r3, #0
 800a116:	4606      	mov	r6, r0
 800a118:	460f      	mov	r7, r1
 800a11a:	f7f6 fd35 	bl	8000b88 <__aeabi_dcmpeq>
 800a11e:	2800      	cmp	r0, #0
 800a120:	d09b      	beq.n	800a05a <_dtoa_r+0x672>
 800a122:	e7cd      	b.n	800a0c0 <_dtoa_r+0x6d8>
 800a124:	9a08      	ldr	r2, [sp, #32]
 800a126:	2a00      	cmp	r2, #0
 800a128:	f000 80c4 	beq.w	800a2b4 <_dtoa_r+0x8cc>
 800a12c:	9a05      	ldr	r2, [sp, #20]
 800a12e:	2a01      	cmp	r2, #1
 800a130:	f300 80a8 	bgt.w	800a284 <_dtoa_r+0x89c>
 800a134:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a136:	2a00      	cmp	r2, #0
 800a138:	f000 80a0 	beq.w	800a27c <_dtoa_r+0x894>
 800a13c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a140:	9e06      	ldr	r6, [sp, #24]
 800a142:	4645      	mov	r5, r8
 800a144:	9a04      	ldr	r2, [sp, #16]
 800a146:	2101      	movs	r1, #1
 800a148:	441a      	add	r2, r3
 800a14a:	4620      	mov	r0, r4
 800a14c:	4498      	add	r8, r3
 800a14e:	9204      	str	r2, [sp, #16]
 800a150:	f000 fc46 	bl	800a9e0 <__i2b>
 800a154:	4607      	mov	r7, r0
 800a156:	2d00      	cmp	r5, #0
 800a158:	dd0b      	ble.n	800a172 <_dtoa_r+0x78a>
 800a15a:	9b04      	ldr	r3, [sp, #16]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	dd08      	ble.n	800a172 <_dtoa_r+0x78a>
 800a160:	42ab      	cmp	r3, r5
 800a162:	9a04      	ldr	r2, [sp, #16]
 800a164:	bfa8      	it	ge
 800a166:	462b      	movge	r3, r5
 800a168:	eba8 0803 	sub.w	r8, r8, r3
 800a16c:	1aed      	subs	r5, r5, r3
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	9304      	str	r3, [sp, #16]
 800a172:	9b06      	ldr	r3, [sp, #24]
 800a174:	b1fb      	cbz	r3, 800a1b6 <_dtoa_r+0x7ce>
 800a176:	9b08      	ldr	r3, [sp, #32]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	f000 809f 	beq.w	800a2bc <_dtoa_r+0x8d4>
 800a17e:	2e00      	cmp	r6, #0
 800a180:	dd11      	ble.n	800a1a6 <_dtoa_r+0x7be>
 800a182:	4639      	mov	r1, r7
 800a184:	4632      	mov	r2, r6
 800a186:	4620      	mov	r0, r4
 800a188:	f000 fce6 	bl	800ab58 <__pow5mult>
 800a18c:	465a      	mov	r2, fp
 800a18e:	4601      	mov	r1, r0
 800a190:	4607      	mov	r7, r0
 800a192:	4620      	mov	r0, r4
 800a194:	f000 fc3a 	bl	800aa0c <__multiply>
 800a198:	4659      	mov	r1, fp
 800a19a:	9007      	str	r0, [sp, #28]
 800a19c:	4620      	mov	r0, r4
 800a19e:	f000 fb63 	bl	800a868 <_Bfree>
 800a1a2:	9b07      	ldr	r3, [sp, #28]
 800a1a4:	469b      	mov	fp, r3
 800a1a6:	9b06      	ldr	r3, [sp, #24]
 800a1a8:	1b9a      	subs	r2, r3, r6
 800a1aa:	d004      	beq.n	800a1b6 <_dtoa_r+0x7ce>
 800a1ac:	4659      	mov	r1, fp
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f000 fcd2 	bl	800ab58 <__pow5mult>
 800a1b4:	4683      	mov	fp, r0
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f000 fc11 	bl	800a9e0 <__i2b>
 800a1be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	dd7c      	ble.n	800a2c0 <_dtoa_r+0x8d8>
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	4601      	mov	r1, r0
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f000 fcc4 	bl	800ab58 <__pow5mult>
 800a1d0:	9b05      	ldr	r3, [sp, #20]
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	4606      	mov	r6, r0
 800a1d6:	dd76      	ble.n	800a2c6 <_dtoa_r+0x8de>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	9306      	str	r3, [sp, #24]
 800a1dc:	6933      	ldr	r3, [r6, #16]
 800a1de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a1e2:	6918      	ldr	r0, [r3, #16]
 800a1e4:	f000 fbac 	bl	800a940 <__hi0bits>
 800a1e8:	f1c0 0020 	rsb	r0, r0, #32
 800a1ec:	9b04      	ldr	r3, [sp, #16]
 800a1ee:	4418      	add	r0, r3
 800a1f0:	f010 001f 	ands.w	r0, r0, #31
 800a1f4:	f000 8086 	beq.w	800a304 <_dtoa_r+0x91c>
 800a1f8:	f1c0 0320 	rsb	r3, r0, #32
 800a1fc:	2b04      	cmp	r3, #4
 800a1fe:	dd7f      	ble.n	800a300 <_dtoa_r+0x918>
 800a200:	f1c0 001c 	rsb	r0, r0, #28
 800a204:	9b04      	ldr	r3, [sp, #16]
 800a206:	4403      	add	r3, r0
 800a208:	4480      	add	r8, r0
 800a20a:	4405      	add	r5, r0
 800a20c:	9304      	str	r3, [sp, #16]
 800a20e:	f1b8 0f00 	cmp.w	r8, #0
 800a212:	dd05      	ble.n	800a220 <_dtoa_r+0x838>
 800a214:	4659      	mov	r1, fp
 800a216:	4642      	mov	r2, r8
 800a218:	4620      	mov	r0, r4
 800a21a:	f000 fcf7 	bl	800ac0c <__lshift>
 800a21e:	4683      	mov	fp, r0
 800a220:	9b04      	ldr	r3, [sp, #16]
 800a222:	2b00      	cmp	r3, #0
 800a224:	dd05      	ble.n	800a232 <_dtoa_r+0x84a>
 800a226:	4631      	mov	r1, r6
 800a228:	461a      	mov	r2, r3
 800a22a:	4620      	mov	r0, r4
 800a22c:	f000 fcee 	bl	800ac0c <__lshift>
 800a230:	4606      	mov	r6, r0
 800a232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a234:	2b00      	cmp	r3, #0
 800a236:	d069      	beq.n	800a30c <_dtoa_r+0x924>
 800a238:	4631      	mov	r1, r6
 800a23a:	4658      	mov	r0, fp
 800a23c:	f000 fd52 	bl	800ace4 <__mcmp>
 800a240:	2800      	cmp	r0, #0
 800a242:	da63      	bge.n	800a30c <_dtoa_r+0x924>
 800a244:	2300      	movs	r3, #0
 800a246:	4659      	mov	r1, fp
 800a248:	220a      	movs	r2, #10
 800a24a:	4620      	mov	r0, r4
 800a24c:	f000 fb2e 	bl	800a8ac <__multadd>
 800a250:	9b08      	ldr	r3, [sp, #32]
 800a252:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a256:	4683      	mov	fp, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 818f 	beq.w	800a57c <_dtoa_r+0xb94>
 800a25e:	4639      	mov	r1, r7
 800a260:	2300      	movs	r3, #0
 800a262:	220a      	movs	r2, #10
 800a264:	4620      	mov	r0, r4
 800a266:	f000 fb21 	bl	800a8ac <__multadd>
 800a26a:	f1b9 0f00 	cmp.w	r9, #0
 800a26e:	4607      	mov	r7, r0
 800a270:	f300 808e 	bgt.w	800a390 <_dtoa_r+0x9a8>
 800a274:	9b05      	ldr	r3, [sp, #20]
 800a276:	2b02      	cmp	r3, #2
 800a278:	dc50      	bgt.n	800a31c <_dtoa_r+0x934>
 800a27a:	e089      	b.n	800a390 <_dtoa_r+0x9a8>
 800a27c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a27e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a282:	e75d      	b.n	800a140 <_dtoa_r+0x758>
 800a284:	9b01      	ldr	r3, [sp, #4]
 800a286:	1e5e      	subs	r6, r3, #1
 800a288:	9b06      	ldr	r3, [sp, #24]
 800a28a:	42b3      	cmp	r3, r6
 800a28c:	bfbf      	itttt	lt
 800a28e:	9b06      	ldrlt	r3, [sp, #24]
 800a290:	9606      	strlt	r6, [sp, #24]
 800a292:	1af2      	sublt	r2, r6, r3
 800a294:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a296:	bfb6      	itet	lt
 800a298:	189b      	addlt	r3, r3, r2
 800a29a:	1b9e      	subge	r6, r3, r6
 800a29c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a29e:	9b01      	ldr	r3, [sp, #4]
 800a2a0:	bfb8      	it	lt
 800a2a2:	2600      	movlt	r6, #0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	bfb5      	itete	lt
 800a2a8:	eba8 0503 	sublt.w	r5, r8, r3
 800a2ac:	9b01      	ldrge	r3, [sp, #4]
 800a2ae:	2300      	movlt	r3, #0
 800a2b0:	4645      	movge	r5, r8
 800a2b2:	e747      	b.n	800a144 <_dtoa_r+0x75c>
 800a2b4:	9e06      	ldr	r6, [sp, #24]
 800a2b6:	9f08      	ldr	r7, [sp, #32]
 800a2b8:	4645      	mov	r5, r8
 800a2ba:	e74c      	b.n	800a156 <_dtoa_r+0x76e>
 800a2bc:	9a06      	ldr	r2, [sp, #24]
 800a2be:	e775      	b.n	800a1ac <_dtoa_r+0x7c4>
 800a2c0:	9b05      	ldr	r3, [sp, #20]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	dc18      	bgt.n	800a2f8 <_dtoa_r+0x910>
 800a2c6:	9b02      	ldr	r3, [sp, #8]
 800a2c8:	b9b3      	cbnz	r3, 800a2f8 <_dtoa_r+0x910>
 800a2ca:	9b03      	ldr	r3, [sp, #12]
 800a2cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2d0:	b9a3      	cbnz	r3, 800a2fc <_dtoa_r+0x914>
 800a2d2:	9b03      	ldr	r3, [sp, #12]
 800a2d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2d8:	0d1b      	lsrs	r3, r3, #20
 800a2da:	051b      	lsls	r3, r3, #20
 800a2dc:	b12b      	cbz	r3, 800a2ea <_dtoa_r+0x902>
 800a2de:	9b04      	ldr	r3, [sp, #16]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	9304      	str	r3, [sp, #16]
 800a2e4:	f108 0801 	add.w	r8, r8, #1
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	9306      	str	r3, [sp, #24]
 800a2ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	f47f af74 	bne.w	800a1dc <_dtoa_r+0x7f4>
 800a2f4:	2001      	movs	r0, #1
 800a2f6:	e779      	b.n	800a1ec <_dtoa_r+0x804>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	e7f6      	b.n	800a2ea <_dtoa_r+0x902>
 800a2fc:	9b02      	ldr	r3, [sp, #8]
 800a2fe:	e7f4      	b.n	800a2ea <_dtoa_r+0x902>
 800a300:	d085      	beq.n	800a20e <_dtoa_r+0x826>
 800a302:	4618      	mov	r0, r3
 800a304:	301c      	adds	r0, #28
 800a306:	e77d      	b.n	800a204 <_dtoa_r+0x81c>
 800a308:	40240000 	.word	0x40240000
 800a30c:	9b01      	ldr	r3, [sp, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	dc38      	bgt.n	800a384 <_dtoa_r+0x99c>
 800a312:	9b05      	ldr	r3, [sp, #20]
 800a314:	2b02      	cmp	r3, #2
 800a316:	dd35      	ble.n	800a384 <_dtoa_r+0x99c>
 800a318:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a31c:	f1b9 0f00 	cmp.w	r9, #0
 800a320:	d10d      	bne.n	800a33e <_dtoa_r+0x956>
 800a322:	4631      	mov	r1, r6
 800a324:	464b      	mov	r3, r9
 800a326:	2205      	movs	r2, #5
 800a328:	4620      	mov	r0, r4
 800a32a:	f000 fabf 	bl	800a8ac <__multadd>
 800a32e:	4601      	mov	r1, r0
 800a330:	4606      	mov	r6, r0
 800a332:	4658      	mov	r0, fp
 800a334:	f000 fcd6 	bl	800ace4 <__mcmp>
 800a338:	2800      	cmp	r0, #0
 800a33a:	f73f adbd 	bgt.w	8009eb8 <_dtoa_r+0x4d0>
 800a33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a340:	9d00      	ldr	r5, [sp, #0]
 800a342:	ea6f 0a03 	mvn.w	sl, r3
 800a346:	f04f 0800 	mov.w	r8, #0
 800a34a:	4631      	mov	r1, r6
 800a34c:	4620      	mov	r0, r4
 800a34e:	f000 fa8b 	bl	800a868 <_Bfree>
 800a352:	2f00      	cmp	r7, #0
 800a354:	f43f aeb4 	beq.w	800a0c0 <_dtoa_r+0x6d8>
 800a358:	f1b8 0f00 	cmp.w	r8, #0
 800a35c:	d005      	beq.n	800a36a <_dtoa_r+0x982>
 800a35e:	45b8      	cmp	r8, r7
 800a360:	d003      	beq.n	800a36a <_dtoa_r+0x982>
 800a362:	4641      	mov	r1, r8
 800a364:	4620      	mov	r0, r4
 800a366:	f000 fa7f 	bl	800a868 <_Bfree>
 800a36a:	4639      	mov	r1, r7
 800a36c:	4620      	mov	r0, r4
 800a36e:	f000 fa7b 	bl	800a868 <_Bfree>
 800a372:	e6a5      	b.n	800a0c0 <_dtoa_r+0x6d8>
 800a374:	2600      	movs	r6, #0
 800a376:	4637      	mov	r7, r6
 800a378:	e7e1      	b.n	800a33e <_dtoa_r+0x956>
 800a37a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a37c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a380:	4637      	mov	r7, r6
 800a382:	e599      	b.n	8009eb8 <_dtoa_r+0x4d0>
 800a384:	9b08      	ldr	r3, [sp, #32]
 800a386:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f000 80fd 	beq.w	800a58a <_dtoa_r+0xba2>
 800a390:	2d00      	cmp	r5, #0
 800a392:	dd05      	ble.n	800a3a0 <_dtoa_r+0x9b8>
 800a394:	4639      	mov	r1, r7
 800a396:	462a      	mov	r2, r5
 800a398:	4620      	mov	r0, r4
 800a39a:	f000 fc37 	bl	800ac0c <__lshift>
 800a39e:	4607      	mov	r7, r0
 800a3a0:	9b06      	ldr	r3, [sp, #24]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d05c      	beq.n	800a460 <_dtoa_r+0xa78>
 800a3a6:	6879      	ldr	r1, [r7, #4]
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f000 fa1d 	bl	800a7e8 <_Balloc>
 800a3ae:	4605      	mov	r5, r0
 800a3b0:	b928      	cbnz	r0, 800a3be <_dtoa_r+0x9d6>
 800a3b2:	4b80      	ldr	r3, [pc, #512]	; (800a5b4 <_dtoa_r+0xbcc>)
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a3ba:	f7ff bb2e 	b.w	8009a1a <_dtoa_r+0x32>
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	3202      	adds	r2, #2
 800a3c2:	0092      	lsls	r2, r2, #2
 800a3c4:	f107 010c 	add.w	r1, r7, #12
 800a3c8:	300c      	adds	r0, #12
 800a3ca:	f000 f9ff 	bl	800a7cc <memcpy>
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	f000 fc1a 	bl	800ac0c <__lshift>
 800a3d8:	9b00      	ldr	r3, [sp, #0]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	9301      	str	r3, [sp, #4]
 800a3de:	9b00      	ldr	r3, [sp, #0]
 800a3e0:	444b      	add	r3, r9
 800a3e2:	9307      	str	r3, [sp, #28]
 800a3e4:	9b02      	ldr	r3, [sp, #8]
 800a3e6:	f003 0301 	and.w	r3, r3, #1
 800a3ea:	46b8      	mov	r8, r7
 800a3ec:	9306      	str	r3, [sp, #24]
 800a3ee:	4607      	mov	r7, r0
 800a3f0:	9b01      	ldr	r3, [sp, #4]
 800a3f2:	4631      	mov	r1, r6
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	4658      	mov	r0, fp
 800a3f8:	9302      	str	r3, [sp, #8]
 800a3fa:	f7ff fa69 	bl	80098d0 <quorem>
 800a3fe:	4603      	mov	r3, r0
 800a400:	3330      	adds	r3, #48	; 0x30
 800a402:	9004      	str	r0, [sp, #16]
 800a404:	4641      	mov	r1, r8
 800a406:	4658      	mov	r0, fp
 800a408:	9308      	str	r3, [sp, #32]
 800a40a:	f000 fc6b 	bl	800ace4 <__mcmp>
 800a40e:	463a      	mov	r2, r7
 800a410:	4681      	mov	r9, r0
 800a412:	4631      	mov	r1, r6
 800a414:	4620      	mov	r0, r4
 800a416:	f000 fc81 	bl	800ad1c <__mdiff>
 800a41a:	68c2      	ldr	r2, [r0, #12]
 800a41c:	9b08      	ldr	r3, [sp, #32]
 800a41e:	4605      	mov	r5, r0
 800a420:	bb02      	cbnz	r2, 800a464 <_dtoa_r+0xa7c>
 800a422:	4601      	mov	r1, r0
 800a424:	4658      	mov	r0, fp
 800a426:	f000 fc5d 	bl	800ace4 <__mcmp>
 800a42a:	9b08      	ldr	r3, [sp, #32]
 800a42c:	4602      	mov	r2, r0
 800a42e:	4629      	mov	r1, r5
 800a430:	4620      	mov	r0, r4
 800a432:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a436:	f000 fa17 	bl	800a868 <_Bfree>
 800a43a:	9b05      	ldr	r3, [sp, #20]
 800a43c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a43e:	9d01      	ldr	r5, [sp, #4]
 800a440:	ea43 0102 	orr.w	r1, r3, r2
 800a444:	9b06      	ldr	r3, [sp, #24]
 800a446:	430b      	orrs	r3, r1
 800a448:	9b08      	ldr	r3, [sp, #32]
 800a44a:	d10d      	bne.n	800a468 <_dtoa_r+0xa80>
 800a44c:	2b39      	cmp	r3, #57	; 0x39
 800a44e:	d029      	beq.n	800a4a4 <_dtoa_r+0xabc>
 800a450:	f1b9 0f00 	cmp.w	r9, #0
 800a454:	dd01      	ble.n	800a45a <_dtoa_r+0xa72>
 800a456:	9b04      	ldr	r3, [sp, #16]
 800a458:	3331      	adds	r3, #49	; 0x31
 800a45a:	9a02      	ldr	r2, [sp, #8]
 800a45c:	7013      	strb	r3, [r2, #0]
 800a45e:	e774      	b.n	800a34a <_dtoa_r+0x962>
 800a460:	4638      	mov	r0, r7
 800a462:	e7b9      	b.n	800a3d8 <_dtoa_r+0x9f0>
 800a464:	2201      	movs	r2, #1
 800a466:	e7e2      	b.n	800a42e <_dtoa_r+0xa46>
 800a468:	f1b9 0f00 	cmp.w	r9, #0
 800a46c:	db06      	blt.n	800a47c <_dtoa_r+0xa94>
 800a46e:	9905      	ldr	r1, [sp, #20]
 800a470:	ea41 0909 	orr.w	r9, r1, r9
 800a474:	9906      	ldr	r1, [sp, #24]
 800a476:	ea59 0101 	orrs.w	r1, r9, r1
 800a47a:	d120      	bne.n	800a4be <_dtoa_r+0xad6>
 800a47c:	2a00      	cmp	r2, #0
 800a47e:	ddec      	ble.n	800a45a <_dtoa_r+0xa72>
 800a480:	4659      	mov	r1, fp
 800a482:	2201      	movs	r2, #1
 800a484:	4620      	mov	r0, r4
 800a486:	9301      	str	r3, [sp, #4]
 800a488:	f000 fbc0 	bl	800ac0c <__lshift>
 800a48c:	4631      	mov	r1, r6
 800a48e:	4683      	mov	fp, r0
 800a490:	f000 fc28 	bl	800ace4 <__mcmp>
 800a494:	2800      	cmp	r0, #0
 800a496:	9b01      	ldr	r3, [sp, #4]
 800a498:	dc02      	bgt.n	800a4a0 <_dtoa_r+0xab8>
 800a49a:	d1de      	bne.n	800a45a <_dtoa_r+0xa72>
 800a49c:	07da      	lsls	r2, r3, #31
 800a49e:	d5dc      	bpl.n	800a45a <_dtoa_r+0xa72>
 800a4a0:	2b39      	cmp	r3, #57	; 0x39
 800a4a2:	d1d8      	bne.n	800a456 <_dtoa_r+0xa6e>
 800a4a4:	9a02      	ldr	r2, [sp, #8]
 800a4a6:	2339      	movs	r3, #57	; 0x39
 800a4a8:	7013      	strb	r3, [r2, #0]
 800a4aa:	462b      	mov	r3, r5
 800a4ac:	461d      	mov	r5, r3
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4b4:	2a39      	cmp	r2, #57	; 0x39
 800a4b6:	d050      	beq.n	800a55a <_dtoa_r+0xb72>
 800a4b8:	3201      	adds	r2, #1
 800a4ba:	701a      	strb	r2, [r3, #0]
 800a4bc:	e745      	b.n	800a34a <_dtoa_r+0x962>
 800a4be:	2a00      	cmp	r2, #0
 800a4c0:	dd03      	ble.n	800a4ca <_dtoa_r+0xae2>
 800a4c2:	2b39      	cmp	r3, #57	; 0x39
 800a4c4:	d0ee      	beq.n	800a4a4 <_dtoa_r+0xabc>
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	e7c7      	b.n	800a45a <_dtoa_r+0xa72>
 800a4ca:	9a01      	ldr	r2, [sp, #4]
 800a4cc:	9907      	ldr	r1, [sp, #28]
 800a4ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a4d2:	428a      	cmp	r2, r1
 800a4d4:	d02a      	beq.n	800a52c <_dtoa_r+0xb44>
 800a4d6:	4659      	mov	r1, fp
 800a4d8:	2300      	movs	r3, #0
 800a4da:	220a      	movs	r2, #10
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f000 f9e5 	bl	800a8ac <__multadd>
 800a4e2:	45b8      	cmp	r8, r7
 800a4e4:	4683      	mov	fp, r0
 800a4e6:	f04f 0300 	mov.w	r3, #0
 800a4ea:	f04f 020a 	mov.w	r2, #10
 800a4ee:	4641      	mov	r1, r8
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	d107      	bne.n	800a504 <_dtoa_r+0xb1c>
 800a4f4:	f000 f9da 	bl	800a8ac <__multadd>
 800a4f8:	4680      	mov	r8, r0
 800a4fa:	4607      	mov	r7, r0
 800a4fc:	9b01      	ldr	r3, [sp, #4]
 800a4fe:	3301      	adds	r3, #1
 800a500:	9301      	str	r3, [sp, #4]
 800a502:	e775      	b.n	800a3f0 <_dtoa_r+0xa08>
 800a504:	f000 f9d2 	bl	800a8ac <__multadd>
 800a508:	4639      	mov	r1, r7
 800a50a:	4680      	mov	r8, r0
 800a50c:	2300      	movs	r3, #0
 800a50e:	220a      	movs	r2, #10
 800a510:	4620      	mov	r0, r4
 800a512:	f000 f9cb 	bl	800a8ac <__multadd>
 800a516:	4607      	mov	r7, r0
 800a518:	e7f0      	b.n	800a4fc <_dtoa_r+0xb14>
 800a51a:	f1b9 0f00 	cmp.w	r9, #0
 800a51e:	9a00      	ldr	r2, [sp, #0]
 800a520:	bfcc      	ite	gt
 800a522:	464d      	movgt	r5, r9
 800a524:	2501      	movle	r5, #1
 800a526:	4415      	add	r5, r2
 800a528:	f04f 0800 	mov.w	r8, #0
 800a52c:	4659      	mov	r1, fp
 800a52e:	2201      	movs	r2, #1
 800a530:	4620      	mov	r0, r4
 800a532:	9301      	str	r3, [sp, #4]
 800a534:	f000 fb6a 	bl	800ac0c <__lshift>
 800a538:	4631      	mov	r1, r6
 800a53a:	4683      	mov	fp, r0
 800a53c:	f000 fbd2 	bl	800ace4 <__mcmp>
 800a540:	2800      	cmp	r0, #0
 800a542:	dcb2      	bgt.n	800a4aa <_dtoa_r+0xac2>
 800a544:	d102      	bne.n	800a54c <_dtoa_r+0xb64>
 800a546:	9b01      	ldr	r3, [sp, #4]
 800a548:	07db      	lsls	r3, r3, #31
 800a54a:	d4ae      	bmi.n	800a4aa <_dtoa_r+0xac2>
 800a54c:	462b      	mov	r3, r5
 800a54e:	461d      	mov	r5, r3
 800a550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a554:	2a30      	cmp	r2, #48	; 0x30
 800a556:	d0fa      	beq.n	800a54e <_dtoa_r+0xb66>
 800a558:	e6f7      	b.n	800a34a <_dtoa_r+0x962>
 800a55a:	9a00      	ldr	r2, [sp, #0]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d1a5      	bne.n	800a4ac <_dtoa_r+0xac4>
 800a560:	f10a 0a01 	add.w	sl, sl, #1
 800a564:	2331      	movs	r3, #49	; 0x31
 800a566:	e779      	b.n	800a45c <_dtoa_r+0xa74>
 800a568:	4b13      	ldr	r3, [pc, #76]	; (800a5b8 <_dtoa_r+0xbd0>)
 800a56a:	f7ff baaf 	b.w	8009acc <_dtoa_r+0xe4>
 800a56e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a570:	2b00      	cmp	r3, #0
 800a572:	f47f aa86 	bne.w	8009a82 <_dtoa_r+0x9a>
 800a576:	4b11      	ldr	r3, [pc, #68]	; (800a5bc <_dtoa_r+0xbd4>)
 800a578:	f7ff baa8 	b.w	8009acc <_dtoa_r+0xe4>
 800a57c:	f1b9 0f00 	cmp.w	r9, #0
 800a580:	dc03      	bgt.n	800a58a <_dtoa_r+0xba2>
 800a582:	9b05      	ldr	r3, [sp, #20]
 800a584:	2b02      	cmp	r3, #2
 800a586:	f73f aec9 	bgt.w	800a31c <_dtoa_r+0x934>
 800a58a:	9d00      	ldr	r5, [sp, #0]
 800a58c:	4631      	mov	r1, r6
 800a58e:	4658      	mov	r0, fp
 800a590:	f7ff f99e 	bl	80098d0 <quorem>
 800a594:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a598:	f805 3b01 	strb.w	r3, [r5], #1
 800a59c:	9a00      	ldr	r2, [sp, #0]
 800a59e:	1aaa      	subs	r2, r5, r2
 800a5a0:	4591      	cmp	r9, r2
 800a5a2:	ddba      	ble.n	800a51a <_dtoa_r+0xb32>
 800a5a4:	4659      	mov	r1, fp
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	220a      	movs	r2, #10
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f000 f97e 	bl	800a8ac <__multadd>
 800a5b0:	4683      	mov	fp, r0
 800a5b2:	e7eb      	b.n	800a58c <_dtoa_r+0xba4>
 800a5b4:	0800f223 	.word	0x0800f223
 800a5b8:	0800f17c 	.word	0x0800f17c
 800a5bc:	0800f1a0 	.word	0x0800f1a0

0800a5c0 <std>:
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	b510      	push	{r4, lr}
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	e9c0 3300 	strd	r3, r3, [r0]
 800a5ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5ce:	6083      	str	r3, [r0, #8]
 800a5d0:	8181      	strh	r1, [r0, #12]
 800a5d2:	6643      	str	r3, [r0, #100]	; 0x64
 800a5d4:	81c2      	strh	r2, [r0, #14]
 800a5d6:	6183      	str	r3, [r0, #24]
 800a5d8:	4619      	mov	r1, r3
 800a5da:	2208      	movs	r2, #8
 800a5dc:	305c      	adds	r0, #92	; 0x5c
 800a5de:	f7fe fced 	bl	8008fbc <memset>
 800a5e2:	4b05      	ldr	r3, [pc, #20]	; (800a5f8 <std+0x38>)
 800a5e4:	6263      	str	r3, [r4, #36]	; 0x24
 800a5e6:	4b05      	ldr	r3, [pc, #20]	; (800a5fc <std+0x3c>)
 800a5e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5ea:	4b05      	ldr	r3, [pc, #20]	; (800a600 <std+0x40>)
 800a5ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5ee:	4b05      	ldr	r3, [pc, #20]	; (800a604 <std+0x44>)
 800a5f0:	6224      	str	r4, [r4, #32]
 800a5f2:	6323      	str	r3, [r4, #48]	; 0x30
 800a5f4:	bd10      	pop	{r4, pc}
 800a5f6:	bf00      	nop
 800a5f8:	0800b32d 	.word	0x0800b32d
 800a5fc:	0800b34f 	.word	0x0800b34f
 800a600:	0800b387 	.word	0x0800b387
 800a604:	0800b3ab 	.word	0x0800b3ab

0800a608 <_cleanup_r>:
 800a608:	4901      	ldr	r1, [pc, #4]	; (800a610 <_cleanup_r+0x8>)
 800a60a:	f000 b8af 	b.w	800a76c <_fwalk_reent>
 800a60e:	bf00      	nop
 800a610:	0800b6c1 	.word	0x0800b6c1

0800a614 <__sfmoreglue>:
 800a614:	b570      	push	{r4, r5, r6, lr}
 800a616:	1e4a      	subs	r2, r1, #1
 800a618:	2568      	movs	r5, #104	; 0x68
 800a61a:	4355      	muls	r5, r2
 800a61c:	460e      	mov	r6, r1
 800a61e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a622:	f000 fcbf 	bl	800afa4 <_malloc_r>
 800a626:	4604      	mov	r4, r0
 800a628:	b140      	cbz	r0, 800a63c <__sfmoreglue+0x28>
 800a62a:	2100      	movs	r1, #0
 800a62c:	e9c0 1600 	strd	r1, r6, [r0]
 800a630:	300c      	adds	r0, #12
 800a632:	60a0      	str	r0, [r4, #8]
 800a634:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a638:	f7fe fcc0 	bl	8008fbc <memset>
 800a63c:	4620      	mov	r0, r4
 800a63e:	bd70      	pop	{r4, r5, r6, pc}

0800a640 <__sfp_lock_acquire>:
 800a640:	4801      	ldr	r0, [pc, #4]	; (800a648 <__sfp_lock_acquire+0x8>)
 800a642:	f000 b8b8 	b.w	800a7b6 <__retarget_lock_acquire_recursive>
 800a646:	bf00      	nop
 800a648:	20006344 	.word	0x20006344

0800a64c <__sfp_lock_release>:
 800a64c:	4801      	ldr	r0, [pc, #4]	; (800a654 <__sfp_lock_release+0x8>)
 800a64e:	f000 b8b3 	b.w	800a7b8 <__retarget_lock_release_recursive>
 800a652:	bf00      	nop
 800a654:	20006344 	.word	0x20006344

0800a658 <__sinit_lock_acquire>:
 800a658:	4801      	ldr	r0, [pc, #4]	; (800a660 <__sinit_lock_acquire+0x8>)
 800a65a:	f000 b8ac 	b.w	800a7b6 <__retarget_lock_acquire_recursive>
 800a65e:	bf00      	nop
 800a660:	2000633f 	.word	0x2000633f

0800a664 <__sinit_lock_release>:
 800a664:	4801      	ldr	r0, [pc, #4]	; (800a66c <__sinit_lock_release+0x8>)
 800a666:	f000 b8a7 	b.w	800a7b8 <__retarget_lock_release_recursive>
 800a66a:	bf00      	nop
 800a66c:	2000633f 	.word	0x2000633f

0800a670 <__sinit>:
 800a670:	b510      	push	{r4, lr}
 800a672:	4604      	mov	r4, r0
 800a674:	f7ff fff0 	bl	800a658 <__sinit_lock_acquire>
 800a678:	69a3      	ldr	r3, [r4, #24]
 800a67a:	b11b      	cbz	r3, 800a684 <__sinit+0x14>
 800a67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a680:	f7ff bff0 	b.w	800a664 <__sinit_lock_release>
 800a684:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a688:	6523      	str	r3, [r4, #80]	; 0x50
 800a68a:	4b13      	ldr	r3, [pc, #76]	; (800a6d8 <__sinit+0x68>)
 800a68c:	4a13      	ldr	r2, [pc, #76]	; (800a6dc <__sinit+0x6c>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	62a2      	str	r2, [r4, #40]	; 0x28
 800a692:	42a3      	cmp	r3, r4
 800a694:	bf04      	itt	eq
 800a696:	2301      	moveq	r3, #1
 800a698:	61a3      	streq	r3, [r4, #24]
 800a69a:	4620      	mov	r0, r4
 800a69c:	f000 f820 	bl	800a6e0 <__sfp>
 800a6a0:	6060      	str	r0, [r4, #4]
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f000 f81c 	bl	800a6e0 <__sfp>
 800a6a8:	60a0      	str	r0, [r4, #8]
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f000 f818 	bl	800a6e0 <__sfp>
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	60e0      	str	r0, [r4, #12]
 800a6b4:	2104      	movs	r1, #4
 800a6b6:	6860      	ldr	r0, [r4, #4]
 800a6b8:	f7ff ff82 	bl	800a5c0 <std>
 800a6bc:	68a0      	ldr	r0, [r4, #8]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	2109      	movs	r1, #9
 800a6c2:	f7ff ff7d 	bl	800a5c0 <std>
 800a6c6:	68e0      	ldr	r0, [r4, #12]
 800a6c8:	2202      	movs	r2, #2
 800a6ca:	2112      	movs	r1, #18
 800a6cc:	f7ff ff78 	bl	800a5c0 <std>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	61a3      	str	r3, [r4, #24]
 800a6d4:	e7d2      	b.n	800a67c <__sinit+0xc>
 800a6d6:	bf00      	nop
 800a6d8:	0800f168 	.word	0x0800f168
 800a6dc:	0800a609 	.word	0x0800a609

0800a6e0 <__sfp>:
 800a6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e2:	4607      	mov	r7, r0
 800a6e4:	f7ff ffac 	bl	800a640 <__sfp_lock_acquire>
 800a6e8:	4b1e      	ldr	r3, [pc, #120]	; (800a764 <__sfp+0x84>)
 800a6ea:	681e      	ldr	r6, [r3, #0]
 800a6ec:	69b3      	ldr	r3, [r6, #24]
 800a6ee:	b913      	cbnz	r3, 800a6f6 <__sfp+0x16>
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	f7ff ffbd 	bl	800a670 <__sinit>
 800a6f6:	3648      	adds	r6, #72	; 0x48
 800a6f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	d503      	bpl.n	800a708 <__sfp+0x28>
 800a700:	6833      	ldr	r3, [r6, #0]
 800a702:	b30b      	cbz	r3, 800a748 <__sfp+0x68>
 800a704:	6836      	ldr	r6, [r6, #0]
 800a706:	e7f7      	b.n	800a6f8 <__sfp+0x18>
 800a708:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a70c:	b9d5      	cbnz	r5, 800a744 <__sfp+0x64>
 800a70e:	4b16      	ldr	r3, [pc, #88]	; (800a768 <__sfp+0x88>)
 800a710:	60e3      	str	r3, [r4, #12]
 800a712:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a716:	6665      	str	r5, [r4, #100]	; 0x64
 800a718:	f000 f84c 	bl	800a7b4 <__retarget_lock_init_recursive>
 800a71c:	f7ff ff96 	bl	800a64c <__sfp_lock_release>
 800a720:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a724:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a728:	6025      	str	r5, [r4, #0]
 800a72a:	61a5      	str	r5, [r4, #24]
 800a72c:	2208      	movs	r2, #8
 800a72e:	4629      	mov	r1, r5
 800a730:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a734:	f7fe fc42 	bl	8008fbc <memset>
 800a738:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a73c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a740:	4620      	mov	r0, r4
 800a742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a744:	3468      	adds	r4, #104	; 0x68
 800a746:	e7d9      	b.n	800a6fc <__sfp+0x1c>
 800a748:	2104      	movs	r1, #4
 800a74a:	4638      	mov	r0, r7
 800a74c:	f7ff ff62 	bl	800a614 <__sfmoreglue>
 800a750:	4604      	mov	r4, r0
 800a752:	6030      	str	r0, [r6, #0]
 800a754:	2800      	cmp	r0, #0
 800a756:	d1d5      	bne.n	800a704 <__sfp+0x24>
 800a758:	f7ff ff78 	bl	800a64c <__sfp_lock_release>
 800a75c:	230c      	movs	r3, #12
 800a75e:	603b      	str	r3, [r7, #0]
 800a760:	e7ee      	b.n	800a740 <__sfp+0x60>
 800a762:	bf00      	nop
 800a764:	0800f168 	.word	0x0800f168
 800a768:	ffff0001 	.word	0xffff0001

0800a76c <_fwalk_reent>:
 800a76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a770:	4606      	mov	r6, r0
 800a772:	4688      	mov	r8, r1
 800a774:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a778:	2700      	movs	r7, #0
 800a77a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a77e:	f1b9 0901 	subs.w	r9, r9, #1
 800a782:	d505      	bpl.n	800a790 <_fwalk_reent+0x24>
 800a784:	6824      	ldr	r4, [r4, #0]
 800a786:	2c00      	cmp	r4, #0
 800a788:	d1f7      	bne.n	800a77a <_fwalk_reent+0xe>
 800a78a:	4638      	mov	r0, r7
 800a78c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a790:	89ab      	ldrh	r3, [r5, #12]
 800a792:	2b01      	cmp	r3, #1
 800a794:	d907      	bls.n	800a7a6 <_fwalk_reent+0x3a>
 800a796:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a79a:	3301      	adds	r3, #1
 800a79c:	d003      	beq.n	800a7a6 <_fwalk_reent+0x3a>
 800a79e:	4629      	mov	r1, r5
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	47c0      	blx	r8
 800a7a4:	4307      	orrs	r7, r0
 800a7a6:	3568      	adds	r5, #104	; 0x68
 800a7a8:	e7e9      	b.n	800a77e <_fwalk_reent+0x12>
	...

0800a7ac <_localeconv_r>:
 800a7ac:	4800      	ldr	r0, [pc, #0]	; (800a7b0 <_localeconv_r+0x4>)
 800a7ae:	4770      	bx	lr
 800a7b0:	20000564 	.word	0x20000564

0800a7b4 <__retarget_lock_init_recursive>:
 800a7b4:	4770      	bx	lr

0800a7b6 <__retarget_lock_acquire_recursive>:
 800a7b6:	4770      	bx	lr

0800a7b8 <__retarget_lock_release_recursive>:
 800a7b8:	4770      	bx	lr
	...

0800a7bc <malloc>:
 800a7bc:	4b02      	ldr	r3, [pc, #8]	; (800a7c8 <malloc+0xc>)
 800a7be:	4601      	mov	r1, r0
 800a7c0:	6818      	ldr	r0, [r3, #0]
 800a7c2:	f000 bbef 	b.w	800afa4 <_malloc_r>
 800a7c6:	bf00      	nop
 800a7c8:	20000410 	.word	0x20000410

0800a7cc <memcpy>:
 800a7cc:	440a      	add	r2, r1
 800a7ce:	4291      	cmp	r1, r2
 800a7d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7d4:	d100      	bne.n	800a7d8 <memcpy+0xc>
 800a7d6:	4770      	bx	lr
 800a7d8:	b510      	push	{r4, lr}
 800a7da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7e2:	4291      	cmp	r1, r2
 800a7e4:	d1f9      	bne.n	800a7da <memcpy+0xe>
 800a7e6:	bd10      	pop	{r4, pc}

0800a7e8 <_Balloc>:
 800a7e8:	b570      	push	{r4, r5, r6, lr}
 800a7ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	460d      	mov	r5, r1
 800a7f0:	b976      	cbnz	r6, 800a810 <_Balloc+0x28>
 800a7f2:	2010      	movs	r0, #16
 800a7f4:	f7ff ffe2 	bl	800a7bc <malloc>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	6260      	str	r0, [r4, #36]	; 0x24
 800a7fc:	b920      	cbnz	r0, 800a808 <_Balloc+0x20>
 800a7fe:	4b18      	ldr	r3, [pc, #96]	; (800a860 <_Balloc+0x78>)
 800a800:	4818      	ldr	r0, [pc, #96]	; (800a864 <_Balloc+0x7c>)
 800a802:	2166      	movs	r1, #102	; 0x66
 800a804:	f000 fea8 	bl	800b558 <__assert_func>
 800a808:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a80c:	6006      	str	r6, [r0, #0]
 800a80e:	60c6      	str	r6, [r0, #12]
 800a810:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a812:	68f3      	ldr	r3, [r6, #12]
 800a814:	b183      	cbz	r3, 800a838 <_Balloc+0x50>
 800a816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a81e:	b9b8      	cbnz	r0, 800a850 <_Balloc+0x68>
 800a820:	2101      	movs	r1, #1
 800a822:	fa01 f605 	lsl.w	r6, r1, r5
 800a826:	1d72      	adds	r2, r6, #5
 800a828:	0092      	lsls	r2, r2, #2
 800a82a:	4620      	mov	r0, r4
 800a82c:	f000 fb5a 	bl	800aee4 <_calloc_r>
 800a830:	b160      	cbz	r0, 800a84c <_Balloc+0x64>
 800a832:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a836:	e00e      	b.n	800a856 <_Balloc+0x6e>
 800a838:	2221      	movs	r2, #33	; 0x21
 800a83a:	2104      	movs	r1, #4
 800a83c:	4620      	mov	r0, r4
 800a83e:	f000 fb51 	bl	800aee4 <_calloc_r>
 800a842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a844:	60f0      	str	r0, [r6, #12]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1e4      	bne.n	800a816 <_Balloc+0x2e>
 800a84c:	2000      	movs	r0, #0
 800a84e:	bd70      	pop	{r4, r5, r6, pc}
 800a850:	6802      	ldr	r2, [r0, #0]
 800a852:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a856:	2300      	movs	r3, #0
 800a858:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a85c:	e7f7      	b.n	800a84e <_Balloc+0x66>
 800a85e:	bf00      	nop
 800a860:	0800f1ad 	.word	0x0800f1ad
 800a864:	0800f294 	.word	0x0800f294

0800a868 <_Bfree>:
 800a868:	b570      	push	{r4, r5, r6, lr}
 800a86a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a86c:	4605      	mov	r5, r0
 800a86e:	460c      	mov	r4, r1
 800a870:	b976      	cbnz	r6, 800a890 <_Bfree+0x28>
 800a872:	2010      	movs	r0, #16
 800a874:	f7ff ffa2 	bl	800a7bc <malloc>
 800a878:	4602      	mov	r2, r0
 800a87a:	6268      	str	r0, [r5, #36]	; 0x24
 800a87c:	b920      	cbnz	r0, 800a888 <_Bfree+0x20>
 800a87e:	4b09      	ldr	r3, [pc, #36]	; (800a8a4 <_Bfree+0x3c>)
 800a880:	4809      	ldr	r0, [pc, #36]	; (800a8a8 <_Bfree+0x40>)
 800a882:	218a      	movs	r1, #138	; 0x8a
 800a884:	f000 fe68 	bl	800b558 <__assert_func>
 800a888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a88c:	6006      	str	r6, [r0, #0]
 800a88e:	60c6      	str	r6, [r0, #12]
 800a890:	b13c      	cbz	r4, 800a8a2 <_Bfree+0x3a>
 800a892:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a894:	6862      	ldr	r2, [r4, #4]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a89c:	6021      	str	r1, [r4, #0]
 800a89e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8a2:	bd70      	pop	{r4, r5, r6, pc}
 800a8a4:	0800f1ad 	.word	0x0800f1ad
 800a8a8:	0800f294 	.word	0x0800f294

0800a8ac <__multadd>:
 800a8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b0:	690e      	ldr	r6, [r1, #16]
 800a8b2:	4607      	mov	r7, r0
 800a8b4:	4698      	mov	r8, r3
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	f101 0014 	add.w	r0, r1, #20
 800a8bc:	2300      	movs	r3, #0
 800a8be:	6805      	ldr	r5, [r0, #0]
 800a8c0:	b2a9      	uxth	r1, r5
 800a8c2:	fb02 8101 	mla	r1, r2, r1, r8
 800a8c6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a8ca:	0c2d      	lsrs	r5, r5, #16
 800a8cc:	fb02 c505 	mla	r5, r2, r5, ip
 800a8d0:	b289      	uxth	r1, r1
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a8d8:	429e      	cmp	r6, r3
 800a8da:	f840 1b04 	str.w	r1, [r0], #4
 800a8de:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a8e2:	dcec      	bgt.n	800a8be <__multadd+0x12>
 800a8e4:	f1b8 0f00 	cmp.w	r8, #0
 800a8e8:	d022      	beq.n	800a930 <__multadd+0x84>
 800a8ea:	68a3      	ldr	r3, [r4, #8]
 800a8ec:	42b3      	cmp	r3, r6
 800a8ee:	dc19      	bgt.n	800a924 <__multadd+0x78>
 800a8f0:	6861      	ldr	r1, [r4, #4]
 800a8f2:	4638      	mov	r0, r7
 800a8f4:	3101      	adds	r1, #1
 800a8f6:	f7ff ff77 	bl	800a7e8 <_Balloc>
 800a8fa:	4605      	mov	r5, r0
 800a8fc:	b928      	cbnz	r0, 800a90a <__multadd+0x5e>
 800a8fe:	4602      	mov	r2, r0
 800a900:	4b0d      	ldr	r3, [pc, #52]	; (800a938 <__multadd+0x8c>)
 800a902:	480e      	ldr	r0, [pc, #56]	; (800a93c <__multadd+0x90>)
 800a904:	21b5      	movs	r1, #181	; 0xb5
 800a906:	f000 fe27 	bl	800b558 <__assert_func>
 800a90a:	6922      	ldr	r2, [r4, #16]
 800a90c:	3202      	adds	r2, #2
 800a90e:	f104 010c 	add.w	r1, r4, #12
 800a912:	0092      	lsls	r2, r2, #2
 800a914:	300c      	adds	r0, #12
 800a916:	f7ff ff59 	bl	800a7cc <memcpy>
 800a91a:	4621      	mov	r1, r4
 800a91c:	4638      	mov	r0, r7
 800a91e:	f7ff ffa3 	bl	800a868 <_Bfree>
 800a922:	462c      	mov	r4, r5
 800a924:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a928:	3601      	adds	r6, #1
 800a92a:	f8c3 8014 	str.w	r8, [r3, #20]
 800a92e:	6126      	str	r6, [r4, #16]
 800a930:	4620      	mov	r0, r4
 800a932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a936:	bf00      	nop
 800a938:	0800f223 	.word	0x0800f223
 800a93c:	0800f294 	.word	0x0800f294

0800a940 <__hi0bits>:
 800a940:	0c03      	lsrs	r3, r0, #16
 800a942:	041b      	lsls	r3, r3, #16
 800a944:	b9d3      	cbnz	r3, 800a97c <__hi0bits+0x3c>
 800a946:	0400      	lsls	r0, r0, #16
 800a948:	2310      	movs	r3, #16
 800a94a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a94e:	bf04      	itt	eq
 800a950:	0200      	lsleq	r0, r0, #8
 800a952:	3308      	addeq	r3, #8
 800a954:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a958:	bf04      	itt	eq
 800a95a:	0100      	lsleq	r0, r0, #4
 800a95c:	3304      	addeq	r3, #4
 800a95e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a962:	bf04      	itt	eq
 800a964:	0080      	lsleq	r0, r0, #2
 800a966:	3302      	addeq	r3, #2
 800a968:	2800      	cmp	r0, #0
 800a96a:	db05      	blt.n	800a978 <__hi0bits+0x38>
 800a96c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a970:	f103 0301 	add.w	r3, r3, #1
 800a974:	bf08      	it	eq
 800a976:	2320      	moveq	r3, #32
 800a978:	4618      	mov	r0, r3
 800a97a:	4770      	bx	lr
 800a97c:	2300      	movs	r3, #0
 800a97e:	e7e4      	b.n	800a94a <__hi0bits+0xa>

0800a980 <__lo0bits>:
 800a980:	6803      	ldr	r3, [r0, #0]
 800a982:	f013 0207 	ands.w	r2, r3, #7
 800a986:	4601      	mov	r1, r0
 800a988:	d00b      	beq.n	800a9a2 <__lo0bits+0x22>
 800a98a:	07da      	lsls	r2, r3, #31
 800a98c:	d424      	bmi.n	800a9d8 <__lo0bits+0x58>
 800a98e:	0798      	lsls	r0, r3, #30
 800a990:	bf49      	itett	mi
 800a992:	085b      	lsrmi	r3, r3, #1
 800a994:	089b      	lsrpl	r3, r3, #2
 800a996:	2001      	movmi	r0, #1
 800a998:	600b      	strmi	r3, [r1, #0]
 800a99a:	bf5c      	itt	pl
 800a99c:	600b      	strpl	r3, [r1, #0]
 800a99e:	2002      	movpl	r0, #2
 800a9a0:	4770      	bx	lr
 800a9a2:	b298      	uxth	r0, r3
 800a9a4:	b9b0      	cbnz	r0, 800a9d4 <__lo0bits+0x54>
 800a9a6:	0c1b      	lsrs	r3, r3, #16
 800a9a8:	2010      	movs	r0, #16
 800a9aa:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a9ae:	bf04      	itt	eq
 800a9b0:	0a1b      	lsreq	r3, r3, #8
 800a9b2:	3008      	addeq	r0, #8
 800a9b4:	071a      	lsls	r2, r3, #28
 800a9b6:	bf04      	itt	eq
 800a9b8:	091b      	lsreq	r3, r3, #4
 800a9ba:	3004      	addeq	r0, #4
 800a9bc:	079a      	lsls	r2, r3, #30
 800a9be:	bf04      	itt	eq
 800a9c0:	089b      	lsreq	r3, r3, #2
 800a9c2:	3002      	addeq	r0, #2
 800a9c4:	07da      	lsls	r2, r3, #31
 800a9c6:	d403      	bmi.n	800a9d0 <__lo0bits+0x50>
 800a9c8:	085b      	lsrs	r3, r3, #1
 800a9ca:	f100 0001 	add.w	r0, r0, #1
 800a9ce:	d005      	beq.n	800a9dc <__lo0bits+0x5c>
 800a9d0:	600b      	str	r3, [r1, #0]
 800a9d2:	4770      	bx	lr
 800a9d4:	4610      	mov	r0, r2
 800a9d6:	e7e8      	b.n	800a9aa <__lo0bits+0x2a>
 800a9d8:	2000      	movs	r0, #0
 800a9da:	4770      	bx	lr
 800a9dc:	2020      	movs	r0, #32
 800a9de:	4770      	bx	lr

0800a9e0 <__i2b>:
 800a9e0:	b510      	push	{r4, lr}
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	2101      	movs	r1, #1
 800a9e6:	f7ff feff 	bl	800a7e8 <_Balloc>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	b928      	cbnz	r0, 800a9fa <__i2b+0x1a>
 800a9ee:	4b05      	ldr	r3, [pc, #20]	; (800aa04 <__i2b+0x24>)
 800a9f0:	4805      	ldr	r0, [pc, #20]	; (800aa08 <__i2b+0x28>)
 800a9f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a9f6:	f000 fdaf 	bl	800b558 <__assert_func>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	6144      	str	r4, [r0, #20]
 800a9fe:	6103      	str	r3, [r0, #16]
 800aa00:	bd10      	pop	{r4, pc}
 800aa02:	bf00      	nop
 800aa04:	0800f223 	.word	0x0800f223
 800aa08:	0800f294 	.word	0x0800f294

0800aa0c <__multiply>:
 800aa0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa10:	4614      	mov	r4, r2
 800aa12:	690a      	ldr	r2, [r1, #16]
 800aa14:	6923      	ldr	r3, [r4, #16]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	bfb8      	it	lt
 800aa1a:	460b      	movlt	r3, r1
 800aa1c:	460d      	mov	r5, r1
 800aa1e:	bfbc      	itt	lt
 800aa20:	4625      	movlt	r5, r4
 800aa22:	461c      	movlt	r4, r3
 800aa24:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800aa28:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800aa2c:	68ab      	ldr	r3, [r5, #8]
 800aa2e:	6869      	ldr	r1, [r5, #4]
 800aa30:	eb0a 0709 	add.w	r7, sl, r9
 800aa34:	42bb      	cmp	r3, r7
 800aa36:	b085      	sub	sp, #20
 800aa38:	bfb8      	it	lt
 800aa3a:	3101      	addlt	r1, #1
 800aa3c:	f7ff fed4 	bl	800a7e8 <_Balloc>
 800aa40:	b930      	cbnz	r0, 800aa50 <__multiply+0x44>
 800aa42:	4602      	mov	r2, r0
 800aa44:	4b42      	ldr	r3, [pc, #264]	; (800ab50 <__multiply+0x144>)
 800aa46:	4843      	ldr	r0, [pc, #268]	; (800ab54 <__multiply+0x148>)
 800aa48:	f240 115d 	movw	r1, #349	; 0x15d
 800aa4c:	f000 fd84 	bl	800b558 <__assert_func>
 800aa50:	f100 0614 	add.w	r6, r0, #20
 800aa54:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800aa58:	4633      	mov	r3, r6
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	4543      	cmp	r3, r8
 800aa5e:	d31e      	bcc.n	800aa9e <__multiply+0x92>
 800aa60:	f105 0c14 	add.w	ip, r5, #20
 800aa64:	f104 0314 	add.w	r3, r4, #20
 800aa68:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800aa6c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800aa70:	9202      	str	r2, [sp, #8]
 800aa72:	ebac 0205 	sub.w	r2, ip, r5
 800aa76:	3a15      	subs	r2, #21
 800aa78:	f022 0203 	bic.w	r2, r2, #3
 800aa7c:	3204      	adds	r2, #4
 800aa7e:	f105 0115 	add.w	r1, r5, #21
 800aa82:	458c      	cmp	ip, r1
 800aa84:	bf38      	it	cc
 800aa86:	2204      	movcc	r2, #4
 800aa88:	9201      	str	r2, [sp, #4]
 800aa8a:	9a02      	ldr	r2, [sp, #8]
 800aa8c:	9303      	str	r3, [sp, #12]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d808      	bhi.n	800aaa4 <__multiply+0x98>
 800aa92:	2f00      	cmp	r7, #0
 800aa94:	dc55      	bgt.n	800ab42 <__multiply+0x136>
 800aa96:	6107      	str	r7, [r0, #16]
 800aa98:	b005      	add	sp, #20
 800aa9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa9e:	f843 2b04 	str.w	r2, [r3], #4
 800aaa2:	e7db      	b.n	800aa5c <__multiply+0x50>
 800aaa4:	f8b3 a000 	ldrh.w	sl, [r3]
 800aaa8:	f1ba 0f00 	cmp.w	sl, #0
 800aaac:	d020      	beq.n	800aaf0 <__multiply+0xe4>
 800aaae:	f105 0e14 	add.w	lr, r5, #20
 800aab2:	46b1      	mov	r9, r6
 800aab4:	2200      	movs	r2, #0
 800aab6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800aaba:	f8d9 b000 	ldr.w	fp, [r9]
 800aabe:	b2a1      	uxth	r1, r4
 800aac0:	fa1f fb8b 	uxth.w	fp, fp
 800aac4:	fb0a b101 	mla	r1, sl, r1, fp
 800aac8:	4411      	add	r1, r2
 800aaca:	f8d9 2000 	ldr.w	r2, [r9]
 800aace:	0c24      	lsrs	r4, r4, #16
 800aad0:	0c12      	lsrs	r2, r2, #16
 800aad2:	fb0a 2404 	mla	r4, sl, r4, r2
 800aad6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800aada:	b289      	uxth	r1, r1
 800aadc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aae0:	45f4      	cmp	ip, lr
 800aae2:	f849 1b04 	str.w	r1, [r9], #4
 800aae6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aaea:	d8e4      	bhi.n	800aab6 <__multiply+0xaa>
 800aaec:	9901      	ldr	r1, [sp, #4]
 800aaee:	5072      	str	r2, [r6, r1]
 800aaf0:	9a03      	ldr	r2, [sp, #12]
 800aaf2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	f1b9 0f00 	cmp.w	r9, #0
 800aafc:	d01f      	beq.n	800ab3e <__multiply+0x132>
 800aafe:	6834      	ldr	r4, [r6, #0]
 800ab00:	f105 0114 	add.w	r1, r5, #20
 800ab04:	46b6      	mov	lr, r6
 800ab06:	f04f 0a00 	mov.w	sl, #0
 800ab0a:	880a      	ldrh	r2, [r1, #0]
 800ab0c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ab10:	fb09 b202 	mla	r2, r9, r2, fp
 800ab14:	4492      	add	sl, r2
 800ab16:	b2a4      	uxth	r4, r4
 800ab18:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ab1c:	f84e 4b04 	str.w	r4, [lr], #4
 800ab20:	f851 4b04 	ldr.w	r4, [r1], #4
 800ab24:	f8be 2000 	ldrh.w	r2, [lr]
 800ab28:	0c24      	lsrs	r4, r4, #16
 800ab2a:	fb09 2404 	mla	r4, r9, r4, r2
 800ab2e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ab32:	458c      	cmp	ip, r1
 800ab34:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ab38:	d8e7      	bhi.n	800ab0a <__multiply+0xfe>
 800ab3a:	9a01      	ldr	r2, [sp, #4]
 800ab3c:	50b4      	str	r4, [r6, r2]
 800ab3e:	3604      	adds	r6, #4
 800ab40:	e7a3      	b.n	800aa8a <__multiply+0x7e>
 800ab42:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1a5      	bne.n	800aa96 <__multiply+0x8a>
 800ab4a:	3f01      	subs	r7, #1
 800ab4c:	e7a1      	b.n	800aa92 <__multiply+0x86>
 800ab4e:	bf00      	nop
 800ab50:	0800f223 	.word	0x0800f223
 800ab54:	0800f294 	.word	0x0800f294

0800ab58 <__pow5mult>:
 800ab58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab5c:	4615      	mov	r5, r2
 800ab5e:	f012 0203 	ands.w	r2, r2, #3
 800ab62:	4606      	mov	r6, r0
 800ab64:	460f      	mov	r7, r1
 800ab66:	d007      	beq.n	800ab78 <__pow5mult+0x20>
 800ab68:	4c25      	ldr	r4, [pc, #148]	; (800ac00 <__pow5mult+0xa8>)
 800ab6a:	3a01      	subs	r2, #1
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab72:	f7ff fe9b 	bl	800a8ac <__multadd>
 800ab76:	4607      	mov	r7, r0
 800ab78:	10ad      	asrs	r5, r5, #2
 800ab7a:	d03d      	beq.n	800abf8 <__pow5mult+0xa0>
 800ab7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab7e:	b97c      	cbnz	r4, 800aba0 <__pow5mult+0x48>
 800ab80:	2010      	movs	r0, #16
 800ab82:	f7ff fe1b 	bl	800a7bc <malloc>
 800ab86:	4602      	mov	r2, r0
 800ab88:	6270      	str	r0, [r6, #36]	; 0x24
 800ab8a:	b928      	cbnz	r0, 800ab98 <__pow5mult+0x40>
 800ab8c:	4b1d      	ldr	r3, [pc, #116]	; (800ac04 <__pow5mult+0xac>)
 800ab8e:	481e      	ldr	r0, [pc, #120]	; (800ac08 <__pow5mult+0xb0>)
 800ab90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ab94:	f000 fce0 	bl	800b558 <__assert_func>
 800ab98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab9c:	6004      	str	r4, [r0, #0]
 800ab9e:	60c4      	str	r4, [r0, #12]
 800aba0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aba4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aba8:	b94c      	cbnz	r4, 800abbe <__pow5mult+0x66>
 800abaa:	f240 2171 	movw	r1, #625	; 0x271
 800abae:	4630      	mov	r0, r6
 800abb0:	f7ff ff16 	bl	800a9e0 <__i2b>
 800abb4:	2300      	movs	r3, #0
 800abb6:	f8c8 0008 	str.w	r0, [r8, #8]
 800abba:	4604      	mov	r4, r0
 800abbc:	6003      	str	r3, [r0, #0]
 800abbe:	f04f 0900 	mov.w	r9, #0
 800abc2:	07eb      	lsls	r3, r5, #31
 800abc4:	d50a      	bpl.n	800abdc <__pow5mult+0x84>
 800abc6:	4639      	mov	r1, r7
 800abc8:	4622      	mov	r2, r4
 800abca:	4630      	mov	r0, r6
 800abcc:	f7ff ff1e 	bl	800aa0c <__multiply>
 800abd0:	4639      	mov	r1, r7
 800abd2:	4680      	mov	r8, r0
 800abd4:	4630      	mov	r0, r6
 800abd6:	f7ff fe47 	bl	800a868 <_Bfree>
 800abda:	4647      	mov	r7, r8
 800abdc:	106d      	asrs	r5, r5, #1
 800abde:	d00b      	beq.n	800abf8 <__pow5mult+0xa0>
 800abe0:	6820      	ldr	r0, [r4, #0]
 800abe2:	b938      	cbnz	r0, 800abf4 <__pow5mult+0x9c>
 800abe4:	4622      	mov	r2, r4
 800abe6:	4621      	mov	r1, r4
 800abe8:	4630      	mov	r0, r6
 800abea:	f7ff ff0f 	bl	800aa0c <__multiply>
 800abee:	6020      	str	r0, [r4, #0]
 800abf0:	f8c0 9000 	str.w	r9, [r0]
 800abf4:	4604      	mov	r4, r0
 800abf6:	e7e4      	b.n	800abc2 <__pow5mult+0x6a>
 800abf8:	4638      	mov	r0, r7
 800abfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abfe:	bf00      	nop
 800ac00:	0800f3e8 	.word	0x0800f3e8
 800ac04:	0800f1ad 	.word	0x0800f1ad
 800ac08:	0800f294 	.word	0x0800f294

0800ac0c <__lshift>:
 800ac0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac10:	460c      	mov	r4, r1
 800ac12:	6849      	ldr	r1, [r1, #4]
 800ac14:	6923      	ldr	r3, [r4, #16]
 800ac16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac1a:	68a3      	ldr	r3, [r4, #8]
 800ac1c:	4607      	mov	r7, r0
 800ac1e:	4691      	mov	r9, r2
 800ac20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac24:	f108 0601 	add.w	r6, r8, #1
 800ac28:	42b3      	cmp	r3, r6
 800ac2a:	db0b      	blt.n	800ac44 <__lshift+0x38>
 800ac2c:	4638      	mov	r0, r7
 800ac2e:	f7ff fddb 	bl	800a7e8 <_Balloc>
 800ac32:	4605      	mov	r5, r0
 800ac34:	b948      	cbnz	r0, 800ac4a <__lshift+0x3e>
 800ac36:	4602      	mov	r2, r0
 800ac38:	4b28      	ldr	r3, [pc, #160]	; (800acdc <__lshift+0xd0>)
 800ac3a:	4829      	ldr	r0, [pc, #164]	; (800ace0 <__lshift+0xd4>)
 800ac3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ac40:	f000 fc8a 	bl	800b558 <__assert_func>
 800ac44:	3101      	adds	r1, #1
 800ac46:	005b      	lsls	r3, r3, #1
 800ac48:	e7ee      	b.n	800ac28 <__lshift+0x1c>
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	f100 0114 	add.w	r1, r0, #20
 800ac50:	f100 0210 	add.w	r2, r0, #16
 800ac54:	4618      	mov	r0, r3
 800ac56:	4553      	cmp	r3, sl
 800ac58:	db33      	blt.n	800acc2 <__lshift+0xb6>
 800ac5a:	6920      	ldr	r0, [r4, #16]
 800ac5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac60:	f104 0314 	add.w	r3, r4, #20
 800ac64:	f019 091f 	ands.w	r9, r9, #31
 800ac68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac70:	d02b      	beq.n	800acca <__lshift+0xbe>
 800ac72:	f1c9 0e20 	rsb	lr, r9, #32
 800ac76:	468a      	mov	sl, r1
 800ac78:	2200      	movs	r2, #0
 800ac7a:	6818      	ldr	r0, [r3, #0]
 800ac7c:	fa00 f009 	lsl.w	r0, r0, r9
 800ac80:	4302      	orrs	r2, r0
 800ac82:	f84a 2b04 	str.w	r2, [sl], #4
 800ac86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac8a:	459c      	cmp	ip, r3
 800ac8c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac90:	d8f3      	bhi.n	800ac7a <__lshift+0x6e>
 800ac92:	ebac 0304 	sub.w	r3, ip, r4
 800ac96:	3b15      	subs	r3, #21
 800ac98:	f023 0303 	bic.w	r3, r3, #3
 800ac9c:	3304      	adds	r3, #4
 800ac9e:	f104 0015 	add.w	r0, r4, #21
 800aca2:	4584      	cmp	ip, r0
 800aca4:	bf38      	it	cc
 800aca6:	2304      	movcc	r3, #4
 800aca8:	50ca      	str	r2, [r1, r3]
 800acaa:	b10a      	cbz	r2, 800acb0 <__lshift+0xa4>
 800acac:	f108 0602 	add.w	r6, r8, #2
 800acb0:	3e01      	subs	r6, #1
 800acb2:	4638      	mov	r0, r7
 800acb4:	612e      	str	r6, [r5, #16]
 800acb6:	4621      	mov	r1, r4
 800acb8:	f7ff fdd6 	bl	800a868 <_Bfree>
 800acbc:	4628      	mov	r0, r5
 800acbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc2:	f842 0f04 	str.w	r0, [r2, #4]!
 800acc6:	3301      	adds	r3, #1
 800acc8:	e7c5      	b.n	800ac56 <__lshift+0x4a>
 800acca:	3904      	subs	r1, #4
 800accc:	f853 2b04 	ldr.w	r2, [r3], #4
 800acd0:	f841 2f04 	str.w	r2, [r1, #4]!
 800acd4:	459c      	cmp	ip, r3
 800acd6:	d8f9      	bhi.n	800accc <__lshift+0xc0>
 800acd8:	e7ea      	b.n	800acb0 <__lshift+0xa4>
 800acda:	bf00      	nop
 800acdc:	0800f223 	.word	0x0800f223
 800ace0:	0800f294 	.word	0x0800f294

0800ace4 <__mcmp>:
 800ace4:	b530      	push	{r4, r5, lr}
 800ace6:	6902      	ldr	r2, [r0, #16]
 800ace8:	690c      	ldr	r4, [r1, #16]
 800acea:	1b12      	subs	r2, r2, r4
 800acec:	d10e      	bne.n	800ad0c <__mcmp+0x28>
 800acee:	f100 0314 	add.w	r3, r0, #20
 800acf2:	3114      	adds	r1, #20
 800acf4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800acf8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800acfc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad04:	42a5      	cmp	r5, r4
 800ad06:	d003      	beq.n	800ad10 <__mcmp+0x2c>
 800ad08:	d305      	bcc.n	800ad16 <__mcmp+0x32>
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	4610      	mov	r0, r2
 800ad0e:	bd30      	pop	{r4, r5, pc}
 800ad10:	4283      	cmp	r3, r0
 800ad12:	d3f3      	bcc.n	800acfc <__mcmp+0x18>
 800ad14:	e7fa      	b.n	800ad0c <__mcmp+0x28>
 800ad16:	f04f 32ff 	mov.w	r2, #4294967295
 800ad1a:	e7f7      	b.n	800ad0c <__mcmp+0x28>

0800ad1c <__mdiff>:
 800ad1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad20:	460c      	mov	r4, r1
 800ad22:	4606      	mov	r6, r0
 800ad24:	4611      	mov	r1, r2
 800ad26:	4620      	mov	r0, r4
 800ad28:	4617      	mov	r7, r2
 800ad2a:	f7ff ffdb 	bl	800ace4 <__mcmp>
 800ad2e:	1e05      	subs	r5, r0, #0
 800ad30:	d110      	bne.n	800ad54 <__mdiff+0x38>
 800ad32:	4629      	mov	r1, r5
 800ad34:	4630      	mov	r0, r6
 800ad36:	f7ff fd57 	bl	800a7e8 <_Balloc>
 800ad3a:	b930      	cbnz	r0, 800ad4a <__mdiff+0x2e>
 800ad3c:	4b39      	ldr	r3, [pc, #228]	; (800ae24 <__mdiff+0x108>)
 800ad3e:	4602      	mov	r2, r0
 800ad40:	f240 2132 	movw	r1, #562	; 0x232
 800ad44:	4838      	ldr	r0, [pc, #224]	; (800ae28 <__mdiff+0x10c>)
 800ad46:	f000 fc07 	bl	800b558 <__assert_func>
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad54:	bfa4      	itt	ge
 800ad56:	463b      	movge	r3, r7
 800ad58:	4627      	movge	r7, r4
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	6879      	ldr	r1, [r7, #4]
 800ad5e:	bfa6      	itte	ge
 800ad60:	461c      	movge	r4, r3
 800ad62:	2500      	movge	r5, #0
 800ad64:	2501      	movlt	r5, #1
 800ad66:	f7ff fd3f 	bl	800a7e8 <_Balloc>
 800ad6a:	b920      	cbnz	r0, 800ad76 <__mdiff+0x5a>
 800ad6c:	4b2d      	ldr	r3, [pc, #180]	; (800ae24 <__mdiff+0x108>)
 800ad6e:	4602      	mov	r2, r0
 800ad70:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ad74:	e7e6      	b.n	800ad44 <__mdiff+0x28>
 800ad76:	693e      	ldr	r6, [r7, #16]
 800ad78:	60c5      	str	r5, [r0, #12]
 800ad7a:	6925      	ldr	r5, [r4, #16]
 800ad7c:	f107 0114 	add.w	r1, r7, #20
 800ad80:	f104 0914 	add.w	r9, r4, #20
 800ad84:	f100 0e14 	add.w	lr, r0, #20
 800ad88:	f107 0210 	add.w	r2, r7, #16
 800ad8c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ad90:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ad94:	46f2      	mov	sl, lr
 800ad96:	2700      	movs	r7, #0
 800ad98:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ada0:	fa1f f883 	uxth.w	r8, r3
 800ada4:	fa17 f78b 	uxtah	r7, r7, fp
 800ada8:	0c1b      	lsrs	r3, r3, #16
 800adaa:	eba7 0808 	sub.w	r8, r7, r8
 800adae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800adb2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800adb6:	fa1f f888 	uxth.w	r8, r8
 800adba:	141f      	asrs	r7, r3, #16
 800adbc:	454d      	cmp	r5, r9
 800adbe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800adc2:	f84a 3b04 	str.w	r3, [sl], #4
 800adc6:	d8e7      	bhi.n	800ad98 <__mdiff+0x7c>
 800adc8:	1b2b      	subs	r3, r5, r4
 800adca:	3b15      	subs	r3, #21
 800adcc:	f023 0303 	bic.w	r3, r3, #3
 800add0:	3304      	adds	r3, #4
 800add2:	3415      	adds	r4, #21
 800add4:	42a5      	cmp	r5, r4
 800add6:	bf38      	it	cc
 800add8:	2304      	movcc	r3, #4
 800adda:	4419      	add	r1, r3
 800addc:	4473      	add	r3, lr
 800adde:	469e      	mov	lr, r3
 800ade0:	460d      	mov	r5, r1
 800ade2:	4565      	cmp	r5, ip
 800ade4:	d30e      	bcc.n	800ae04 <__mdiff+0xe8>
 800ade6:	f10c 0203 	add.w	r2, ip, #3
 800adea:	1a52      	subs	r2, r2, r1
 800adec:	f022 0203 	bic.w	r2, r2, #3
 800adf0:	3903      	subs	r1, #3
 800adf2:	458c      	cmp	ip, r1
 800adf4:	bf38      	it	cc
 800adf6:	2200      	movcc	r2, #0
 800adf8:	441a      	add	r2, r3
 800adfa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800adfe:	b17b      	cbz	r3, 800ae20 <__mdiff+0x104>
 800ae00:	6106      	str	r6, [r0, #16]
 800ae02:	e7a5      	b.n	800ad50 <__mdiff+0x34>
 800ae04:	f855 8b04 	ldr.w	r8, [r5], #4
 800ae08:	fa17 f488 	uxtah	r4, r7, r8
 800ae0c:	1422      	asrs	r2, r4, #16
 800ae0e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ae12:	b2a4      	uxth	r4, r4
 800ae14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ae18:	f84e 4b04 	str.w	r4, [lr], #4
 800ae1c:	1417      	asrs	r7, r2, #16
 800ae1e:	e7e0      	b.n	800ade2 <__mdiff+0xc6>
 800ae20:	3e01      	subs	r6, #1
 800ae22:	e7ea      	b.n	800adfa <__mdiff+0xde>
 800ae24:	0800f223 	.word	0x0800f223
 800ae28:	0800f294 	.word	0x0800f294

0800ae2c <__d2b>:
 800ae2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae30:	4689      	mov	r9, r1
 800ae32:	2101      	movs	r1, #1
 800ae34:	ec57 6b10 	vmov	r6, r7, d0
 800ae38:	4690      	mov	r8, r2
 800ae3a:	f7ff fcd5 	bl	800a7e8 <_Balloc>
 800ae3e:	4604      	mov	r4, r0
 800ae40:	b930      	cbnz	r0, 800ae50 <__d2b+0x24>
 800ae42:	4602      	mov	r2, r0
 800ae44:	4b25      	ldr	r3, [pc, #148]	; (800aedc <__d2b+0xb0>)
 800ae46:	4826      	ldr	r0, [pc, #152]	; (800aee0 <__d2b+0xb4>)
 800ae48:	f240 310a 	movw	r1, #778	; 0x30a
 800ae4c:	f000 fb84 	bl	800b558 <__assert_func>
 800ae50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ae54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae58:	bb35      	cbnz	r5, 800aea8 <__d2b+0x7c>
 800ae5a:	2e00      	cmp	r6, #0
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	d028      	beq.n	800aeb2 <__d2b+0x86>
 800ae60:	4668      	mov	r0, sp
 800ae62:	9600      	str	r6, [sp, #0]
 800ae64:	f7ff fd8c 	bl	800a980 <__lo0bits>
 800ae68:	9900      	ldr	r1, [sp, #0]
 800ae6a:	b300      	cbz	r0, 800aeae <__d2b+0x82>
 800ae6c:	9a01      	ldr	r2, [sp, #4]
 800ae6e:	f1c0 0320 	rsb	r3, r0, #32
 800ae72:	fa02 f303 	lsl.w	r3, r2, r3
 800ae76:	430b      	orrs	r3, r1
 800ae78:	40c2      	lsrs	r2, r0
 800ae7a:	6163      	str	r3, [r4, #20]
 800ae7c:	9201      	str	r2, [sp, #4]
 800ae7e:	9b01      	ldr	r3, [sp, #4]
 800ae80:	61a3      	str	r3, [r4, #24]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	bf14      	ite	ne
 800ae86:	2202      	movne	r2, #2
 800ae88:	2201      	moveq	r2, #1
 800ae8a:	6122      	str	r2, [r4, #16]
 800ae8c:	b1d5      	cbz	r5, 800aec4 <__d2b+0x98>
 800ae8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae92:	4405      	add	r5, r0
 800ae94:	f8c9 5000 	str.w	r5, [r9]
 800ae98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae9c:	f8c8 0000 	str.w	r0, [r8]
 800aea0:	4620      	mov	r0, r4
 800aea2:	b003      	add	sp, #12
 800aea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aea8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aeac:	e7d5      	b.n	800ae5a <__d2b+0x2e>
 800aeae:	6161      	str	r1, [r4, #20]
 800aeb0:	e7e5      	b.n	800ae7e <__d2b+0x52>
 800aeb2:	a801      	add	r0, sp, #4
 800aeb4:	f7ff fd64 	bl	800a980 <__lo0bits>
 800aeb8:	9b01      	ldr	r3, [sp, #4]
 800aeba:	6163      	str	r3, [r4, #20]
 800aebc:	2201      	movs	r2, #1
 800aebe:	6122      	str	r2, [r4, #16]
 800aec0:	3020      	adds	r0, #32
 800aec2:	e7e3      	b.n	800ae8c <__d2b+0x60>
 800aec4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aec8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aecc:	f8c9 0000 	str.w	r0, [r9]
 800aed0:	6918      	ldr	r0, [r3, #16]
 800aed2:	f7ff fd35 	bl	800a940 <__hi0bits>
 800aed6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aeda:	e7df      	b.n	800ae9c <__d2b+0x70>
 800aedc:	0800f223 	.word	0x0800f223
 800aee0:	0800f294 	.word	0x0800f294

0800aee4 <_calloc_r>:
 800aee4:	b513      	push	{r0, r1, r4, lr}
 800aee6:	434a      	muls	r2, r1
 800aee8:	4611      	mov	r1, r2
 800aeea:	9201      	str	r2, [sp, #4]
 800aeec:	f000 f85a 	bl	800afa4 <_malloc_r>
 800aef0:	4604      	mov	r4, r0
 800aef2:	b118      	cbz	r0, 800aefc <_calloc_r+0x18>
 800aef4:	9a01      	ldr	r2, [sp, #4]
 800aef6:	2100      	movs	r1, #0
 800aef8:	f7fe f860 	bl	8008fbc <memset>
 800aefc:	4620      	mov	r0, r4
 800aefe:	b002      	add	sp, #8
 800af00:	bd10      	pop	{r4, pc}
	...

0800af04 <_free_r>:
 800af04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af06:	2900      	cmp	r1, #0
 800af08:	d048      	beq.n	800af9c <_free_r+0x98>
 800af0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af0e:	9001      	str	r0, [sp, #4]
 800af10:	2b00      	cmp	r3, #0
 800af12:	f1a1 0404 	sub.w	r4, r1, #4
 800af16:	bfb8      	it	lt
 800af18:	18e4      	addlt	r4, r4, r3
 800af1a:	f000 fca7 	bl	800b86c <__malloc_lock>
 800af1e:	4a20      	ldr	r2, [pc, #128]	; (800afa0 <_free_r+0x9c>)
 800af20:	9801      	ldr	r0, [sp, #4]
 800af22:	6813      	ldr	r3, [r2, #0]
 800af24:	4615      	mov	r5, r2
 800af26:	b933      	cbnz	r3, 800af36 <_free_r+0x32>
 800af28:	6063      	str	r3, [r4, #4]
 800af2a:	6014      	str	r4, [r2, #0]
 800af2c:	b003      	add	sp, #12
 800af2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af32:	f000 bca1 	b.w	800b878 <__malloc_unlock>
 800af36:	42a3      	cmp	r3, r4
 800af38:	d90b      	bls.n	800af52 <_free_r+0x4e>
 800af3a:	6821      	ldr	r1, [r4, #0]
 800af3c:	1862      	adds	r2, r4, r1
 800af3e:	4293      	cmp	r3, r2
 800af40:	bf04      	itt	eq
 800af42:	681a      	ldreq	r2, [r3, #0]
 800af44:	685b      	ldreq	r3, [r3, #4]
 800af46:	6063      	str	r3, [r4, #4]
 800af48:	bf04      	itt	eq
 800af4a:	1852      	addeq	r2, r2, r1
 800af4c:	6022      	streq	r2, [r4, #0]
 800af4e:	602c      	str	r4, [r5, #0]
 800af50:	e7ec      	b.n	800af2c <_free_r+0x28>
 800af52:	461a      	mov	r2, r3
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	b10b      	cbz	r3, 800af5c <_free_r+0x58>
 800af58:	42a3      	cmp	r3, r4
 800af5a:	d9fa      	bls.n	800af52 <_free_r+0x4e>
 800af5c:	6811      	ldr	r1, [r2, #0]
 800af5e:	1855      	adds	r5, r2, r1
 800af60:	42a5      	cmp	r5, r4
 800af62:	d10b      	bne.n	800af7c <_free_r+0x78>
 800af64:	6824      	ldr	r4, [r4, #0]
 800af66:	4421      	add	r1, r4
 800af68:	1854      	adds	r4, r2, r1
 800af6a:	42a3      	cmp	r3, r4
 800af6c:	6011      	str	r1, [r2, #0]
 800af6e:	d1dd      	bne.n	800af2c <_free_r+0x28>
 800af70:	681c      	ldr	r4, [r3, #0]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	6053      	str	r3, [r2, #4]
 800af76:	4421      	add	r1, r4
 800af78:	6011      	str	r1, [r2, #0]
 800af7a:	e7d7      	b.n	800af2c <_free_r+0x28>
 800af7c:	d902      	bls.n	800af84 <_free_r+0x80>
 800af7e:	230c      	movs	r3, #12
 800af80:	6003      	str	r3, [r0, #0]
 800af82:	e7d3      	b.n	800af2c <_free_r+0x28>
 800af84:	6825      	ldr	r5, [r4, #0]
 800af86:	1961      	adds	r1, r4, r5
 800af88:	428b      	cmp	r3, r1
 800af8a:	bf04      	itt	eq
 800af8c:	6819      	ldreq	r1, [r3, #0]
 800af8e:	685b      	ldreq	r3, [r3, #4]
 800af90:	6063      	str	r3, [r4, #4]
 800af92:	bf04      	itt	eq
 800af94:	1949      	addeq	r1, r1, r5
 800af96:	6021      	streq	r1, [r4, #0]
 800af98:	6054      	str	r4, [r2, #4]
 800af9a:	e7c7      	b.n	800af2c <_free_r+0x28>
 800af9c:	b003      	add	sp, #12
 800af9e:	bd30      	pop	{r4, r5, pc}
 800afa0:	20000614 	.word	0x20000614

0800afa4 <_malloc_r>:
 800afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa6:	1ccd      	adds	r5, r1, #3
 800afa8:	f025 0503 	bic.w	r5, r5, #3
 800afac:	3508      	adds	r5, #8
 800afae:	2d0c      	cmp	r5, #12
 800afb0:	bf38      	it	cc
 800afb2:	250c      	movcc	r5, #12
 800afb4:	2d00      	cmp	r5, #0
 800afb6:	4606      	mov	r6, r0
 800afb8:	db01      	blt.n	800afbe <_malloc_r+0x1a>
 800afba:	42a9      	cmp	r1, r5
 800afbc:	d903      	bls.n	800afc6 <_malloc_r+0x22>
 800afbe:	230c      	movs	r3, #12
 800afc0:	6033      	str	r3, [r6, #0]
 800afc2:	2000      	movs	r0, #0
 800afc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc6:	f000 fc51 	bl	800b86c <__malloc_lock>
 800afca:	4921      	ldr	r1, [pc, #132]	; (800b050 <_malloc_r+0xac>)
 800afcc:	680a      	ldr	r2, [r1, #0]
 800afce:	4614      	mov	r4, r2
 800afd0:	b99c      	cbnz	r4, 800affa <_malloc_r+0x56>
 800afd2:	4f20      	ldr	r7, [pc, #128]	; (800b054 <_malloc_r+0xb0>)
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	b923      	cbnz	r3, 800afe2 <_malloc_r+0x3e>
 800afd8:	4621      	mov	r1, r4
 800afda:	4630      	mov	r0, r6
 800afdc:	f000 f996 	bl	800b30c <_sbrk_r>
 800afe0:	6038      	str	r0, [r7, #0]
 800afe2:	4629      	mov	r1, r5
 800afe4:	4630      	mov	r0, r6
 800afe6:	f000 f991 	bl	800b30c <_sbrk_r>
 800afea:	1c43      	adds	r3, r0, #1
 800afec:	d123      	bne.n	800b036 <_malloc_r+0x92>
 800afee:	230c      	movs	r3, #12
 800aff0:	6033      	str	r3, [r6, #0]
 800aff2:	4630      	mov	r0, r6
 800aff4:	f000 fc40 	bl	800b878 <__malloc_unlock>
 800aff8:	e7e3      	b.n	800afc2 <_malloc_r+0x1e>
 800affa:	6823      	ldr	r3, [r4, #0]
 800affc:	1b5b      	subs	r3, r3, r5
 800affe:	d417      	bmi.n	800b030 <_malloc_r+0x8c>
 800b000:	2b0b      	cmp	r3, #11
 800b002:	d903      	bls.n	800b00c <_malloc_r+0x68>
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	441c      	add	r4, r3
 800b008:	6025      	str	r5, [r4, #0]
 800b00a:	e004      	b.n	800b016 <_malloc_r+0x72>
 800b00c:	6863      	ldr	r3, [r4, #4]
 800b00e:	42a2      	cmp	r2, r4
 800b010:	bf0c      	ite	eq
 800b012:	600b      	streq	r3, [r1, #0]
 800b014:	6053      	strne	r3, [r2, #4]
 800b016:	4630      	mov	r0, r6
 800b018:	f000 fc2e 	bl	800b878 <__malloc_unlock>
 800b01c:	f104 000b 	add.w	r0, r4, #11
 800b020:	1d23      	adds	r3, r4, #4
 800b022:	f020 0007 	bic.w	r0, r0, #7
 800b026:	1ac2      	subs	r2, r0, r3
 800b028:	d0cc      	beq.n	800afc4 <_malloc_r+0x20>
 800b02a:	1a1b      	subs	r3, r3, r0
 800b02c:	50a3      	str	r3, [r4, r2]
 800b02e:	e7c9      	b.n	800afc4 <_malloc_r+0x20>
 800b030:	4622      	mov	r2, r4
 800b032:	6864      	ldr	r4, [r4, #4]
 800b034:	e7cc      	b.n	800afd0 <_malloc_r+0x2c>
 800b036:	1cc4      	adds	r4, r0, #3
 800b038:	f024 0403 	bic.w	r4, r4, #3
 800b03c:	42a0      	cmp	r0, r4
 800b03e:	d0e3      	beq.n	800b008 <_malloc_r+0x64>
 800b040:	1a21      	subs	r1, r4, r0
 800b042:	4630      	mov	r0, r6
 800b044:	f000 f962 	bl	800b30c <_sbrk_r>
 800b048:	3001      	adds	r0, #1
 800b04a:	d1dd      	bne.n	800b008 <_malloc_r+0x64>
 800b04c:	e7cf      	b.n	800afee <_malloc_r+0x4a>
 800b04e:	bf00      	nop
 800b050:	20000614 	.word	0x20000614
 800b054:	20000618 	.word	0x20000618

0800b058 <__sfputc_r>:
 800b058:	6893      	ldr	r3, [r2, #8]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	b410      	push	{r4}
 800b060:	6093      	str	r3, [r2, #8]
 800b062:	da08      	bge.n	800b076 <__sfputc_r+0x1e>
 800b064:	6994      	ldr	r4, [r2, #24]
 800b066:	42a3      	cmp	r3, r4
 800b068:	db01      	blt.n	800b06e <__sfputc_r+0x16>
 800b06a:	290a      	cmp	r1, #10
 800b06c:	d103      	bne.n	800b076 <__sfputc_r+0x1e>
 800b06e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b072:	f000 b99f 	b.w	800b3b4 <__swbuf_r>
 800b076:	6813      	ldr	r3, [r2, #0]
 800b078:	1c58      	adds	r0, r3, #1
 800b07a:	6010      	str	r0, [r2, #0]
 800b07c:	7019      	strb	r1, [r3, #0]
 800b07e:	4608      	mov	r0, r1
 800b080:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b084:	4770      	bx	lr

0800b086 <__sfputs_r>:
 800b086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b088:	4606      	mov	r6, r0
 800b08a:	460f      	mov	r7, r1
 800b08c:	4614      	mov	r4, r2
 800b08e:	18d5      	adds	r5, r2, r3
 800b090:	42ac      	cmp	r4, r5
 800b092:	d101      	bne.n	800b098 <__sfputs_r+0x12>
 800b094:	2000      	movs	r0, #0
 800b096:	e007      	b.n	800b0a8 <__sfputs_r+0x22>
 800b098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b09c:	463a      	mov	r2, r7
 800b09e:	4630      	mov	r0, r6
 800b0a0:	f7ff ffda 	bl	800b058 <__sfputc_r>
 800b0a4:	1c43      	adds	r3, r0, #1
 800b0a6:	d1f3      	bne.n	800b090 <__sfputs_r+0xa>
 800b0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0ac <_vfiprintf_r>:
 800b0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b0:	460d      	mov	r5, r1
 800b0b2:	b09d      	sub	sp, #116	; 0x74
 800b0b4:	4614      	mov	r4, r2
 800b0b6:	4698      	mov	r8, r3
 800b0b8:	4606      	mov	r6, r0
 800b0ba:	b118      	cbz	r0, 800b0c4 <_vfiprintf_r+0x18>
 800b0bc:	6983      	ldr	r3, [r0, #24]
 800b0be:	b90b      	cbnz	r3, 800b0c4 <_vfiprintf_r+0x18>
 800b0c0:	f7ff fad6 	bl	800a670 <__sinit>
 800b0c4:	4b89      	ldr	r3, [pc, #548]	; (800b2ec <_vfiprintf_r+0x240>)
 800b0c6:	429d      	cmp	r5, r3
 800b0c8:	d11b      	bne.n	800b102 <_vfiprintf_r+0x56>
 800b0ca:	6875      	ldr	r5, [r6, #4]
 800b0cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0ce:	07d9      	lsls	r1, r3, #31
 800b0d0:	d405      	bmi.n	800b0de <_vfiprintf_r+0x32>
 800b0d2:	89ab      	ldrh	r3, [r5, #12]
 800b0d4:	059a      	lsls	r2, r3, #22
 800b0d6:	d402      	bmi.n	800b0de <_vfiprintf_r+0x32>
 800b0d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0da:	f7ff fb6c 	bl	800a7b6 <__retarget_lock_acquire_recursive>
 800b0de:	89ab      	ldrh	r3, [r5, #12]
 800b0e0:	071b      	lsls	r3, r3, #28
 800b0e2:	d501      	bpl.n	800b0e8 <_vfiprintf_r+0x3c>
 800b0e4:	692b      	ldr	r3, [r5, #16]
 800b0e6:	b9eb      	cbnz	r3, 800b124 <_vfiprintf_r+0x78>
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	f000 f9c6 	bl	800b47c <__swsetup_r>
 800b0f0:	b1c0      	cbz	r0, 800b124 <_vfiprintf_r+0x78>
 800b0f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0f4:	07dc      	lsls	r4, r3, #31
 800b0f6:	d50e      	bpl.n	800b116 <_vfiprintf_r+0x6a>
 800b0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0fc:	b01d      	add	sp, #116	; 0x74
 800b0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b102:	4b7b      	ldr	r3, [pc, #492]	; (800b2f0 <_vfiprintf_r+0x244>)
 800b104:	429d      	cmp	r5, r3
 800b106:	d101      	bne.n	800b10c <_vfiprintf_r+0x60>
 800b108:	68b5      	ldr	r5, [r6, #8]
 800b10a:	e7df      	b.n	800b0cc <_vfiprintf_r+0x20>
 800b10c:	4b79      	ldr	r3, [pc, #484]	; (800b2f4 <_vfiprintf_r+0x248>)
 800b10e:	429d      	cmp	r5, r3
 800b110:	bf08      	it	eq
 800b112:	68f5      	ldreq	r5, [r6, #12]
 800b114:	e7da      	b.n	800b0cc <_vfiprintf_r+0x20>
 800b116:	89ab      	ldrh	r3, [r5, #12]
 800b118:	0598      	lsls	r0, r3, #22
 800b11a:	d4ed      	bmi.n	800b0f8 <_vfiprintf_r+0x4c>
 800b11c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b11e:	f7ff fb4b 	bl	800a7b8 <__retarget_lock_release_recursive>
 800b122:	e7e9      	b.n	800b0f8 <_vfiprintf_r+0x4c>
 800b124:	2300      	movs	r3, #0
 800b126:	9309      	str	r3, [sp, #36]	; 0x24
 800b128:	2320      	movs	r3, #32
 800b12a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b12e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b132:	2330      	movs	r3, #48	; 0x30
 800b134:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b2f8 <_vfiprintf_r+0x24c>
 800b138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b13c:	f04f 0901 	mov.w	r9, #1
 800b140:	4623      	mov	r3, r4
 800b142:	469a      	mov	sl, r3
 800b144:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b148:	b10a      	cbz	r2, 800b14e <_vfiprintf_r+0xa2>
 800b14a:	2a25      	cmp	r2, #37	; 0x25
 800b14c:	d1f9      	bne.n	800b142 <_vfiprintf_r+0x96>
 800b14e:	ebba 0b04 	subs.w	fp, sl, r4
 800b152:	d00b      	beq.n	800b16c <_vfiprintf_r+0xc0>
 800b154:	465b      	mov	r3, fp
 800b156:	4622      	mov	r2, r4
 800b158:	4629      	mov	r1, r5
 800b15a:	4630      	mov	r0, r6
 800b15c:	f7ff ff93 	bl	800b086 <__sfputs_r>
 800b160:	3001      	adds	r0, #1
 800b162:	f000 80aa 	beq.w	800b2ba <_vfiprintf_r+0x20e>
 800b166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b168:	445a      	add	r2, fp
 800b16a:	9209      	str	r2, [sp, #36]	; 0x24
 800b16c:	f89a 3000 	ldrb.w	r3, [sl]
 800b170:	2b00      	cmp	r3, #0
 800b172:	f000 80a2 	beq.w	800b2ba <_vfiprintf_r+0x20e>
 800b176:	2300      	movs	r3, #0
 800b178:	f04f 32ff 	mov.w	r2, #4294967295
 800b17c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b180:	f10a 0a01 	add.w	sl, sl, #1
 800b184:	9304      	str	r3, [sp, #16]
 800b186:	9307      	str	r3, [sp, #28]
 800b188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b18c:	931a      	str	r3, [sp, #104]	; 0x68
 800b18e:	4654      	mov	r4, sl
 800b190:	2205      	movs	r2, #5
 800b192:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b196:	4858      	ldr	r0, [pc, #352]	; (800b2f8 <_vfiprintf_r+0x24c>)
 800b198:	f7f5 f882 	bl	80002a0 <memchr>
 800b19c:	9a04      	ldr	r2, [sp, #16]
 800b19e:	b9d8      	cbnz	r0, 800b1d8 <_vfiprintf_r+0x12c>
 800b1a0:	06d1      	lsls	r1, r2, #27
 800b1a2:	bf44      	itt	mi
 800b1a4:	2320      	movmi	r3, #32
 800b1a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1aa:	0713      	lsls	r3, r2, #28
 800b1ac:	bf44      	itt	mi
 800b1ae:	232b      	movmi	r3, #43	; 0x2b
 800b1b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b1b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b1ba:	d015      	beq.n	800b1e8 <_vfiprintf_r+0x13c>
 800b1bc:	9a07      	ldr	r2, [sp, #28]
 800b1be:	4654      	mov	r4, sl
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	f04f 0c0a 	mov.w	ip, #10
 800b1c6:	4621      	mov	r1, r4
 800b1c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1cc:	3b30      	subs	r3, #48	; 0x30
 800b1ce:	2b09      	cmp	r3, #9
 800b1d0:	d94e      	bls.n	800b270 <_vfiprintf_r+0x1c4>
 800b1d2:	b1b0      	cbz	r0, 800b202 <_vfiprintf_r+0x156>
 800b1d4:	9207      	str	r2, [sp, #28]
 800b1d6:	e014      	b.n	800b202 <_vfiprintf_r+0x156>
 800b1d8:	eba0 0308 	sub.w	r3, r0, r8
 800b1dc:	fa09 f303 	lsl.w	r3, r9, r3
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	9304      	str	r3, [sp, #16]
 800b1e4:	46a2      	mov	sl, r4
 800b1e6:	e7d2      	b.n	800b18e <_vfiprintf_r+0xe2>
 800b1e8:	9b03      	ldr	r3, [sp, #12]
 800b1ea:	1d19      	adds	r1, r3, #4
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	9103      	str	r1, [sp, #12]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	bfbb      	ittet	lt
 800b1f4:	425b      	neglt	r3, r3
 800b1f6:	f042 0202 	orrlt.w	r2, r2, #2
 800b1fa:	9307      	strge	r3, [sp, #28]
 800b1fc:	9307      	strlt	r3, [sp, #28]
 800b1fe:	bfb8      	it	lt
 800b200:	9204      	strlt	r2, [sp, #16]
 800b202:	7823      	ldrb	r3, [r4, #0]
 800b204:	2b2e      	cmp	r3, #46	; 0x2e
 800b206:	d10c      	bne.n	800b222 <_vfiprintf_r+0x176>
 800b208:	7863      	ldrb	r3, [r4, #1]
 800b20a:	2b2a      	cmp	r3, #42	; 0x2a
 800b20c:	d135      	bne.n	800b27a <_vfiprintf_r+0x1ce>
 800b20e:	9b03      	ldr	r3, [sp, #12]
 800b210:	1d1a      	adds	r2, r3, #4
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	9203      	str	r2, [sp, #12]
 800b216:	2b00      	cmp	r3, #0
 800b218:	bfb8      	it	lt
 800b21a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b21e:	3402      	adds	r4, #2
 800b220:	9305      	str	r3, [sp, #20]
 800b222:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b308 <_vfiprintf_r+0x25c>
 800b226:	7821      	ldrb	r1, [r4, #0]
 800b228:	2203      	movs	r2, #3
 800b22a:	4650      	mov	r0, sl
 800b22c:	f7f5 f838 	bl	80002a0 <memchr>
 800b230:	b140      	cbz	r0, 800b244 <_vfiprintf_r+0x198>
 800b232:	2340      	movs	r3, #64	; 0x40
 800b234:	eba0 000a 	sub.w	r0, r0, sl
 800b238:	fa03 f000 	lsl.w	r0, r3, r0
 800b23c:	9b04      	ldr	r3, [sp, #16]
 800b23e:	4303      	orrs	r3, r0
 800b240:	3401      	adds	r4, #1
 800b242:	9304      	str	r3, [sp, #16]
 800b244:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b248:	482c      	ldr	r0, [pc, #176]	; (800b2fc <_vfiprintf_r+0x250>)
 800b24a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b24e:	2206      	movs	r2, #6
 800b250:	f7f5 f826 	bl	80002a0 <memchr>
 800b254:	2800      	cmp	r0, #0
 800b256:	d03f      	beq.n	800b2d8 <_vfiprintf_r+0x22c>
 800b258:	4b29      	ldr	r3, [pc, #164]	; (800b300 <_vfiprintf_r+0x254>)
 800b25a:	bb1b      	cbnz	r3, 800b2a4 <_vfiprintf_r+0x1f8>
 800b25c:	9b03      	ldr	r3, [sp, #12]
 800b25e:	3307      	adds	r3, #7
 800b260:	f023 0307 	bic.w	r3, r3, #7
 800b264:	3308      	adds	r3, #8
 800b266:	9303      	str	r3, [sp, #12]
 800b268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b26a:	443b      	add	r3, r7
 800b26c:	9309      	str	r3, [sp, #36]	; 0x24
 800b26e:	e767      	b.n	800b140 <_vfiprintf_r+0x94>
 800b270:	fb0c 3202 	mla	r2, ip, r2, r3
 800b274:	460c      	mov	r4, r1
 800b276:	2001      	movs	r0, #1
 800b278:	e7a5      	b.n	800b1c6 <_vfiprintf_r+0x11a>
 800b27a:	2300      	movs	r3, #0
 800b27c:	3401      	adds	r4, #1
 800b27e:	9305      	str	r3, [sp, #20]
 800b280:	4619      	mov	r1, r3
 800b282:	f04f 0c0a 	mov.w	ip, #10
 800b286:	4620      	mov	r0, r4
 800b288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b28c:	3a30      	subs	r2, #48	; 0x30
 800b28e:	2a09      	cmp	r2, #9
 800b290:	d903      	bls.n	800b29a <_vfiprintf_r+0x1ee>
 800b292:	2b00      	cmp	r3, #0
 800b294:	d0c5      	beq.n	800b222 <_vfiprintf_r+0x176>
 800b296:	9105      	str	r1, [sp, #20]
 800b298:	e7c3      	b.n	800b222 <_vfiprintf_r+0x176>
 800b29a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b29e:	4604      	mov	r4, r0
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e7f0      	b.n	800b286 <_vfiprintf_r+0x1da>
 800b2a4:	ab03      	add	r3, sp, #12
 800b2a6:	9300      	str	r3, [sp, #0]
 800b2a8:	462a      	mov	r2, r5
 800b2aa:	4b16      	ldr	r3, [pc, #88]	; (800b304 <_vfiprintf_r+0x258>)
 800b2ac:	a904      	add	r1, sp, #16
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	f7fd ff2c 	bl	800910c <_printf_float>
 800b2b4:	4607      	mov	r7, r0
 800b2b6:	1c78      	adds	r0, r7, #1
 800b2b8:	d1d6      	bne.n	800b268 <_vfiprintf_r+0x1bc>
 800b2ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2bc:	07d9      	lsls	r1, r3, #31
 800b2be:	d405      	bmi.n	800b2cc <_vfiprintf_r+0x220>
 800b2c0:	89ab      	ldrh	r3, [r5, #12]
 800b2c2:	059a      	lsls	r2, r3, #22
 800b2c4:	d402      	bmi.n	800b2cc <_vfiprintf_r+0x220>
 800b2c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2c8:	f7ff fa76 	bl	800a7b8 <__retarget_lock_release_recursive>
 800b2cc:	89ab      	ldrh	r3, [r5, #12]
 800b2ce:	065b      	lsls	r3, r3, #25
 800b2d0:	f53f af12 	bmi.w	800b0f8 <_vfiprintf_r+0x4c>
 800b2d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2d6:	e711      	b.n	800b0fc <_vfiprintf_r+0x50>
 800b2d8:	ab03      	add	r3, sp, #12
 800b2da:	9300      	str	r3, [sp, #0]
 800b2dc:	462a      	mov	r2, r5
 800b2de:	4b09      	ldr	r3, [pc, #36]	; (800b304 <_vfiprintf_r+0x258>)
 800b2e0:	a904      	add	r1, sp, #16
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	f7fe f9b6 	bl	8009654 <_printf_i>
 800b2e8:	e7e4      	b.n	800b2b4 <_vfiprintf_r+0x208>
 800b2ea:	bf00      	nop
 800b2ec:	0800f254 	.word	0x0800f254
 800b2f0:	0800f274 	.word	0x0800f274
 800b2f4:	0800f234 	.word	0x0800f234
 800b2f8:	0800f3f4 	.word	0x0800f3f4
 800b2fc:	0800f3fe 	.word	0x0800f3fe
 800b300:	0800910d 	.word	0x0800910d
 800b304:	0800b087 	.word	0x0800b087
 800b308:	0800f3fa 	.word	0x0800f3fa

0800b30c <_sbrk_r>:
 800b30c:	b538      	push	{r3, r4, r5, lr}
 800b30e:	4d06      	ldr	r5, [pc, #24]	; (800b328 <_sbrk_r+0x1c>)
 800b310:	2300      	movs	r3, #0
 800b312:	4604      	mov	r4, r0
 800b314:	4608      	mov	r0, r1
 800b316:	602b      	str	r3, [r5, #0]
 800b318:	f7f8 fe98 	bl	800404c <_sbrk>
 800b31c:	1c43      	adds	r3, r0, #1
 800b31e:	d102      	bne.n	800b326 <_sbrk_r+0x1a>
 800b320:	682b      	ldr	r3, [r5, #0]
 800b322:	b103      	cbz	r3, 800b326 <_sbrk_r+0x1a>
 800b324:	6023      	str	r3, [r4, #0]
 800b326:	bd38      	pop	{r3, r4, r5, pc}
 800b328:	20006348 	.word	0x20006348

0800b32c <__sread>:
 800b32c:	b510      	push	{r4, lr}
 800b32e:	460c      	mov	r4, r1
 800b330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b334:	f000 faa6 	bl	800b884 <_read_r>
 800b338:	2800      	cmp	r0, #0
 800b33a:	bfab      	itete	ge
 800b33c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b33e:	89a3      	ldrhlt	r3, [r4, #12]
 800b340:	181b      	addge	r3, r3, r0
 800b342:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b346:	bfac      	ite	ge
 800b348:	6563      	strge	r3, [r4, #84]	; 0x54
 800b34a:	81a3      	strhlt	r3, [r4, #12]
 800b34c:	bd10      	pop	{r4, pc}

0800b34e <__swrite>:
 800b34e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b352:	461f      	mov	r7, r3
 800b354:	898b      	ldrh	r3, [r1, #12]
 800b356:	05db      	lsls	r3, r3, #23
 800b358:	4605      	mov	r5, r0
 800b35a:	460c      	mov	r4, r1
 800b35c:	4616      	mov	r6, r2
 800b35e:	d505      	bpl.n	800b36c <__swrite+0x1e>
 800b360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b364:	2302      	movs	r3, #2
 800b366:	2200      	movs	r2, #0
 800b368:	f000 f9f8 	bl	800b75c <_lseek_r>
 800b36c:	89a3      	ldrh	r3, [r4, #12]
 800b36e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b372:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b376:	81a3      	strh	r3, [r4, #12]
 800b378:	4632      	mov	r2, r6
 800b37a:	463b      	mov	r3, r7
 800b37c:	4628      	mov	r0, r5
 800b37e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b382:	f000 b869 	b.w	800b458 <_write_r>

0800b386 <__sseek>:
 800b386:	b510      	push	{r4, lr}
 800b388:	460c      	mov	r4, r1
 800b38a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b38e:	f000 f9e5 	bl	800b75c <_lseek_r>
 800b392:	1c43      	adds	r3, r0, #1
 800b394:	89a3      	ldrh	r3, [r4, #12]
 800b396:	bf15      	itete	ne
 800b398:	6560      	strne	r0, [r4, #84]	; 0x54
 800b39a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b39e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3a2:	81a3      	strheq	r3, [r4, #12]
 800b3a4:	bf18      	it	ne
 800b3a6:	81a3      	strhne	r3, [r4, #12]
 800b3a8:	bd10      	pop	{r4, pc}

0800b3aa <__sclose>:
 800b3aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ae:	f000 b8f1 	b.w	800b594 <_close_r>
	...

0800b3b4 <__swbuf_r>:
 800b3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b6:	460e      	mov	r6, r1
 800b3b8:	4614      	mov	r4, r2
 800b3ba:	4605      	mov	r5, r0
 800b3bc:	b118      	cbz	r0, 800b3c6 <__swbuf_r+0x12>
 800b3be:	6983      	ldr	r3, [r0, #24]
 800b3c0:	b90b      	cbnz	r3, 800b3c6 <__swbuf_r+0x12>
 800b3c2:	f7ff f955 	bl	800a670 <__sinit>
 800b3c6:	4b21      	ldr	r3, [pc, #132]	; (800b44c <__swbuf_r+0x98>)
 800b3c8:	429c      	cmp	r4, r3
 800b3ca:	d12b      	bne.n	800b424 <__swbuf_r+0x70>
 800b3cc:	686c      	ldr	r4, [r5, #4]
 800b3ce:	69a3      	ldr	r3, [r4, #24]
 800b3d0:	60a3      	str	r3, [r4, #8]
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	071a      	lsls	r2, r3, #28
 800b3d6:	d52f      	bpl.n	800b438 <__swbuf_r+0x84>
 800b3d8:	6923      	ldr	r3, [r4, #16]
 800b3da:	b36b      	cbz	r3, 800b438 <__swbuf_r+0x84>
 800b3dc:	6923      	ldr	r3, [r4, #16]
 800b3de:	6820      	ldr	r0, [r4, #0]
 800b3e0:	1ac0      	subs	r0, r0, r3
 800b3e2:	6963      	ldr	r3, [r4, #20]
 800b3e4:	b2f6      	uxtb	r6, r6
 800b3e6:	4283      	cmp	r3, r0
 800b3e8:	4637      	mov	r7, r6
 800b3ea:	dc04      	bgt.n	800b3f6 <__swbuf_r+0x42>
 800b3ec:	4621      	mov	r1, r4
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	f000 f966 	bl	800b6c0 <_fflush_r>
 800b3f4:	bb30      	cbnz	r0, 800b444 <__swbuf_r+0x90>
 800b3f6:	68a3      	ldr	r3, [r4, #8]
 800b3f8:	3b01      	subs	r3, #1
 800b3fa:	60a3      	str	r3, [r4, #8]
 800b3fc:	6823      	ldr	r3, [r4, #0]
 800b3fe:	1c5a      	adds	r2, r3, #1
 800b400:	6022      	str	r2, [r4, #0]
 800b402:	701e      	strb	r6, [r3, #0]
 800b404:	6963      	ldr	r3, [r4, #20]
 800b406:	3001      	adds	r0, #1
 800b408:	4283      	cmp	r3, r0
 800b40a:	d004      	beq.n	800b416 <__swbuf_r+0x62>
 800b40c:	89a3      	ldrh	r3, [r4, #12]
 800b40e:	07db      	lsls	r3, r3, #31
 800b410:	d506      	bpl.n	800b420 <__swbuf_r+0x6c>
 800b412:	2e0a      	cmp	r6, #10
 800b414:	d104      	bne.n	800b420 <__swbuf_r+0x6c>
 800b416:	4621      	mov	r1, r4
 800b418:	4628      	mov	r0, r5
 800b41a:	f000 f951 	bl	800b6c0 <_fflush_r>
 800b41e:	b988      	cbnz	r0, 800b444 <__swbuf_r+0x90>
 800b420:	4638      	mov	r0, r7
 800b422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b424:	4b0a      	ldr	r3, [pc, #40]	; (800b450 <__swbuf_r+0x9c>)
 800b426:	429c      	cmp	r4, r3
 800b428:	d101      	bne.n	800b42e <__swbuf_r+0x7a>
 800b42a:	68ac      	ldr	r4, [r5, #8]
 800b42c:	e7cf      	b.n	800b3ce <__swbuf_r+0x1a>
 800b42e:	4b09      	ldr	r3, [pc, #36]	; (800b454 <__swbuf_r+0xa0>)
 800b430:	429c      	cmp	r4, r3
 800b432:	bf08      	it	eq
 800b434:	68ec      	ldreq	r4, [r5, #12]
 800b436:	e7ca      	b.n	800b3ce <__swbuf_r+0x1a>
 800b438:	4621      	mov	r1, r4
 800b43a:	4628      	mov	r0, r5
 800b43c:	f000 f81e 	bl	800b47c <__swsetup_r>
 800b440:	2800      	cmp	r0, #0
 800b442:	d0cb      	beq.n	800b3dc <__swbuf_r+0x28>
 800b444:	f04f 37ff 	mov.w	r7, #4294967295
 800b448:	e7ea      	b.n	800b420 <__swbuf_r+0x6c>
 800b44a:	bf00      	nop
 800b44c:	0800f254 	.word	0x0800f254
 800b450:	0800f274 	.word	0x0800f274
 800b454:	0800f234 	.word	0x0800f234

0800b458 <_write_r>:
 800b458:	b538      	push	{r3, r4, r5, lr}
 800b45a:	4d07      	ldr	r5, [pc, #28]	; (800b478 <_write_r+0x20>)
 800b45c:	4604      	mov	r4, r0
 800b45e:	4608      	mov	r0, r1
 800b460:	4611      	mov	r1, r2
 800b462:	2200      	movs	r2, #0
 800b464:	602a      	str	r2, [r5, #0]
 800b466:	461a      	mov	r2, r3
 800b468:	f7f8 fd9f 	bl	8003faa <_write>
 800b46c:	1c43      	adds	r3, r0, #1
 800b46e:	d102      	bne.n	800b476 <_write_r+0x1e>
 800b470:	682b      	ldr	r3, [r5, #0]
 800b472:	b103      	cbz	r3, 800b476 <_write_r+0x1e>
 800b474:	6023      	str	r3, [r4, #0]
 800b476:	bd38      	pop	{r3, r4, r5, pc}
 800b478:	20006348 	.word	0x20006348

0800b47c <__swsetup_r>:
 800b47c:	4b32      	ldr	r3, [pc, #200]	; (800b548 <__swsetup_r+0xcc>)
 800b47e:	b570      	push	{r4, r5, r6, lr}
 800b480:	681d      	ldr	r5, [r3, #0]
 800b482:	4606      	mov	r6, r0
 800b484:	460c      	mov	r4, r1
 800b486:	b125      	cbz	r5, 800b492 <__swsetup_r+0x16>
 800b488:	69ab      	ldr	r3, [r5, #24]
 800b48a:	b913      	cbnz	r3, 800b492 <__swsetup_r+0x16>
 800b48c:	4628      	mov	r0, r5
 800b48e:	f7ff f8ef 	bl	800a670 <__sinit>
 800b492:	4b2e      	ldr	r3, [pc, #184]	; (800b54c <__swsetup_r+0xd0>)
 800b494:	429c      	cmp	r4, r3
 800b496:	d10f      	bne.n	800b4b8 <__swsetup_r+0x3c>
 800b498:	686c      	ldr	r4, [r5, #4]
 800b49a:	89a3      	ldrh	r3, [r4, #12]
 800b49c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4a0:	0719      	lsls	r1, r3, #28
 800b4a2:	d42c      	bmi.n	800b4fe <__swsetup_r+0x82>
 800b4a4:	06dd      	lsls	r5, r3, #27
 800b4a6:	d411      	bmi.n	800b4cc <__swsetup_r+0x50>
 800b4a8:	2309      	movs	r3, #9
 800b4aa:	6033      	str	r3, [r6, #0]
 800b4ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b4b0:	81a3      	strh	r3, [r4, #12]
 800b4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b6:	e03e      	b.n	800b536 <__swsetup_r+0xba>
 800b4b8:	4b25      	ldr	r3, [pc, #148]	; (800b550 <__swsetup_r+0xd4>)
 800b4ba:	429c      	cmp	r4, r3
 800b4bc:	d101      	bne.n	800b4c2 <__swsetup_r+0x46>
 800b4be:	68ac      	ldr	r4, [r5, #8]
 800b4c0:	e7eb      	b.n	800b49a <__swsetup_r+0x1e>
 800b4c2:	4b24      	ldr	r3, [pc, #144]	; (800b554 <__swsetup_r+0xd8>)
 800b4c4:	429c      	cmp	r4, r3
 800b4c6:	bf08      	it	eq
 800b4c8:	68ec      	ldreq	r4, [r5, #12]
 800b4ca:	e7e6      	b.n	800b49a <__swsetup_r+0x1e>
 800b4cc:	0758      	lsls	r0, r3, #29
 800b4ce:	d512      	bpl.n	800b4f6 <__swsetup_r+0x7a>
 800b4d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4d2:	b141      	cbz	r1, 800b4e6 <__swsetup_r+0x6a>
 800b4d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4d8:	4299      	cmp	r1, r3
 800b4da:	d002      	beq.n	800b4e2 <__swsetup_r+0x66>
 800b4dc:	4630      	mov	r0, r6
 800b4de:	f7ff fd11 	bl	800af04 <_free_r>
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	6363      	str	r3, [r4, #52]	; 0x34
 800b4e6:	89a3      	ldrh	r3, [r4, #12]
 800b4e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4ec:	81a3      	strh	r3, [r4, #12]
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	6063      	str	r3, [r4, #4]
 800b4f2:	6923      	ldr	r3, [r4, #16]
 800b4f4:	6023      	str	r3, [r4, #0]
 800b4f6:	89a3      	ldrh	r3, [r4, #12]
 800b4f8:	f043 0308 	orr.w	r3, r3, #8
 800b4fc:	81a3      	strh	r3, [r4, #12]
 800b4fe:	6923      	ldr	r3, [r4, #16]
 800b500:	b94b      	cbnz	r3, 800b516 <__swsetup_r+0x9a>
 800b502:	89a3      	ldrh	r3, [r4, #12]
 800b504:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b50c:	d003      	beq.n	800b516 <__swsetup_r+0x9a>
 800b50e:	4621      	mov	r1, r4
 800b510:	4630      	mov	r0, r6
 800b512:	f000 f959 	bl	800b7c8 <__smakebuf_r>
 800b516:	89a0      	ldrh	r0, [r4, #12]
 800b518:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b51c:	f010 0301 	ands.w	r3, r0, #1
 800b520:	d00a      	beq.n	800b538 <__swsetup_r+0xbc>
 800b522:	2300      	movs	r3, #0
 800b524:	60a3      	str	r3, [r4, #8]
 800b526:	6963      	ldr	r3, [r4, #20]
 800b528:	425b      	negs	r3, r3
 800b52a:	61a3      	str	r3, [r4, #24]
 800b52c:	6923      	ldr	r3, [r4, #16]
 800b52e:	b943      	cbnz	r3, 800b542 <__swsetup_r+0xc6>
 800b530:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b534:	d1ba      	bne.n	800b4ac <__swsetup_r+0x30>
 800b536:	bd70      	pop	{r4, r5, r6, pc}
 800b538:	0781      	lsls	r1, r0, #30
 800b53a:	bf58      	it	pl
 800b53c:	6963      	ldrpl	r3, [r4, #20]
 800b53e:	60a3      	str	r3, [r4, #8]
 800b540:	e7f4      	b.n	800b52c <__swsetup_r+0xb0>
 800b542:	2000      	movs	r0, #0
 800b544:	e7f7      	b.n	800b536 <__swsetup_r+0xba>
 800b546:	bf00      	nop
 800b548:	20000410 	.word	0x20000410
 800b54c:	0800f254 	.word	0x0800f254
 800b550:	0800f274 	.word	0x0800f274
 800b554:	0800f234 	.word	0x0800f234

0800b558 <__assert_func>:
 800b558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b55a:	4614      	mov	r4, r2
 800b55c:	461a      	mov	r2, r3
 800b55e:	4b09      	ldr	r3, [pc, #36]	; (800b584 <__assert_func+0x2c>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4605      	mov	r5, r0
 800b564:	68d8      	ldr	r0, [r3, #12]
 800b566:	b14c      	cbz	r4, 800b57c <__assert_func+0x24>
 800b568:	4b07      	ldr	r3, [pc, #28]	; (800b588 <__assert_func+0x30>)
 800b56a:	9100      	str	r1, [sp, #0]
 800b56c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b570:	4906      	ldr	r1, [pc, #24]	; (800b58c <__assert_func+0x34>)
 800b572:	462b      	mov	r3, r5
 800b574:	f000 f8e0 	bl	800b738 <fiprintf>
 800b578:	f000 f9a3 	bl	800b8c2 <abort>
 800b57c:	4b04      	ldr	r3, [pc, #16]	; (800b590 <__assert_func+0x38>)
 800b57e:	461c      	mov	r4, r3
 800b580:	e7f3      	b.n	800b56a <__assert_func+0x12>
 800b582:	bf00      	nop
 800b584:	20000410 	.word	0x20000410
 800b588:	0800f405 	.word	0x0800f405
 800b58c:	0800f412 	.word	0x0800f412
 800b590:	0800f440 	.word	0x0800f440

0800b594 <_close_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	4d06      	ldr	r5, [pc, #24]	; (800b5b0 <_close_r+0x1c>)
 800b598:	2300      	movs	r3, #0
 800b59a:	4604      	mov	r4, r0
 800b59c:	4608      	mov	r0, r1
 800b59e:	602b      	str	r3, [r5, #0]
 800b5a0:	f7f8 fd1f 	bl	8003fe2 <_close>
 800b5a4:	1c43      	adds	r3, r0, #1
 800b5a6:	d102      	bne.n	800b5ae <_close_r+0x1a>
 800b5a8:	682b      	ldr	r3, [r5, #0]
 800b5aa:	b103      	cbz	r3, 800b5ae <_close_r+0x1a>
 800b5ac:	6023      	str	r3, [r4, #0]
 800b5ae:	bd38      	pop	{r3, r4, r5, pc}
 800b5b0:	20006348 	.word	0x20006348

0800b5b4 <__sflush_r>:
 800b5b4:	898a      	ldrh	r2, [r1, #12]
 800b5b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ba:	4605      	mov	r5, r0
 800b5bc:	0710      	lsls	r0, r2, #28
 800b5be:	460c      	mov	r4, r1
 800b5c0:	d458      	bmi.n	800b674 <__sflush_r+0xc0>
 800b5c2:	684b      	ldr	r3, [r1, #4]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	dc05      	bgt.n	800b5d4 <__sflush_r+0x20>
 800b5c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	dc02      	bgt.n	800b5d4 <__sflush_r+0x20>
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5d6:	2e00      	cmp	r6, #0
 800b5d8:	d0f9      	beq.n	800b5ce <__sflush_r+0x1a>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5e0:	682f      	ldr	r7, [r5, #0]
 800b5e2:	602b      	str	r3, [r5, #0]
 800b5e4:	d032      	beq.n	800b64c <__sflush_r+0x98>
 800b5e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5e8:	89a3      	ldrh	r3, [r4, #12]
 800b5ea:	075a      	lsls	r2, r3, #29
 800b5ec:	d505      	bpl.n	800b5fa <__sflush_r+0x46>
 800b5ee:	6863      	ldr	r3, [r4, #4]
 800b5f0:	1ac0      	subs	r0, r0, r3
 800b5f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5f4:	b10b      	cbz	r3, 800b5fa <__sflush_r+0x46>
 800b5f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5f8:	1ac0      	subs	r0, r0, r3
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b600:	6a21      	ldr	r1, [r4, #32]
 800b602:	4628      	mov	r0, r5
 800b604:	47b0      	blx	r6
 800b606:	1c43      	adds	r3, r0, #1
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	d106      	bne.n	800b61a <__sflush_r+0x66>
 800b60c:	6829      	ldr	r1, [r5, #0]
 800b60e:	291d      	cmp	r1, #29
 800b610:	d82c      	bhi.n	800b66c <__sflush_r+0xb8>
 800b612:	4a2a      	ldr	r2, [pc, #168]	; (800b6bc <__sflush_r+0x108>)
 800b614:	40ca      	lsrs	r2, r1
 800b616:	07d6      	lsls	r6, r2, #31
 800b618:	d528      	bpl.n	800b66c <__sflush_r+0xb8>
 800b61a:	2200      	movs	r2, #0
 800b61c:	6062      	str	r2, [r4, #4]
 800b61e:	04d9      	lsls	r1, r3, #19
 800b620:	6922      	ldr	r2, [r4, #16]
 800b622:	6022      	str	r2, [r4, #0]
 800b624:	d504      	bpl.n	800b630 <__sflush_r+0x7c>
 800b626:	1c42      	adds	r2, r0, #1
 800b628:	d101      	bne.n	800b62e <__sflush_r+0x7a>
 800b62a:	682b      	ldr	r3, [r5, #0]
 800b62c:	b903      	cbnz	r3, 800b630 <__sflush_r+0x7c>
 800b62e:	6560      	str	r0, [r4, #84]	; 0x54
 800b630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b632:	602f      	str	r7, [r5, #0]
 800b634:	2900      	cmp	r1, #0
 800b636:	d0ca      	beq.n	800b5ce <__sflush_r+0x1a>
 800b638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b63c:	4299      	cmp	r1, r3
 800b63e:	d002      	beq.n	800b646 <__sflush_r+0x92>
 800b640:	4628      	mov	r0, r5
 800b642:	f7ff fc5f 	bl	800af04 <_free_r>
 800b646:	2000      	movs	r0, #0
 800b648:	6360      	str	r0, [r4, #52]	; 0x34
 800b64a:	e7c1      	b.n	800b5d0 <__sflush_r+0x1c>
 800b64c:	6a21      	ldr	r1, [r4, #32]
 800b64e:	2301      	movs	r3, #1
 800b650:	4628      	mov	r0, r5
 800b652:	47b0      	blx	r6
 800b654:	1c41      	adds	r1, r0, #1
 800b656:	d1c7      	bne.n	800b5e8 <__sflush_r+0x34>
 800b658:	682b      	ldr	r3, [r5, #0]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d0c4      	beq.n	800b5e8 <__sflush_r+0x34>
 800b65e:	2b1d      	cmp	r3, #29
 800b660:	d001      	beq.n	800b666 <__sflush_r+0xb2>
 800b662:	2b16      	cmp	r3, #22
 800b664:	d101      	bne.n	800b66a <__sflush_r+0xb6>
 800b666:	602f      	str	r7, [r5, #0]
 800b668:	e7b1      	b.n	800b5ce <__sflush_r+0x1a>
 800b66a:	89a3      	ldrh	r3, [r4, #12]
 800b66c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b670:	81a3      	strh	r3, [r4, #12]
 800b672:	e7ad      	b.n	800b5d0 <__sflush_r+0x1c>
 800b674:	690f      	ldr	r7, [r1, #16]
 800b676:	2f00      	cmp	r7, #0
 800b678:	d0a9      	beq.n	800b5ce <__sflush_r+0x1a>
 800b67a:	0793      	lsls	r3, r2, #30
 800b67c:	680e      	ldr	r6, [r1, #0]
 800b67e:	bf08      	it	eq
 800b680:	694b      	ldreq	r3, [r1, #20]
 800b682:	600f      	str	r7, [r1, #0]
 800b684:	bf18      	it	ne
 800b686:	2300      	movne	r3, #0
 800b688:	eba6 0807 	sub.w	r8, r6, r7
 800b68c:	608b      	str	r3, [r1, #8]
 800b68e:	f1b8 0f00 	cmp.w	r8, #0
 800b692:	dd9c      	ble.n	800b5ce <__sflush_r+0x1a>
 800b694:	6a21      	ldr	r1, [r4, #32]
 800b696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b698:	4643      	mov	r3, r8
 800b69a:	463a      	mov	r2, r7
 800b69c:	4628      	mov	r0, r5
 800b69e:	47b0      	blx	r6
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	dc06      	bgt.n	800b6b2 <__sflush_r+0xfe>
 800b6a4:	89a3      	ldrh	r3, [r4, #12]
 800b6a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6aa:	81a3      	strh	r3, [r4, #12]
 800b6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b0:	e78e      	b.n	800b5d0 <__sflush_r+0x1c>
 800b6b2:	4407      	add	r7, r0
 800b6b4:	eba8 0800 	sub.w	r8, r8, r0
 800b6b8:	e7e9      	b.n	800b68e <__sflush_r+0xda>
 800b6ba:	bf00      	nop
 800b6bc:	20400001 	.word	0x20400001

0800b6c0 <_fflush_r>:
 800b6c0:	b538      	push	{r3, r4, r5, lr}
 800b6c2:	690b      	ldr	r3, [r1, #16]
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	b913      	cbnz	r3, 800b6d0 <_fflush_r+0x10>
 800b6ca:	2500      	movs	r5, #0
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	bd38      	pop	{r3, r4, r5, pc}
 800b6d0:	b118      	cbz	r0, 800b6da <_fflush_r+0x1a>
 800b6d2:	6983      	ldr	r3, [r0, #24]
 800b6d4:	b90b      	cbnz	r3, 800b6da <_fflush_r+0x1a>
 800b6d6:	f7fe ffcb 	bl	800a670 <__sinit>
 800b6da:	4b14      	ldr	r3, [pc, #80]	; (800b72c <_fflush_r+0x6c>)
 800b6dc:	429c      	cmp	r4, r3
 800b6de:	d11b      	bne.n	800b718 <_fflush_r+0x58>
 800b6e0:	686c      	ldr	r4, [r5, #4]
 800b6e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d0ef      	beq.n	800b6ca <_fflush_r+0xa>
 800b6ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6ec:	07d0      	lsls	r0, r2, #31
 800b6ee:	d404      	bmi.n	800b6fa <_fflush_r+0x3a>
 800b6f0:	0599      	lsls	r1, r3, #22
 800b6f2:	d402      	bmi.n	800b6fa <_fflush_r+0x3a>
 800b6f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6f6:	f7ff f85e 	bl	800a7b6 <__retarget_lock_acquire_recursive>
 800b6fa:	4628      	mov	r0, r5
 800b6fc:	4621      	mov	r1, r4
 800b6fe:	f7ff ff59 	bl	800b5b4 <__sflush_r>
 800b702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b704:	07da      	lsls	r2, r3, #31
 800b706:	4605      	mov	r5, r0
 800b708:	d4e0      	bmi.n	800b6cc <_fflush_r+0xc>
 800b70a:	89a3      	ldrh	r3, [r4, #12]
 800b70c:	059b      	lsls	r3, r3, #22
 800b70e:	d4dd      	bmi.n	800b6cc <_fflush_r+0xc>
 800b710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b712:	f7ff f851 	bl	800a7b8 <__retarget_lock_release_recursive>
 800b716:	e7d9      	b.n	800b6cc <_fflush_r+0xc>
 800b718:	4b05      	ldr	r3, [pc, #20]	; (800b730 <_fflush_r+0x70>)
 800b71a:	429c      	cmp	r4, r3
 800b71c:	d101      	bne.n	800b722 <_fflush_r+0x62>
 800b71e:	68ac      	ldr	r4, [r5, #8]
 800b720:	e7df      	b.n	800b6e2 <_fflush_r+0x22>
 800b722:	4b04      	ldr	r3, [pc, #16]	; (800b734 <_fflush_r+0x74>)
 800b724:	429c      	cmp	r4, r3
 800b726:	bf08      	it	eq
 800b728:	68ec      	ldreq	r4, [r5, #12]
 800b72a:	e7da      	b.n	800b6e2 <_fflush_r+0x22>
 800b72c:	0800f254 	.word	0x0800f254
 800b730:	0800f274 	.word	0x0800f274
 800b734:	0800f234 	.word	0x0800f234

0800b738 <fiprintf>:
 800b738:	b40e      	push	{r1, r2, r3}
 800b73a:	b503      	push	{r0, r1, lr}
 800b73c:	4601      	mov	r1, r0
 800b73e:	ab03      	add	r3, sp, #12
 800b740:	4805      	ldr	r0, [pc, #20]	; (800b758 <fiprintf+0x20>)
 800b742:	f853 2b04 	ldr.w	r2, [r3], #4
 800b746:	6800      	ldr	r0, [r0, #0]
 800b748:	9301      	str	r3, [sp, #4]
 800b74a:	f7ff fcaf 	bl	800b0ac <_vfiprintf_r>
 800b74e:	b002      	add	sp, #8
 800b750:	f85d eb04 	ldr.w	lr, [sp], #4
 800b754:	b003      	add	sp, #12
 800b756:	4770      	bx	lr
 800b758:	20000410 	.word	0x20000410

0800b75c <_lseek_r>:
 800b75c:	b538      	push	{r3, r4, r5, lr}
 800b75e:	4d07      	ldr	r5, [pc, #28]	; (800b77c <_lseek_r+0x20>)
 800b760:	4604      	mov	r4, r0
 800b762:	4608      	mov	r0, r1
 800b764:	4611      	mov	r1, r2
 800b766:	2200      	movs	r2, #0
 800b768:	602a      	str	r2, [r5, #0]
 800b76a:	461a      	mov	r2, r3
 800b76c:	f7f8 fc60 	bl	8004030 <_lseek>
 800b770:	1c43      	adds	r3, r0, #1
 800b772:	d102      	bne.n	800b77a <_lseek_r+0x1e>
 800b774:	682b      	ldr	r3, [r5, #0]
 800b776:	b103      	cbz	r3, 800b77a <_lseek_r+0x1e>
 800b778:	6023      	str	r3, [r4, #0]
 800b77a:	bd38      	pop	{r3, r4, r5, pc}
 800b77c:	20006348 	.word	0x20006348

0800b780 <__swhatbuf_r>:
 800b780:	b570      	push	{r4, r5, r6, lr}
 800b782:	460e      	mov	r6, r1
 800b784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b788:	2900      	cmp	r1, #0
 800b78a:	b096      	sub	sp, #88	; 0x58
 800b78c:	4614      	mov	r4, r2
 800b78e:	461d      	mov	r5, r3
 800b790:	da07      	bge.n	800b7a2 <__swhatbuf_r+0x22>
 800b792:	2300      	movs	r3, #0
 800b794:	602b      	str	r3, [r5, #0]
 800b796:	89b3      	ldrh	r3, [r6, #12]
 800b798:	061a      	lsls	r2, r3, #24
 800b79a:	d410      	bmi.n	800b7be <__swhatbuf_r+0x3e>
 800b79c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7a0:	e00e      	b.n	800b7c0 <__swhatbuf_r+0x40>
 800b7a2:	466a      	mov	r2, sp
 800b7a4:	f000 f894 	bl	800b8d0 <_fstat_r>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	dbf2      	blt.n	800b792 <__swhatbuf_r+0x12>
 800b7ac:	9a01      	ldr	r2, [sp, #4]
 800b7ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b7b6:	425a      	negs	r2, r3
 800b7b8:	415a      	adcs	r2, r3
 800b7ba:	602a      	str	r2, [r5, #0]
 800b7bc:	e7ee      	b.n	800b79c <__swhatbuf_r+0x1c>
 800b7be:	2340      	movs	r3, #64	; 0x40
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	6023      	str	r3, [r4, #0]
 800b7c4:	b016      	add	sp, #88	; 0x58
 800b7c6:	bd70      	pop	{r4, r5, r6, pc}

0800b7c8 <__smakebuf_r>:
 800b7c8:	898b      	ldrh	r3, [r1, #12]
 800b7ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7cc:	079d      	lsls	r5, r3, #30
 800b7ce:	4606      	mov	r6, r0
 800b7d0:	460c      	mov	r4, r1
 800b7d2:	d507      	bpl.n	800b7e4 <__smakebuf_r+0x1c>
 800b7d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7d8:	6023      	str	r3, [r4, #0]
 800b7da:	6123      	str	r3, [r4, #16]
 800b7dc:	2301      	movs	r3, #1
 800b7de:	6163      	str	r3, [r4, #20]
 800b7e0:	b002      	add	sp, #8
 800b7e2:	bd70      	pop	{r4, r5, r6, pc}
 800b7e4:	ab01      	add	r3, sp, #4
 800b7e6:	466a      	mov	r2, sp
 800b7e8:	f7ff ffca 	bl	800b780 <__swhatbuf_r>
 800b7ec:	9900      	ldr	r1, [sp, #0]
 800b7ee:	4605      	mov	r5, r0
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	f7ff fbd7 	bl	800afa4 <_malloc_r>
 800b7f6:	b948      	cbnz	r0, 800b80c <__smakebuf_r+0x44>
 800b7f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7fc:	059a      	lsls	r2, r3, #22
 800b7fe:	d4ef      	bmi.n	800b7e0 <__smakebuf_r+0x18>
 800b800:	f023 0303 	bic.w	r3, r3, #3
 800b804:	f043 0302 	orr.w	r3, r3, #2
 800b808:	81a3      	strh	r3, [r4, #12]
 800b80a:	e7e3      	b.n	800b7d4 <__smakebuf_r+0xc>
 800b80c:	4b0d      	ldr	r3, [pc, #52]	; (800b844 <__smakebuf_r+0x7c>)
 800b80e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b810:	89a3      	ldrh	r3, [r4, #12]
 800b812:	6020      	str	r0, [r4, #0]
 800b814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b818:	81a3      	strh	r3, [r4, #12]
 800b81a:	9b00      	ldr	r3, [sp, #0]
 800b81c:	6163      	str	r3, [r4, #20]
 800b81e:	9b01      	ldr	r3, [sp, #4]
 800b820:	6120      	str	r0, [r4, #16]
 800b822:	b15b      	cbz	r3, 800b83c <__smakebuf_r+0x74>
 800b824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b828:	4630      	mov	r0, r6
 800b82a:	f000 f863 	bl	800b8f4 <_isatty_r>
 800b82e:	b128      	cbz	r0, 800b83c <__smakebuf_r+0x74>
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	f023 0303 	bic.w	r3, r3, #3
 800b836:	f043 0301 	orr.w	r3, r3, #1
 800b83a:	81a3      	strh	r3, [r4, #12]
 800b83c:	89a0      	ldrh	r0, [r4, #12]
 800b83e:	4305      	orrs	r5, r0
 800b840:	81a5      	strh	r5, [r4, #12]
 800b842:	e7cd      	b.n	800b7e0 <__smakebuf_r+0x18>
 800b844:	0800a609 	.word	0x0800a609

0800b848 <__ascii_mbtowc>:
 800b848:	b082      	sub	sp, #8
 800b84a:	b901      	cbnz	r1, 800b84e <__ascii_mbtowc+0x6>
 800b84c:	a901      	add	r1, sp, #4
 800b84e:	b142      	cbz	r2, 800b862 <__ascii_mbtowc+0x1a>
 800b850:	b14b      	cbz	r3, 800b866 <__ascii_mbtowc+0x1e>
 800b852:	7813      	ldrb	r3, [r2, #0]
 800b854:	600b      	str	r3, [r1, #0]
 800b856:	7812      	ldrb	r2, [r2, #0]
 800b858:	1e10      	subs	r0, r2, #0
 800b85a:	bf18      	it	ne
 800b85c:	2001      	movne	r0, #1
 800b85e:	b002      	add	sp, #8
 800b860:	4770      	bx	lr
 800b862:	4610      	mov	r0, r2
 800b864:	e7fb      	b.n	800b85e <__ascii_mbtowc+0x16>
 800b866:	f06f 0001 	mvn.w	r0, #1
 800b86a:	e7f8      	b.n	800b85e <__ascii_mbtowc+0x16>

0800b86c <__malloc_lock>:
 800b86c:	4801      	ldr	r0, [pc, #4]	; (800b874 <__malloc_lock+0x8>)
 800b86e:	f7fe bfa2 	b.w	800a7b6 <__retarget_lock_acquire_recursive>
 800b872:	bf00      	nop
 800b874:	20006340 	.word	0x20006340

0800b878 <__malloc_unlock>:
 800b878:	4801      	ldr	r0, [pc, #4]	; (800b880 <__malloc_unlock+0x8>)
 800b87a:	f7fe bf9d 	b.w	800a7b8 <__retarget_lock_release_recursive>
 800b87e:	bf00      	nop
 800b880:	20006340 	.word	0x20006340

0800b884 <_read_r>:
 800b884:	b538      	push	{r3, r4, r5, lr}
 800b886:	4d07      	ldr	r5, [pc, #28]	; (800b8a4 <_read_r+0x20>)
 800b888:	4604      	mov	r4, r0
 800b88a:	4608      	mov	r0, r1
 800b88c:	4611      	mov	r1, r2
 800b88e:	2200      	movs	r2, #0
 800b890:	602a      	str	r2, [r5, #0]
 800b892:	461a      	mov	r2, r3
 800b894:	f7f8 fb6c 	bl	8003f70 <_read>
 800b898:	1c43      	adds	r3, r0, #1
 800b89a:	d102      	bne.n	800b8a2 <_read_r+0x1e>
 800b89c:	682b      	ldr	r3, [r5, #0]
 800b89e:	b103      	cbz	r3, 800b8a2 <_read_r+0x1e>
 800b8a0:	6023      	str	r3, [r4, #0]
 800b8a2:	bd38      	pop	{r3, r4, r5, pc}
 800b8a4:	20006348 	.word	0x20006348

0800b8a8 <__ascii_wctomb>:
 800b8a8:	b149      	cbz	r1, 800b8be <__ascii_wctomb+0x16>
 800b8aa:	2aff      	cmp	r2, #255	; 0xff
 800b8ac:	bf85      	ittet	hi
 800b8ae:	238a      	movhi	r3, #138	; 0x8a
 800b8b0:	6003      	strhi	r3, [r0, #0]
 800b8b2:	700a      	strbls	r2, [r1, #0]
 800b8b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b8b8:	bf98      	it	ls
 800b8ba:	2001      	movls	r0, #1
 800b8bc:	4770      	bx	lr
 800b8be:	4608      	mov	r0, r1
 800b8c0:	4770      	bx	lr

0800b8c2 <abort>:
 800b8c2:	b508      	push	{r3, lr}
 800b8c4:	2006      	movs	r0, #6
 800b8c6:	f000 f84d 	bl	800b964 <raise>
 800b8ca:	2001      	movs	r0, #1
 800b8cc:	f7f8 fb46 	bl	8003f5c <_exit>

0800b8d0 <_fstat_r>:
 800b8d0:	b538      	push	{r3, r4, r5, lr}
 800b8d2:	4d07      	ldr	r5, [pc, #28]	; (800b8f0 <_fstat_r+0x20>)
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	4608      	mov	r0, r1
 800b8da:	4611      	mov	r1, r2
 800b8dc:	602b      	str	r3, [r5, #0]
 800b8de:	f7f8 fb8c 	bl	8003ffa <_fstat>
 800b8e2:	1c43      	adds	r3, r0, #1
 800b8e4:	d102      	bne.n	800b8ec <_fstat_r+0x1c>
 800b8e6:	682b      	ldr	r3, [r5, #0]
 800b8e8:	b103      	cbz	r3, 800b8ec <_fstat_r+0x1c>
 800b8ea:	6023      	str	r3, [r4, #0]
 800b8ec:	bd38      	pop	{r3, r4, r5, pc}
 800b8ee:	bf00      	nop
 800b8f0:	20006348 	.word	0x20006348

0800b8f4 <_isatty_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	4d06      	ldr	r5, [pc, #24]	; (800b910 <_isatty_r+0x1c>)
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	4608      	mov	r0, r1
 800b8fe:	602b      	str	r3, [r5, #0]
 800b900:	f7f8 fb8b 	bl	800401a <_isatty>
 800b904:	1c43      	adds	r3, r0, #1
 800b906:	d102      	bne.n	800b90e <_isatty_r+0x1a>
 800b908:	682b      	ldr	r3, [r5, #0]
 800b90a:	b103      	cbz	r3, 800b90e <_isatty_r+0x1a>
 800b90c:	6023      	str	r3, [r4, #0]
 800b90e:	bd38      	pop	{r3, r4, r5, pc}
 800b910:	20006348 	.word	0x20006348

0800b914 <_raise_r>:
 800b914:	291f      	cmp	r1, #31
 800b916:	b538      	push	{r3, r4, r5, lr}
 800b918:	4604      	mov	r4, r0
 800b91a:	460d      	mov	r5, r1
 800b91c:	d904      	bls.n	800b928 <_raise_r+0x14>
 800b91e:	2316      	movs	r3, #22
 800b920:	6003      	str	r3, [r0, #0]
 800b922:	f04f 30ff 	mov.w	r0, #4294967295
 800b926:	bd38      	pop	{r3, r4, r5, pc}
 800b928:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b92a:	b112      	cbz	r2, 800b932 <_raise_r+0x1e>
 800b92c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b930:	b94b      	cbnz	r3, 800b946 <_raise_r+0x32>
 800b932:	4620      	mov	r0, r4
 800b934:	f000 f830 	bl	800b998 <_getpid_r>
 800b938:	462a      	mov	r2, r5
 800b93a:	4601      	mov	r1, r0
 800b93c:	4620      	mov	r0, r4
 800b93e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b942:	f000 b817 	b.w	800b974 <_kill_r>
 800b946:	2b01      	cmp	r3, #1
 800b948:	d00a      	beq.n	800b960 <_raise_r+0x4c>
 800b94a:	1c59      	adds	r1, r3, #1
 800b94c:	d103      	bne.n	800b956 <_raise_r+0x42>
 800b94e:	2316      	movs	r3, #22
 800b950:	6003      	str	r3, [r0, #0]
 800b952:	2001      	movs	r0, #1
 800b954:	e7e7      	b.n	800b926 <_raise_r+0x12>
 800b956:	2400      	movs	r4, #0
 800b958:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b95c:	4628      	mov	r0, r5
 800b95e:	4798      	blx	r3
 800b960:	2000      	movs	r0, #0
 800b962:	e7e0      	b.n	800b926 <_raise_r+0x12>

0800b964 <raise>:
 800b964:	4b02      	ldr	r3, [pc, #8]	; (800b970 <raise+0xc>)
 800b966:	4601      	mov	r1, r0
 800b968:	6818      	ldr	r0, [r3, #0]
 800b96a:	f7ff bfd3 	b.w	800b914 <_raise_r>
 800b96e:	bf00      	nop
 800b970:	20000410 	.word	0x20000410

0800b974 <_kill_r>:
 800b974:	b538      	push	{r3, r4, r5, lr}
 800b976:	4d07      	ldr	r5, [pc, #28]	; (800b994 <_kill_r+0x20>)
 800b978:	2300      	movs	r3, #0
 800b97a:	4604      	mov	r4, r0
 800b97c:	4608      	mov	r0, r1
 800b97e:	4611      	mov	r1, r2
 800b980:	602b      	str	r3, [r5, #0]
 800b982:	f7f8 fadb 	bl	8003f3c <_kill>
 800b986:	1c43      	adds	r3, r0, #1
 800b988:	d102      	bne.n	800b990 <_kill_r+0x1c>
 800b98a:	682b      	ldr	r3, [r5, #0]
 800b98c:	b103      	cbz	r3, 800b990 <_kill_r+0x1c>
 800b98e:	6023      	str	r3, [r4, #0]
 800b990:	bd38      	pop	{r3, r4, r5, pc}
 800b992:	bf00      	nop
 800b994:	20006348 	.word	0x20006348

0800b998 <_getpid_r>:
 800b998:	f7f8 bac8 	b.w	8003f2c <_getpid>

0800b99c <roundf>:
 800b99c:	ee10 0a10 	vmov	r0, s0
 800b9a0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b9a4:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800b9a8:	2a16      	cmp	r2, #22
 800b9aa:	dc15      	bgt.n	800b9d8 <roundf+0x3c>
 800b9ac:	2a00      	cmp	r2, #0
 800b9ae:	da08      	bge.n	800b9c2 <roundf+0x26>
 800b9b0:	3201      	adds	r2, #1
 800b9b2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800b9b6:	d101      	bne.n	800b9bc <roundf+0x20>
 800b9b8:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800b9bc:	ee00 3a10 	vmov	s0, r3
 800b9c0:	4770      	bx	lr
 800b9c2:	4908      	ldr	r1, [pc, #32]	; (800b9e4 <roundf+0x48>)
 800b9c4:	4111      	asrs	r1, r2
 800b9c6:	4208      	tst	r0, r1
 800b9c8:	d0fa      	beq.n	800b9c0 <roundf+0x24>
 800b9ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b9ce:	4113      	asrs	r3, r2
 800b9d0:	4403      	add	r3, r0
 800b9d2:	ea23 0301 	bic.w	r3, r3, r1
 800b9d6:	e7f1      	b.n	800b9bc <roundf+0x20>
 800b9d8:	2a80      	cmp	r2, #128	; 0x80
 800b9da:	d1f1      	bne.n	800b9c0 <roundf+0x24>
 800b9dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b9e0:	4770      	bx	lr
 800b9e2:	bf00      	nop
 800b9e4:	007fffff 	.word	0x007fffff

0800b9e8 <powf>:
 800b9e8:	b508      	push	{r3, lr}
 800b9ea:	ed2d 8b04 	vpush	{d8-d9}
 800b9ee:	eeb0 9a40 	vmov.f32	s18, s0
 800b9f2:	eef0 8a60 	vmov.f32	s17, s1
 800b9f6:	f000 f8b5 	bl	800bb64 <__ieee754_powf>
 800b9fa:	4b43      	ldr	r3, [pc, #268]	; (800bb08 <powf+0x120>)
 800b9fc:	f993 3000 	ldrsb.w	r3, [r3]
 800ba00:	3301      	adds	r3, #1
 800ba02:	eeb0 8a40 	vmov.f32	s16, s0
 800ba06:	d012      	beq.n	800ba2e <powf+0x46>
 800ba08:	eef4 8a68 	vcmp.f32	s17, s17
 800ba0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba10:	d60d      	bvs.n	800ba2e <powf+0x46>
 800ba12:	eeb4 9a49 	vcmp.f32	s18, s18
 800ba16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba1a:	d70d      	bvc.n	800ba38 <powf+0x50>
 800ba1c:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ba20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ba28:	bf08      	it	eq
 800ba2a:	eeb0 8a67 	vmoveq.f32	s16, s15
 800ba2e:	eeb0 0a48 	vmov.f32	s0, s16
 800ba32:	ecbd 8b04 	vpop	{d8-d9}
 800ba36:	bd08      	pop	{r3, pc}
 800ba38:	eddf 9a34 	vldr	s19, [pc, #208]	; 800bb0c <powf+0x124>
 800ba3c:	eeb4 9a69 	vcmp.f32	s18, s19
 800ba40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba44:	d116      	bne.n	800ba74 <powf+0x8c>
 800ba46:	eef4 8a69 	vcmp.f32	s17, s19
 800ba4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4e:	d057      	beq.n	800bb00 <powf+0x118>
 800ba50:	eeb0 0a68 	vmov.f32	s0, s17
 800ba54:	f000 fb50 	bl	800c0f8 <finitef>
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	d0e8      	beq.n	800ba2e <powf+0x46>
 800ba5c:	eef4 8ae9 	vcmpe.f32	s17, s19
 800ba60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba64:	d5e3      	bpl.n	800ba2e <powf+0x46>
 800ba66:	f7fd fa7f 	bl	8008f68 <__errno>
 800ba6a:	2321      	movs	r3, #33	; 0x21
 800ba6c:	6003      	str	r3, [r0, #0]
 800ba6e:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800bb10 <powf+0x128>
 800ba72:	e7dc      	b.n	800ba2e <powf+0x46>
 800ba74:	f000 fb40 	bl	800c0f8 <finitef>
 800ba78:	bb50      	cbnz	r0, 800bad0 <powf+0xe8>
 800ba7a:	eeb0 0a49 	vmov.f32	s0, s18
 800ba7e:	f000 fb3b 	bl	800c0f8 <finitef>
 800ba82:	b328      	cbz	r0, 800bad0 <powf+0xe8>
 800ba84:	eeb0 0a68 	vmov.f32	s0, s17
 800ba88:	f000 fb36 	bl	800c0f8 <finitef>
 800ba8c:	b300      	cbz	r0, 800bad0 <powf+0xe8>
 800ba8e:	eeb4 8a48 	vcmp.f32	s16, s16
 800ba92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba96:	d706      	bvc.n	800baa6 <powf+0xbe>
 800ba98:	f7fd fa66 	bl	8008f68 <__errno>
 800ba9c:	2321      	movs	r3, #33	; 0x21
 800ba9e:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800baa2:	6003      	str	r3, [r0, #0]
 800baa4:	e7c3      	b.n	800ba2e <powf+0x46>
 800baa6:	f7fd fa5f 	bl	8008f68 <__errno>
 800baaa:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800baae:	2322      	movs	r3, #34	; 0x22
 800bab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bab4:	6003      	str	r3, [r0, #0]
 800bab6:	d508      	bpl.n	800baca <powf+0xe2>
 800bab8:	eeb0 0a68 	vmov.f32	s0, s17
 800babc:	f000 fb30 	bl	800c120 <rintf>
 800bac0:	eeb4 0a68 	vcmp.f32	s0, s17
 800bac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac8:	d1d1      	bne.n	800ba6e <powf+0x86>
 800baca:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800bb14 <powf+0x12c>
 800bace:	e7ae      	b.n	800ba2e <powf+0x46>
 800bad0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad8:	d1a9      	bne.n	800ba2e <powf+0x46>
 800bada:	eeb0 0a49 	vmov.f32	s0, s18
 800bade:	f000 fb0b 	bl	800c0f8 <finitef>
 800bae2:	2800      	cmp	r0, #0
 800bae4:	d0a3      	beq.n	800ba2e <powf+0x46>
 800bae6:	eeb0 0a68 	vmov.f32	s0, s17
 800baea:	f000 fb05 	bl	800c0f8 <finitef>
 800baee:	2800      	cmp	r0, #0
 800baf0:	d09d      	beq.n	800ba2e <powf+0x46>
 800baf2:	f7fd fa39 	bl	8008f68 <__errno>
 800baf6:	2322      	movs	r3, #34	; 0x22
 800baf8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800bb0c <powf+0x124>
 800bafc:	6003      	str	r3, [r0, #0]
 800bafe:	e796      	b.n	800ba2e <powf+0x46>
 800bb00:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800bb04:	e793      	b.n	800ba2e <powf+0x46>
 800bb06:	bf00      	nop
 800bb08:	200005e0 	.word	0x200005e0
 800bb0c:	00000000 	.word	0x00000000
 800bb10:	ff800000 	.word	0xff800000
 800bb14:	7f800000 	.word	0x7f800000

0800bb18 <sqrtf>:
 800bb18:	b508      	push	{r3, lr}
 800bb1a:	ed2d 8b02 	vpush	{d8}
 800bb1e:	eeb0 8a40 	vmov.f32	s16, s0
 800bb22:	f000 fadf 	bl	800c0e4 <__ieee754_sqrtf>
 800bb26:	4b0d      	ldr	r3, [pc, #52]	; (800bb5c <sqrtf+0x44>)
 800bb28:	f993 3000 	ldrsb.w	r3, [r3]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	d011      	beq.n	800bb54 <sqrtf+0x3c>
 800bb30:	eeb4 8a48 	vcmp.f32	s16, s16
 800bb34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb38:	d60c      	bvs.n	800bb54 <sqrtf+0x3c>
 800bb3a:	eddf 8a09 	vldr	s17, [pc, #36]	; 800bb60 <sqrtf+0x48>
 800bb3e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb46:	d505      	bpl.n	800bb54 <sqrtf+0x3c>
 800bb48:	f7fd fa0e 	bl	8008f68 <__errno>
 800bb4c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bb50:	2321      	movs	r3, #33	; 0x21
 800bb52:	6003      	str	r3, [r0, #0]
 800bb54:	ecbd 8b02 	vpop	{d8}
 800bb58:	bd08      	pop	{r3, pc}
 800bb5a:	bf00      	nop
 800bb5c:	200005e0 	.word	0x200005e0
 800bb60:	00000000 	.word	0x00000000

0800bb64 <__ieee754_powf>:
 800bb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb68:	ee10 5a90 	vmov	r5, s1
 800bb6c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800bb70:	ed2d 8b02 	vpush	{d8}
 800bb74:	eeb0 8a40 	vmov.f32	s16, s0
 800bb78:	eef0 8a60 	vmov.f32	s17, s1
 800bb7c:	f000 8291 	beq.w	800c0a2 <__ieee754_powf+0x53e>
 800bb80:	ee10 8a10 	vmov	r8, s0
 800bb84:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800bb88:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800bb8c:	dc06      	bgt.n	800bb9c <__ieee754_powf+0x38>
 800bb8e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800bb92:	dd0a      	ble.n	800bbaa <__ieee754_powf+0x46>
 800bb94:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800bb98:	f000 8283 	beq.w	800c0a2 <__ieee754_powf+0x53e>
 800bb9c:	ecbd 8b02 	vpop	{d8}
 800bba0:	48d8      	ldr	r0, [pc, #864]	; (800bf04 <__ieee754_powf+0x3a0>)
 800bba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bba6:	f000 bab5 	b.w	800c114 <nanf>
 800bbaa:	f1b8 0f00 	cmp.w	r8, #0
 800bbae:	da1f      	bge.n	800bbf0 <__ieee754_powf+0x8c>
 800bbb0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800bbb4:	da2e      	bge.n	800bc14 <__ieee754_powf+0xb0>
 800bbb6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800bbba:	f2c0 827b 	blt.w	800c0b4 <__ieee754_powf+0x550>
 800bbbe:	15fb      	asrs	r3, r7, #23
 800bbc0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800bbc4:	fa47 f603 	asr.w	r6, r7, r3
 800bbc8:	fa06 f303 	lsl.w	r3, r6, r3
 800bbcc:	42bb      	cmp	r3, r7
 800bbce:	f040 8271 	bne.w	800c0b4 <__ieee754_powf+0x550>
 800bbd2:	f006 0601 	and.w	r6, r6, #1
 800bbd6:	f1c6 0602 	rsb	r6, r6, #2
 800bbda:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800bbde:	d120      	bne.n	800bc22 <__ieee754_powf+0xbe>
 800bbe0:	2d00      	cmp	r5, #0
 800bbe2:	f280 8264 	bge.w	800c0ae <__ieee754_powf+0x54a>
 800bbe6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bbea:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800bbee:	e00d      	b.n	800bc0c <__ieee754_powf+0xa8>
 800bbf0:	2600      	movs	r6, #0
 800bbf2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800bbf6:	d1f0      	bne.n	800bbda <__ieee754_powf+0x76>
 800bbf8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800bbfc:	f000 8251 	beq.w	800c0a2 <__ieee754_powf+0x53e>
 800bc00:	dd0a      	ble.n	800bc18 <__ieee754_powf+0xb4>
 800bc02:	2d00      	cmp	r5, #0
 800bc04:	f280 8250 	bge.w	800c0a8 <__ieee754_powf+0x544>
 800bc08:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800bf08 <__ieee754_powf+0x3a4>
 800bc0c:	ecbd 8b02 	vpop	{d8}
 800bc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc14:	2602      	movs	r6, #2
 800bc16:	e7ec      	b.n	800bbf2 <__ieee754_powf+0x8e>
 800bc18:	2d00      	cmp	r5, #0
 800bc1a:	daf5      	bge.n	800bc08 <__ieee754_powf+0xa4>
 800bc1c:	eeb1 0a68 	vneg.f32	s0, s17
 800bc20:	e7f4      	b.n	800bc0c <__ieee754_powf+0xa8>
 800bc22:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800bc26:	d102      	bne.n	800bc2e <__ieee754_powf+0xca>
 800bc28:	ee28 0a08 	vmul.f32	s0, s16, s16
 800bc2c:	e7ee      	b.n	800bc0c <__ieee754_powf+0xa8>
 800bc2e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800bc32:	eeb0 0a48 	vmov.f32	s0, s16
 800bc36:	d108      	bne.n	800bc4a <__ieee754_powf+0xe6>
 800bc38:	f1b8 0f00 	cmp.w	r8, #0
 800bc3c:	db05      	blt.n	800bc4a <__ieee754_powf+0xe6>
 800bc3e:	ecbd 8b02 	vpop	{d8}
 800bc42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc46:	f000 ba4d 	b.w	800c0e4 <__ieee754_sqrtf>
 800bc4a:	f000 fa4e 	bl	800c0ea <fabsf>
 800bc4e:	b124      	cbz	r4, 800bc5a <__ieee754_powf+0xf6>
 800bc50:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800bc54:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800bc58:	d117      	bne.n	800bc8a <__ieee754_powf+0x126>
 800bc5a:	2d00      	cmp	r5, #0
 800bc5c:	bfbc      	itt	lt
 800bc5e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800bc62:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800bc66:	f1b8 0f00 	cmp.w	r8, #0
 800bc6a:	dacf      	bge.n	800bc0c <__ieee754_powf+0xa8>
 800bc6c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800bc70:	ea54 0306 	orrs.w	r3, r4, r6
 800bc74:	d104      	bne.n	800bc80 <__ieee754_powf+0x11c>
 800bc76:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bc7a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800bc7e:	e7c5      	b.n	800bc0c <__ieee754_powf+0xa8>
 800bc80:	2e01      	cmp	r6, #1
 800bc82:	d1c3      	bne.n	800bc0c <__ieee754_powf+0xa8>
 800bc84:	eeb1 0a40 	vneg.f32	s0, s0
 800bc88:	e7c0      	b.n	800bc0c <__ieee754_powf+0xa8>
 800bc8a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800bc8e:	3801      	subs	r0, #1
 800bc90:	ea56 0300 	orrs.w	r3, r6, r0
 800bc94:	d104      	bne.n	800bca0 <__ieee754_powf+0x13c>
 800bc96:	ee38 8a48 	vsub.f32	s16, s16, s16
 800bc9a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800bc9e:	e7b5      	b.n	800bc0c <__ieee754_powf+0xa8>
 800bca0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800bca4:	dd6b      	ble.n	800bd7e <__ieee754_powf+0x21a>
 800bca6:	4b99      	ldr	r3, [pc, #612]	; (800bf0c <__ieee754_powf+0x3a8>)
 800bca8:	429c      	cmp	r4, r3
 800bcaa:	dc06      	bgt.n	800bcba <__ieee754_powf+0x156>
 800bcac:	2d00      	cmp	r5, #0
 800bcae:	daab      	bge.n	800bc08 <__ieee754_powf+0xa4>
 800bcb0:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800bf10 <__ieee754_powf+0x3ac>
 800bcb4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bcb8:	e7a8      	b.n	800bc0c <__ieee754_powf+0xa8>
 800bcba:	4b96      	ldr	r3, [pc, #600]	; (800bf14 <__ieee754_powf+0x3b0>)
 800bcbc:	429c      	cmp	r4, r3
 800bcbe:	dd02      	ble.n	800bcc6 <__ieee754_powf+0x162>
 800bcc0:	2d00      	cmp	r5, #0
 800bcc2:	dcf5      	bgt.n	800bcb0 <__ieee754_powf+0x14c>
 800bcc4:	e7a0      	b.n	800bc08 <__ieee754_powf+0xa4>
 800bcc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bcca:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bcce:	eddf 6a92 	vldr	s13, [pc, #584]	; 800bf18 <__ieee754_powf+0x3b4>
 800bcd2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800bcd6:	eee0 6a67 	vfms.f32	s13, s0, s15
 800bcda:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bcde:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800bce2:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcea:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800bf1c <__ieee754_powf+0x3b8>
 800bcee:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800bcf2:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800bf20 <__ieee754_powf+0x3bc>
 800bcf6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bcfa:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800bf24 <__ieee754_powf+0x3c0>
 800bcfe:	eef0 6a67 	vmov.f32	s13, s15
 800bd02:	eee0 6a07 	vfma.f32	s13, s0, s14
 800bd06:	ee16 3a90 	vmov	r3, s13
 800bd0a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bd0e:	f023 030f 	bic.w	r3, r3, #15
 800bd12:	ee00 3a90 	vmov	s1, r3
 800bd16:	eee0 0a47 	vfms.f32	s1, s0, s14
 800bd1a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bd1e:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800bd22:	f025 050f 	bic.w	r5, r5, #15
 800bd26:	ee07 5a10 	vmov	s14, r5
 800bd2a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800bd2e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800bd32:	ee07 3a90 	vmov	s15, r3
 800bd36:	eee7 0a27 	vfma.f32	s1, s14, s15
 800bd3a:	3e01      	subs	r6, #1
 800bd3c:	ea56 0200 	orrs.w	r2, r6, r0
 800bd40:	ee07 5a10 	vmov	s14, r5
 800bd44:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd48:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800bd4c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800bd50:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800bd54:	ee17 4a10 	vmov	r4, s14
 800bd58:	bf08      	it	eq
 800bd5a:	eeb0 8a40 	vmoveq.f32	s16, s0
 800bd5e:	2c00      	cmp	r4, #0
 800bd60:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bd64:	f340 8184 	ble.w	800c070 <__ieee754_powf+0x50c>
 800bd68:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800bd6c:	f340 80fc 	ble.w	800bf68 <__ieee754_powf+0x404>
 800bd70:	eddf 7a67 	vldr	s15, [pc, #412]	; 800bf10 <__ieee754_powf+0x3ac>
 800bd74:	ee28 0a27 	vmul.f32	s0, s16, s15
 800bd78:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bd7c:	e746      	b.n	800bc0c <__ieee754_powf+0xa8>
 800bd7e:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800bd82:	bf01      	itttt	eq
 800bd84:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800bf28 <__ieee754_powf+0x3c4>
 800bd88:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800bd8c:	f06f 0217 	mvneq.w	r2, #23
 800bd90:	ee17 4a90 	vmoveq	r4, s15
 800bd94:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800bd98:	bf18      	it	ne
 800bd9a:	2200      	movne	r2, #0
 800bd9c:	3b7f      	subs	r3, #127	; 0x7f
 800bd9e:	4413      	add	r3, r2
 800bda0:	4a62      	ldr	r2, [pc, #392]	; (800bf2c <__ieee754_powf+0x3c8>)
 800bda2:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800bda6:	4294      	cmp	r4, r2
 800bda8:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800bdac:	dd06      	ble.n	800bdbc <__ieee754_powf+0x258>
 800bdae:	4a60      	ldr	r2, [pc, #384]	; (800bf30 <__ieee754_powf+0x3cc>)
 800bdb0:	4294      	cmp	r4, r2
 800bdb2:	f340 80a4 	ble.w	800befe <__ieee754_powf+0x39a>
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800bdbc:	2400      	movs	r4, #0
 800bdbe:	4a5d      	ldr	r2, [pc, #372]	; (800bf34 <__ieee754_powf+0x3d0>)
 800bdc0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800bdc4:	ee07 1a90 	vmov	s15, r1
 800bdc8:	ed92 7a00 	vldr	s14, [r2]
 800bdcc:	4a5a      	ldr	r2, [pc, #360]	; (800bf38 <__ieee754_powf+0x3d4>)
 800bdce:	ee37 6a27 	vadd.f32	s12, s14, s15
 800bdd2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800bdd6:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800bdda:	1049      	asrs	r1, r1, #1
 800bddc:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800bde0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800bde4:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800bde8:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800bdec:	ee06 1a10 	vmov	s12, r1
 800bdf0:	ee65 4a26 	vmul.f32	s9, s10, s13
 800bdf4:	ee36 7a47 	vsub.f32	s14, s12, s14
 800bdf8:	ee14 7a90 	vmov	r7, s9
 800bdfc:	4017      	ands	r7, r2
 800bdfe:	ee05 7a90 	vmov	s11, r7
 800be02:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800be06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be0a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800bf3c <__ieee754_powf+0x3d8>
 800be0e:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800be12:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800be16:	ee25 6a26 	vmul.f32	s12, s10, s13
 800be1a:	eddf 6a49 	vldr	s13, [pc, #292]	; 800bf40 <__ieee754_powf+0x3dc>
 800be1e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800be22:	eddf 6a48 	vldr	s13, [pc, #288]	; 800bf44 <__ieee754_powf+0x3e0>
 800be26:	eee7 6a27 	vfma.f32	s13, s14, s15
 800be2a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800bf18 <__ieee754_powf+0x3b4>
 800be2e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800be32:	eddf 6a45 	vldr	s13, [pc, #276]	; 800bf48 <__ieee754_powf+0x3e4>
 800be36:	eee7 6a27 	vfma.f32	s13, s14, s15
 800be3a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800bf4c <__ieee754_powf+0x3e8>
 800be3e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800be42:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800be46:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800be4a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800be4e:	eee5 6a07 	vfma.f32	s13, s10, s14
 800be52:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800be56:	eef0 7a45 	vmov.f32	s15, s10
 800be5a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800be5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be62:	ee17 1a90 	vmov	r1, s15
 800be66:	4011      	ands	r1, r2
 800be68:	ee07 1a90 	vmov	s15, r1
 800be6c:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800be70:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800be74:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800be78:	ee27 7a24 	vmul.f32	s14, s14, s9
 800be7c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800be80:	eeb0 6a47 	vmov.f32	s12, s14
 800be84:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800be88:	ee16 1a10 	vmov	r1, s12
 800be8c:	4011      	ands	r1, r2
 800be8e:	ee06 1a90 	vmov	s13, r1
 800be92:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800be96:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800bf50 <__ieee754_powf+0x3ec>
 800be9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800bf54 <__ieee754_powf+0x3f0>
 800be9e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800bea2:	ee06 1a10 	vmov	s12, r1
 800bea6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800beaa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800bf58 <__ieee754_powf+0x3f4>
 800beae:	492b      	ldr	r1, [pc, #172]	; (800bf5c <__ieee754_powf+0x3f8>)
 800beb0:	eea6 7a27 	vfma.f32	s14, s12, s15
 800beb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800beb8:	edd1 7a00 	vldr	s15, [r1]
 800bebc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bec0:	ee07 3a90 	vmov	s15, r3
 800bec4:	4b26      	ldr	r3, [pc, #152]	; (800bf60 <__ieee754_powf+0x3fc>)
 800bec6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800beca:	eef0 7a47 	vmov.f32	s15, s14
 800bece:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bed2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bed6:	edd4 0a00 	vldr	s1, [r4]
 800beda:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800bede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bee2:	ee17 3a90 	vmov	r3, s15
 800bee6:	4013      	ands	r3, r2
 800bee8:	ee07 3a90 	vmov	s15, r3
 800beec:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800bef0:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800bef4:	eee6 6a65 	vfms.f32	s13, s12, s11
 800bef8:	ee77 7a66 	vsub.f32	s15, s14, s13
 800befc:	e70f      	b.n	800bd1e <__ieee754_powf+0x1ba>
 800befe:	2401      	movs	r4, #1
 800bf00:	e75d      	b.n	800bdbe <__ieee754_powf+0x25a>
 800bf02:	bf00      	nop
 800bf04:	0800f440 	.word	0x0800f440
 800bf08:	00000000 	.word	0x00000000
 800bf0c:	3f7ffff7 	.word	0x3f7ffff7
 800bf10:	7149f2ca 	.word	0x7149f2ca
 800bf14:	3f800007 	.word	0x3f800007
 800bf18:	3eaaaaab 	.word	0x3eaaaaab
 800bf1c:	3fb8aa3b 	.word	0x3fb8aa3b
 800bf20:	36eca570 	.word	0x36eca570
 800bf24:	3fb8aa00 	.word	0x3fb8aa00
 800bf28:	4b800000 	.word	0x4b800000
 800bf2c:	001cc471 	.word	0x001cc471
 800bf30:	005db3d6 	.word	0x005db3d6
 800bf34:	0800f54c 	.word	0x0800f54c
 800bf38:	fffff000 	.word	0xfffff000
 800bf3c:	3e6c3255 	.word	0x3e6c3255
 800bf40:	3e53f142 	.word	0x3e53f142
 800bf44:	3e8ba305 	.word	0x3e8ba305
 800bf48:	3edb6db7 	.word	0x3edb6db7
 800bf4c:	3f19999a 	.word	0x3f19999a
 800bf50:	3f76384f 	.word	0x3f76384f
 800bf54:	3f763800 	.word	0x3f763800
 800bf58:	369dc3a0 	.word	0x369dc3a0
 800bf5c:	0800f55c 	.word	0x0800f55c
 800bf60:	0800f554 	.word	0x0800f554
 800bf64:	3338aa3c 	.word	0x3338aa3c
 800bf68:	f040 8092 	bne.w	800c090 <__ieee754_powf+0x52c>
 800bf6c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800bf64 <__ieee754_powf+0x400>
 800bf70:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bf74:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800bf78:	eef4 6ac7 	vcmpe.f32	s13, s14
 800bf7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf80:	f73f aef6 	bgt.w	800bd70 <__ieee754_powf+0x20c>
 800bf84:	15db      	asrs	r3, r3, #23
 800bf86:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800bf8a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bf8e:	4103      	asrs	r3, r0
 800bf90:	4423      	add	r3, r4
 800bf92:	4949      	ldr	r1, [pc, #292]	; (800c0b8 <__ieee754_powf+0x554>)
 800bf94:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bf98:	3a7f      	subs	r2, #127	; 0x7f
 800bf9a:	4111      	asrs	r1, r2
 800bf9c:	ea23 0101 	bic.w	r1, r3, r1
 800bfa0:	ee07 1a10 	vmov	s14, r1
 800bfa4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800bfa8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800bfac:	f1c2 0217 	rsb	r2, r2, #23
 800bfb0:	4110      	asrs	r0, r2
 800bfb2:	2c00      	cmp	r4, #0
 800bfb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bfb8:	bfb8      	it	lt
 800bfba:	4240      	neglt	r0, r0
 800bfbc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800bfc0:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800c0bc <__ieee754_powf+0x558>
 800bfc4:	ee17 3a10 	vmov	r3, s14
 800bfc8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bfcc:	f023 030f 	bic.w	r3, r3, #15
 800bfd0:	ee07 3a10 	vmov	s14, r3
 800bfd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bfd8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800bfdc:	eddf 7a38 	vldr	s15, [pc, #224]	; 800c0c0 <__ieee754_powf+0x55c>
 800bfe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfe4:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800bfe8:	eddf 6a36 	vldr	s13, [pc, #216]	; 800c0c4 <__ieee754_powf+0x560>
 800bfec:	eeb0 0a67 	vmov.f32	s0, s15
 800bff0:	eea7 0a26 	vfma.f32	s0, s14, s13
 800bff4:	eeb0 6a40 	vmov.f32	s12, s0
 800bff8:	eea7 6a66 	vfms.f32	s12, s14, s13
 800bffc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c000:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c004:	eddf 6a30 	vldr	s13, [pc, #192]	; 800c0c8 <__ieee754_powf+0x564>
 800c008:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800c0cc <__ieee754_powf+0x568>
 800c00c:	eea7 6a26 	vfma.f32	s12, s14, s13
 800c010:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800c0d0 <__ieee754_powf+0x56c>
 800c014:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c018:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800c0d4 <__ieee754_powf+0x570>
 800c01c:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c020:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800c0d8 <__ieee754_powf+0x574>
 800c024:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c028:	eeb0 6a40 	vmov.f32	s12, s0
 800c02c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800c030:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c034:	eeb0 7a46 	vmov.f32	s14, s12
 800c038:	ee77 6a66 	vsub.f32	s13, s14, s13
 800c03c:	ee20 6a06 	vmul.f32	s12, s0, s12
 800c040:	eee0 7a27 	vfma.f32	s15, s0, s15
 800c044:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800c048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c04c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c050:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c054:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c058:	ee10 3a10 	vmov	r3, s0
 800c05c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c060:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c064:	da1a      	bge.n	800c09c <__ieee754_powf+0x538>
 800c066:	f000 f8b7 	bl	800c1d8 <scalbnf>
 800c06a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c06e:	e5cd      	b.n	800bc0c <__ieee754_powf+0xa8>
 800c070:	4a1a      	ldr	r2, [pc, #104]	; (800c0dc <__ieee754_powf+0x578>)
 800c072:	4293      	cmp	r3, r2
 800c074:	dd02      	ble.n	800c07c <__ieee754_powf+0x518>
 800c076:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800c0e0 <__ieee754_powf+0x57c>
 800c07a:	e67b      	b.n	800bd74 <__ieee754_powf+0x210>
 800c07c:	d108      	bne.n	800c090 <__ieee754_powf+0x52c>
 800c07e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c082:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c08a:	f6ff af7b 	blt.w	800bf84 <__ieee754_powf+0x420>
 800c08e:	e7f2      	b.n	800c076 <__ieee754_powf+0x512>
 800c090:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800c094:	f73f af76 	bgt.w	800bf84 <__ieee754_powf+0x420>
 800c098:	2000      	movs	r0, #0
 800c09a:	e78f      	b.n	800bfbc <__ieee754_powf+0x458>
 800c09c:	ee00 3a10 	vmov	s0, r3
 800c0a0:	e7e3      	b.n	800c06a <__ieee754_powf+0x506>
 800c0a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c0a6:	e5b1      	b.n	800bc0c <__ieee754_powf+0xa8>
 800c0a8:	eeb0 0a68 	vmov.f32	s0, s17
 800c0ac:	e5ae      	b.n	800bc0c <__ieee754_powf+0xa8>
 800c0ae:	eeb0 0a48 	vmov.f32	s0, s16
 800c0b2:	e5ab      	b.n	800bc0c <__ieee754_powf+0xa8>
 800c0b4:	2600      	movs	r6, #0
 800c0b6:	e590      	b.n	800bbda <__ieee754_powf+0x76>
 800c0b8:	007fffff 	.word	0x007fffff
 800c0bc:	3f317218 	.word	0x3f317218
 800c0c0:	35bfbe8c 	.word	0x35bfbe8c
 800c0c4:	3f317200 	.word	0x3f317200
 800c0c8:	3331bb4c 	.word	0x3331bb4c
 800c0cc:	b5ddea0e 	.word	0xb5ddea0e
 800c0d0:	388ab355 	.word	0x388ab355
 800c0d4:	bb360b61 	.word	0xbb360b61
 800c0d8:	3e2aaaab 	.word	0x3e2aaaab
 800c0dc:	43160000 	.word	0x43160000
 800c0e0:	0da24260 	.word	0x0da24260

0800c0e4 <__ieee754_sqrtf>:
 800c0e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c0e8:	4770      	bx	lr

0800c0ea <fabsf>:
 800c0ea:	ee10 3a10 	vmov	r3, s0
 800c0ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0f2:	ee00 3a10 	vmov	s0, r3
 800c0f6:	4770      	bx	lr

0800c0f8 <finitef>:
 800c0f8:	b082      	sub	sp, #8
 800c0fa:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c0fe:	9801      	ldr	r0, [sp, #4]
 800c100:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c104:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c108:	bfac      	ite	ge
 800c10a:	2000      	movge	r0, #0
 800c10c:	2001      	movlt	r0, #1
 800c10e:	b002      	add	sp, #8
 800c110:	4770      	bx	lr
	...

0800c114 <nanf>:
 800c114:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c11c <nanf+0x8>
 800c118:	4770      	bx	lr
 800c11a:	bf00      	nop
 800c11c:	7fc00000 	.word	0x7fc00000

0800c120 <rintf>:
 800c120:	ee10 2a10 	vmov	r2, s0
 800c124:	b513      	push	{r0, r1, r4, lr}
 800c126:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c12a:	397f      	subs	r1, #127	; 0x7f
 800c12c:	2916      	cmp	r1, #22
 800c12e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800c132:	dc47      	bgt.n	800c1c4 <rintf+0xa4>
 800c134:	b32b      	cbz	r3, 800c182 <rintf+0x62>
 800c136:	2900      	cmp	r1, #0
 800c138:	ee10 3a10 	vmov	r3, s0
 800c13c:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800c140:	da21      	bge.n	800c186 <rintf+0x66>
 800c142:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800c146:	425b      	negs	r3, r3
 800c148:	4921      	ldr	r1, [pc, #132]	; (800c1d0 <rintf+0xb0>)
 800c14a:	0a5b      	lsrs	r3, r3, #9
 800c14c:	0d12      	lsrs	r2, r2, #20
 800c14e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c152:	0512      	lsls	r2, r2, #20
 800c154:	4313      	orrs	r3, r2
 800c156:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800c15a:	ee07 3a90 	vmov	s15, r3
 800c15e:	edd1 6a00 	vldr	s13, [r1]
 800c162:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800c166:	ed8d 7a01 	vstr	s14, [sp, #4]
 800c16a:	eddd 7a01 	vldr	s15, [sp, #4]
 800c16e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c172:	ee17 3a90 	vmov	r3, s15
 800c176:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c17a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800c17e:	ee00 3a10 	vmov	s0, r3
 800c182:	b002      	add	sp, #8
 800c184:	bd10      	pop	{r4, pc}
 800c186:	4a13      	ldr	r2, [pc, #76]	; (800c1d4 <rintf+0xb4>)
 800c188:	410a      	asrs	r2, r1
 800c18a:	4213      	tst	r3, r2
 800c18c:	d0f9      	beq.n	800c182 <rintf+0x62>
 800c18e:	0854      	lsrs	r4, r2, #1
 800c190:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 800c194:	d006      	beq.n	800c1a4 <rintf+0x84>
 800c196:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c19a:	ea23 0304 	bic.w	r3, r3, r4
 800c19e:	fa42 f101 	asr.w	r1, r2, r1
 800c1a2:	430b      	orrs	r3, r1
 800c1a4:	4a0a      	ldr	r2, [pc, #40]	; (800c1d0 <rintf+0xb0>)
 800c1a6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800c1aa:	ed90 7a00 	vldr	s14, [r0]
 800c1ae:	ee07 3a90 	vmov	s15, r3
 800c1b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1b6:	edcd 7a01 	vstr	s15, [sp, #4]
 800c1ba:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c1be:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c1c2:	e7de      	b.n	800c182 <rintf+0x62>
 800c1c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c1c8:	d3db      	bcc.n	800c182 <rintf+0x62>
 800c1ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c1ce:	e7d8      	b.n	800c182 <rintf+0x62>
 800c1d0:	0800f564 	.word	0x0800f564
 800c1d4:	007fffff 	.word	0x007fffff

0800c1d8 <scalbnf>:
 800c1d8:	ee10 3a10 	vmov	r3, s0
 800c1dc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c1e0:	d025      	beq.n	800c22e <scalbnf+0x56>
 800c1e2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c1e6:	d302      	bcc.n	800c1ee <scalbnf+0x16>
 800c1e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c1ec:	4770      	bx	lr
 800c1ee:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c1f2:	d122      	bne.n	800c23a <scalbnf+0x62>
 800c1f4:	4b2a      	ldr	r3, [pc, #168]	; (800c2a0 <scalbnf+0xc8>)
 800c1f6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c2a4 <scalbnf+0xcc>
 800c1fa:	4298      	cmp	r0, r3
 800c1fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c200:	db16      	blt.n	800c230 <scalbnf+0x58>
 800c202:	ee10 3a10 	vmov	r3, s0
 800c206:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c20a:	3a19      	subs	r2, #25
 800c20c:	4402      	add	r2, r0
 800c20e:	2afe      	cmp	r2, #254	; 0xfe
 800c210:	dd15      	ble.n	800c23e <scalbnf+0x66>
 800c212:	ee10 3a10 	vmov	r3, s0
 800c216:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c2a8 <scalbnf+0xd0>
 800c21a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c2ac <scalbnf+0xd4>
 800c21e:	2b00      	cmp	r3, #0
 800c220:	eeb0 7a67 	vmov.f32	s14, s15
 800c224:	bfb8      	it	lt
 800c226:	eef0 7a66 	vmovlt.f32	s15, s13
 800c22a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c22e:	4770      	bx	lr
 800c230:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c2b0 <scalbnf+0xd8>
 800c234:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c238:	4770      	bx	lr
 800c23a:	0dd2      	lsrs	r2, r2, #23
 800c23c:	e7e6      	b.n	800c20c <scalbnf+0x34>
 800c23e:	2a00      	cmp	r2, #0
 800c240:	dd06      	ble.n	800c250 <scalbnf+0x78>
 800c242:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c246:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c24a:	ee00 3a10 	vmov	s0, r3
 800c24e:	4770      	bx	lr
 800c250:	f112 0f16 	cmn.w	r2, #22
 800c254:	da1a      	bge.n	800c28c <scalbnf+0xb4>
 800c256:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c25a:	4298      	cmp	r0, r3
 800c25c:	ee10 3a10 	vmov	r3, s0
 800c260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c264:	dd0a      	ble.n	800c27c <scalbnf+0xa4>
 800c266:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c2a8 <scalbnf+0xd0>
 800c26a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c2ac <scalbnf+0xd4>
 800c26e:	eef0 7a40 	vmov.f32	s15, s0
 800c272:	2b00      	cmp	r3, #0
 800c274:	bf18      	it	ne
 800c276:	eeb0 0a47 	vmovne.f32	s0, s14
 800c27a:	e7db      	b.n	800c234 <scalbnf+0x5c>
 800c27c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c2b0 <scalbnf+0xd8>
 800c280:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c2b4 <scalbnf+0xdc>
 800c284:	eef0 7a40 	vmov.f32	s15, s0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	e7f3      	b.n	800c274 <scalbnf+0x9c>
 800c28c:	3219      	adds	r2, #25
 800c28e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c292:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c296:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c2b8 <scalbnf+0xe0>
 800c29a:	ee07 3a10 	vmov	s14, r3
 800c29e:	e7c4      	b.n	800c22a <scalbnf+0x52>
 800c2a0:	ffff3cb0 	.word	0xffff3cb0
 800c2a4:	4c000000 	.word	0x4c000000
 800c2a8:	7149f2ca 	.word	0x7149f2ca
 800c2ac:	f149f2ca 	.word	0xf149f2ca
 800c2b0:	0da24260 	.word	0x0da24260
 800c2b4:	8da24260 	.word	0x8da24260
 800c2b8:	33000000 	.word	0x33000000

0800c2bc <_init>:
 800c2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2be:	bf00      	nop
 800c2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2c2:	bc08      	pop	{r3}
 800c2c4:	469e      	mov	lr, r3
 800c2c6:	4770      	bx	lr

0800c2c8 <_fini>:
 800c2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ca:	bf00      	nop
 800c2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ce:	bc08      	pop	{r3}
 800c2d0:	469e      	mov	lr, r3
 800c2d2:	4770      	bx	lr
